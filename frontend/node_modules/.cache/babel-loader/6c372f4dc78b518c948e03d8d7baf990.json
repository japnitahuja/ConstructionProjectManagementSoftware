{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\gantt-chart\\\\gantt-chart.component.jsx\";\nimport React, { Component } from 'react';\nimport { gantt } from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nimport { selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dat = {\n  data: [{\n    id: 1,\n    text: 'Task #1',\n    start_date: '15-04-2019',\n    duration: 3,\n    progress: 0.6\n  }, {\n    id: 2,\n    text: 'Task #2',\n    start_date: '18-04-2019',\n    duration: 3,\n    progress: 0.4\n  }]\n};\n\nclass GanttChart extends Component {\n  constructor(props) {\n    super(props);\n    this.dataProcessor = null;\n  }\n\n  componentDidMount() {\n    gantt.init(this.ganttContainer);\n    this.initGanttDataProcessor();\n    const {\n      tasks\n    } = this.props;\n    console.log(tasks);\n    let data = {\n      data: []\n    };\n    tasks.forEach(task => {\n      let temp = {};\n      temp.id = task._id;\n      temp.text = task.taskName;\n      var startDate = new Date(task.taskStartDate);\n      var endDate = new Date(task.taskEndDate);\n      temp.start_date = startDate.getDate() + \"-\" + (startDate.getMonth() + 1) + \"-\" + startDate.getFullYear();\n      var Difference_In_Time = endDate.getTime() - startDate.getTime();\n      temp.duration = Difference_In_Time / (1000 * 3600 * 24);\n      data.data.push(temp);\n      console.log(\"data\", data.data);\n    });\n    gantt.parse(dat);\n  }\n\n  initGanttDataProcessor(props) {\n    /**\r\n     * type: \"task\"|\"link\"\r\n     * action: \"create\"|\"update\"|\"delete\"\r\n     * item: data object object\r\n     */\n    const onDataUpdated = this.props.onDataUpdated;\n    this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\n      console.log(type, action, item, id);\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.dataProcessor) {\n      this.dataProcessor.destructor();\n      this.dataProcessor = null;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: input => {\n        this.ganttContainer = input;\n      },\n      style: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  tasks: selectCurrentProjectTasks\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GanttChart);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/gantt-chart/gantt-chart.component.jsx"],"names":["React","Component","gantt","selectCurrentProjectTasks","connect","createStructuredSelector","dat","data","id","text","start_date","duration","progress","GanttChart","constructor","props","dataProcessor","componentDidMount","init","ganttContainer","initGanttDataProcessor","tasks","console","log","forEach","task","temp","_id","taskName","startDate","Date","taskStartDate","endDate","taskEndDate","getDate","getMonth","getFullYear","Difference_In_Time","getTime","push","parse","onDataUpdated","createDataProcessor","type","action","item","componentWillUnmount","destructor","render","input","width","height","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { gantt } from 'dhtmlx-gantt';\r\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\nimport { selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nconst dat = {\r\n    data: [\r\n        { id: 1, text: 'Task #1', start_date: '15-04-2019', duration: 3, progress: 0.6 },\r\n        { id: 2, text: 'Task #2', start_date: '18-04-2019', duration: 3, progress: 0.4 }\r\n    ]\r\n};\r\n \r\nclass GanttChart extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    dataProcessor = null;\r\n\r\n    componentDidMount() {\r\n        \r\n        gantt.init(this.ganttContainer);\r\n        this.initGanttDataProcessor();\r\n\r\n        const {tasks} = this.props;\r\n        console.log(tasks);\r\n        let data = {data:[]};\r\n\r\n        tasks.forEach(task => {\r\n            let temp = {};\r\n            temp.id = task._id;\r\n            temp.text = task.taskName;\r\n\r\n            var startDate = new Date(task.taskStartDate);\r\n            var endDate = new Date(task.taskEndDate);\r\n\r\n            temp.start_date = startDate.getDate() + \"-\" + (startDate.getMonth()+1) + \"-\" + startDate.getFullYear();\r\n\r\n            var Difference_In_Time = endDate.getTime() - startDate.getTime();\r\n            temp.duration = Difference_In_Time / (1000 * 3600 * 24);\r\n\r\n            \r\n            data.data.push(temp);\r\n            console.log(\"data\",data.data);\r\n        });\r\n\r\n        gantt.parse(dat);\r\n    }\r\n\r\n    initGanttDataProcessor(props) {\r\n        /**\r\n         * type: \"task\"|\"link\"\r\n         * action: \"create\"|\"update\"|\"delete\"\r\n         * item: data object object\r\n         */\r\n        const onDataUpdated = this.props.onDataUpdated;\r\n        \r\n        this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\r\n          console.log(type, action, item, id);\r\n          \r\n        });\r\n      }\r\n\r\n    componentWillUnmount() {\r\n        if (this.dataProcessor) {\r\n            this.dataProcessor.destructor();\r\n            this.dataProcessor = null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n       return (\r\n           <div\r\n                ref={ (input) => { this.ganttContainer = input } }\r\n                style={ { width: '100%', height: '100vh' } }\r\n            ></div>\r\n       );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    tasks: selectCurrentProjectTasks\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n      \r\n    \r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(GanttChart);"]},"metadata":{},"sourceType":"module"}