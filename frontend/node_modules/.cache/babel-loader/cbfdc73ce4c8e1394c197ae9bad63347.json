{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { deleteCurrentProjectFailure, deleteCurrentProjectSuccess, fetchCurrentProjectFailure, fetchCurrentProjectSuccess } from \"./current-project.actions\";\nimport { CurrentProjectActionTypes } from \"./current-project.types\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { deleteProject } from \"../all-projects/all-projects.actions\";\nexport function* fetchCurrentProject({\n  payload\n}) {\n  try {\n    const projectId = payload;\n    let currentProject = yield fetch(`http://127.0.0.1:5000/project/${projectId}`);\n    currentProject = yield currentProject.json();\n    console.log(currentProject);\n    currentProject.done ? yield put(fetchCurrentProjectSuccess(currentProject.project)) : yield put(fetchCurrentProjectFailure('CURRENT PROJECCT FETTCHING FAILED'));\n  } catch (error) {\n    fetchCurrentProjectFailure(error);\n  }\n}\nexport function* deleteCurrentProject({\n  payload\n}) {\n  try {\n    const projectId = payload;\n    console.log(projectId);\n    yield put(deleteProject(projectId));\n    let userId = yield select(selectUserId);\n    userId = {\n      userId: userId\n    };\n    console.log(userId);\n    let projectDeletion = yield fetch(`http://127.0.0.1:5000/project/${projectId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userId)\n    });\n    projectDeletion = yield projectDeletion.json();\n    projectDeletion.done ? yield put(deleteCurrentProjectSuccess(projectDeletion.message)) : yield put(deleteCurrentProjectFailure(projectDeletion.error));\n  } catch (error) {\n    console.log(error);\n    deleteCurrentProjectFailure(error);\n    console.log(error);\n  }\n}\nexport function* onCurrentProjectFetchStart() {\n  yield takeLatest(CurrentProjectActionTypes.FETCH_CURRENT_PROJECT_START, fetchCurrentProject);\n}\nexport function* onCurrentProjectDeleteStart() {\n  yield takeLatest(CurrentProjectActionTypes.DELETE_CURRENT_PROJECT_START, deleteCurrentProject);\n}\nexport function* currentProjectSagas() {\n  yield all([call(onCurrentProjectFetchStart), call(onCurrentProjectDeleteStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/current-project/current-project.sagas.js"],"names":["all","call","put","takeLatest","select","deleteCurrentProjectFailure","deleteCurrentProjectSuccess","fetchCurrentProjectFailure","fetchCurrentProjectSuccess","CurrentProjectActionTypes","selectUserId","deleteProject","fetchCurrentProject","payload","projectId","currentProject","fetch","json","console","log","done","project","error","deleteCurrentProject","userId","projectDeletion","method","headers","body","JSON","stringify","message","onCurrentProjectFetchStart","FETCH_CURRENT_PROJECT_START","onCurrentProjectDeleteStart","DELETE_CURRENT_PROJECT_START","currentProjectSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAkD,oBAAlD;AACA,SAAQC,2BAAR,EAAqCC,2BAArC,EAAkEC,0BAAlE,EAA8FC,0BAA9F,QAAgI,2BAAhI;AACA,SAASC,yBAAT,QAA0C,yBAA1C;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,aAAT,QAA8B,sCAA9B;AAEA,OAAO,UAAUC,mBAAV,CAA8B;AAACC,EAAAA;AAAD,CAA9B,EAAwC;AAC7C,MAAI;AACA,UAAMC,SAAS,GAAGD,OAAlB;AACF,QAAIE,cAAc,GAAG,MAAMC,KAAK,CAAE,iCAAgCF,SAAU,EAA5C,CAAhC;AACAC,IAAAA,cAAc,GAAG,MAAMA,cAAc,CAACE,IAAf,EAAvB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,cAAZ;AACAA,IAAAA,cAAc,CAACK,IAAf,GACE,MAAMlB,GAAG,CAACM,0BAA0B,CAACO,cAAc,CAACM,OAAhB,CAA3B,CADX,GAEE,MAAMnB,GAAG,CAACK,0BAA0B,CAAC,mCAAD,CAA3B,CAFX;AAGD,GARD,CAQE,OAAOe,KAAP,EAAc;AACdf,IAAAA,0BAA0B,CAACe,KAAD,CAA1B;AACD;AACF;AAED,OAAO,UAAUC,oBAAV,CAA+B;AAACV,EAAAA;AAAD,CAA/B,EAAyC;AAC9C,MAAI;AACF,UAAMC,SAAS,GAAGD,OAAlB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYL,SAAZ;AACA,UAAMZ,GAAG,CAACS,aAAa,CAACG,SAAD,CAAd,CAAT;AACA,QAAIU,MAAM,GAAG,MAAMpB,MAAM,CAACM,YAAD,CAAzB;AACAc,IAAAA,MAAM,GAAG;AAACA,MAAAA,MAAM,EAAEA;AAAT,KAAT;AACAN,IAAAA,OAAO,CAACC,GAAR,CAAYK,MAAZ;AACA,QAAIC,eAAe,GAAG,MAAMT,KAAK,CAAE,iCAAgCF,SAAU,EAA5C,EAA+C;AAC9EY,MAAAA,MAAM,EAAE,QADsE;AAE9EC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFqE;AAK9EC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,MAAf;AALwE,KAA/C,CAAjC;AAQAC,IAAAA,eAAe,GAAG,MAAMA,eAAe,CAACR,IAAhB,EAAxB;AACAQ,IAAAA,eAAe,CAACL,IAAhB,GACA,MAAMlB,GAAG,CAACI,2BAA2B,CAACmB,eAAe,CAACM,OAAjB,CAA5B,CADT,GAEA,MAAM7B,GAAG,CAACG,2BAA2B,CAACoB,eAAe,CAACH,KAAjB,CAA5B,CAFT;AAGD,GAnBD,CAmBE,OAAOA,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACAjB,IAAAA,2BAA2B,CAACiB,KAAD,CAA3B;AACAJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF;AAED,OAAO,UAAUU,0BAAV,GAAsC;AAC3C,QAAM7B,UAAU,CAACM,yBAAyB,CAACwB,2BAA3B,EAAyDrB,mBAAzD,CAAhB;AACD;AAED,OAAO,UAAUsB,2BAAV,GAAuC;AAC5C,QAAM/B,UAAU,CAACM,yBAAyB,CAAC0B,4BAA3B,EAAyDZ,oBAAzD,CAAhB;AACD;AAED,OAAO,UAAUa,mBAAV,GAAgC;AACrC,QAAMpC,GAAG,CAAC,CACRC,IAAI,CAAC+B,0BAAD,CADI,EAER/B,IAAI,CAACiC,2BAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport {deleteCurrentProjectFailure, deleteCurrentProjectSuccess, fetchCurrentProjectFailure, fetchCurrentProjectSuccess } from \"./current-project.actions\";\r\nimport { CurrentProjectActionTypes } from \"./current-project.types\";\r\nimport { selectUserId } from \"../user/user.selectors\"\r\nimport { deleteProject } from \"../all-projects/all-projects.actions\";\r\n\r\nexport function* fetchCurrentProject({payload}){\r\n  try {\r\n      const projectId = payload\r\n    let currentProject = yield fetch(`http://127.0.0.1:5000/project/${projectId}`)\r\n    currentProject = yield currentProject.json()\r\n    console.log(currentProject)\r\n    currentProject.done\r\n    ? yield put(fetchCurrentProjectSuccess(currentProject.project))\r\n    : yield put(fetchCurrentProjectFailure('CURRENT PROJECCT FETTCHING FAILED'))\r\n  } catch (error) {\r\n    fetchCurrentProjectFailure(error)\r\n  }\r\n}\r\n\r\nexport function* deleteCurrentProject({payload}){\r\n  try {\r\n    const projectId = payload\r\n    console.log(projectId)\r\n    yield put(deleteProject(projectId))\r\n    let userId = yield select(selectUserId)\r\n    userId = {userId: userId}\r\n    console.log(userId)\r\n    let projectDeletion = yield fetch(`http://127.0.0.1:5000/project/${projectId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(userId),\r\n\r\n    })\r\n    projectDeletion = yield projectDeletion.json()\r\n    projectDeletion.done?\r\n    yield put(deleteCurrentProjectSuccess(projectDeletion.message)):\r\n    yield put(deleteCurrentProjectFailure(projectDeletion.error))\r\n  } catch (error) {\r\n    console.log(error)\r\n    deleteCurrentProjectFailure(error)\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* onCurrentProjectFetchStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.FETCH_CURRENT_PROJECT_START , fetchCurrentProject)\r\n}\r\n\r\nexport function* onCurrentProjectDeleteStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.DELETE_CURRENT_PROJECT_START, deleteCurrentProject)\r\n}\r\n\r\nexport function* currentProjectSagas() {\r\n  yield all([\r\n    call(onCurrentProjectFetchStart),\r\n    call(onCurrentProjectDeleteStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}