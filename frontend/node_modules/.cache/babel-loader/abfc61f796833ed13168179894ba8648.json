{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { createTaskSucessful, createTaskFail, fetchTasksStart, fetchTasksFailure, fetchTasksSuccess } from \"./all-tasks.actions\";\nimport { TaskActionTypes } from \"./all-tasks.types\";\nexport function* createTask({\n  payload\n}) {\n  try {\n    let data = payload;\n    let userId = yield select(selectUserId);\n    data['userId'] = userId;\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/create-task/${data.projectId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createTaskSucessful(resp.message));\n    } else {\n      yield put(createTaskFail(resp.error));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchTasks({\n  payload\n}) {\n  try {\n    let tasks = yield fetch(`http://127.0.0.1:5000/project/${payload}/task`);\n    tasks = yield tasks.json();\n    tasks.done ? yield put(fetchTasksSuccess(tasks.tasks.tasks)) : yield put(fetchTasksFailure('Error.'));\n  } catch (error) {\n    fetchTasksFailure(error);\n  }\n}\nexport function* onTaskCreateStart() {\n  yield takeLatest(TaskActionTypes.CREATE_TASK_START, createTask);\n}\nexport function* onTaskFetchStart() {\n  yield takeLatest(TaskActionTypes.FETCH_TASKS_START, fetchTasks);\n}\nexport function* taskSagas() {\n  yield all([call(onTaskCreateStart), call(onTaskFetchStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/all-tasks/all-tasks.sagas.js"],"names":["all","call","put","takeLatest","select","selectUserId","createTaskSucessful","createTaskFail","fetchTasksStart","fetchTasksFailure","fetchTasksSuccess","TaskActionTypes","createTask","payload","data","userId","console","log","resp","fetch","projectId","method","headers","body","JSON","stringify","json","done","message","error","fetchTasks","tasks","onTaskCreateStart","CREATE_TASK_START","onTaskFetchStart","FETCH_TASKS_START","taskSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAkD,oBAAlD;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,mBAAT,EAA8BC,cAA9B,EAA8CC,eAA9C,EAA+DC,iBAA/D,EAAkFC,iBAAlF,QAA2G,qBAA3G;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,UAAUC,UAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AACF,QAAIC,IAAI,GAAGD,OAAX;AACA,QAAIE,MAAM,GAAG,MAAMX,MAAM,CAACC,YAAD,CAAzB;AACAS,IAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiBC,MAAjB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAII,IAAI,GAAG,MAAMC,KAAK,CAAE,qCAAoCL,IAAI,CAACM,SAAU,EAArD,EAAwD;AAC5EC,MAAAA,MAAM,EAAE,MADoE;AAE5EC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFmE;AAK5EC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,IAAf;AALsE,KAAxD,CAAtB;AAQAI,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACQ,IAAL,EAAb;;AACA,QAAGR,IAAI,CAACS,IAAR,EAAa;AACT,YAAMzB,GAAG,CAACI,mBAAmB,CAACY,IAAI,CAACU,OAAN,CAApB,CAAT;AACH,KAFD,MAEK;AACH,YAAM1B,GAAG,CAACK,cAAc,CAACW,IAAI,CAACW,KAAN,CAAf,CAAT;AACD;AACF,GAnBD,CAmBE,OAAOA,KAAP,EAAc;AACdb,IAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACD;AACF;AAED,OAAO,UAAUC,UAAV,CAAqB;AAACjB,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AACF,QAAIkB,KAAK,GAAG,MAAMZ,KAAK,CAAE,iCAAgCN,OAAQ,OAA1C,CAAvB;AACAkB,IAAAA,KAAK,GAAG,MAAMA,KAAK,CAACL,IAAN,EAAd;AAEAK,IAAAA,KAAK,CAACJ,IAAN,GACE,MAAMzB,GAAG,CAACQ,iBAAiB,CAACqB,KAAK,CAACA,KAAN,CAAYA,KAAb,CAAlB,CADX,GAEE,MAAM7B,GAAG,CAACO,iBAAiB,CAAC,QAAD,CAAlB,CAFX;AAGD,GAPD,CAOE,OAAOoB,KAAP,EAAc;AACdpB,IAAAA,iBAAiB,CAACoB,KAAD,CAAjB;AACD;AACF;AAGD,OAAO,UAAUG,iBAAV,GAA6B;AAClC,QAAM7B,UAAU,CAACQ,eAAe,CAACsB,iBAAjB,EAAoCrB,UAApC,CAAhB;AACD;AAED,OAAO,UAAUsB,gBAAV,GAA4B;AACjC,QAAM/B,UAAU,CAACQ,eAAe,CAACwB,iBAAjB,EAAoCL,UAApC,CAAhB;AACD;AAED,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAMpC,GAAG,CAAC,CACRC,IAAI,CAAC+B,iBAAD,CADI,EAER/B,IAAI,CAACiC,gBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { selectUserId } from \"../user/user.selectors\";\r\nimport { createTaskSucessful, createTaskFail, fetchTasksStart, fetchTasksFailure, fetchTasksSuccess } from \"./all-tasks.actions\";\r\nimport { TaskActionTypes } from \"./all-tasks.types\";\r\n\r\nexport function* createTask({payload}){\r\n  try {\r\n    let data = payload;\r\n    let userId = yield select(selectUserId);\r\n    data['userId'] = userId;\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-task/${data.projectId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n        yield put(createTaskSucessful(resp.message));\r\n    }else{\r\n      yield put(createTaskFail(resp.error))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* fetchTasks({payload}){\r\n  try {\r\n    let tasks = yield fetch(`http://127.0.0.1:5000/project/${payload}/task`)\r\n    tasks = yield tasks.json()\r\n\r\n    tasks.done\r\n    ? yield put(fetchTasksSuccess(tasks.tasks.tasks))\r\n    : yield put(fetchTasksFailure('Error.'))\r\n  } catch (error) {\r\n    fetchTasksFailure(error)\r\n  }\r\n}\r\n\r\n\r\nexport function* onTaskCreateStart(){\r\n  yield takeLatest(TaskActionTypes.CREATE_TASK_START, createTask)\r\n}\r\n\r\nexport function* onTaskFetchStart(){\r\n  yield takeLatest(TaskActionTypes.FETCH_TASKS_START, fetchTasks)\r\n}\r\n\r\nexport function* taskSagas() {\r\n  yield all([\r\n    call(onTaskCreateStart),\r\n    call(onTaskFetchStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}