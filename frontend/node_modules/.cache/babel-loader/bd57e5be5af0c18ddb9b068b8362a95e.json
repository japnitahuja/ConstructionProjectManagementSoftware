{"ast":null,"code":"import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\nimport { fetchCurrentTaskStart } from \"../current-task/current-task.actions\";\nimport { completeStepQuestionFailure, completeStepQuestionSuccess, createStepFail, createStepSucessful, fetchStepsFailure, fetchStepsStart, fetchStepsSuccess } from \"./all-steps.actions\";\nimport { StepActionTypes } from \"./all-steps.types\";\nexport function* createStep({\n  payload\n}) {\n  try {\n    let data = payload;\n    const taskId = data.taskId;\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/create-step/${taskId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createStepSucessful(resp.message));\n    }\n\n    yield delay(500);\n    yield put(fetchCurrentTaskStart(taskId));\n  } catch (error) {\n    console.log(error);\n    yield put(createStepFail(error));\n  }\n}\nexport function* fetchSteps({\n  payload\n}) {\n  const taskId = payload;\n\n  try {\n    let steps = yield fetch(`http://127.0.0.1:5000/task/${taskId}/step`);\n    steps = yield steps.json();\n    steps.done ? yield put(fetchStepsSuccess(steps.steps.steps)) : yield put(fetchStepsFailure('Steps not fetched!'));\n  } catch (error) {\n    yield put(fetchStepsFailure(error));\n  }\n}\nexport function* onStepCreateStart() {\n  yield takeLatest(StepActionTypes.CREATE_STEP_START, createStep);\n}\nexport function* onStepFetchStart() {\n  yield takeLatest(StepActionTypes.FETCH_STEPS_START, fetchSteps);\n}\nexport function* stepSagas() {\n  yield all([call(onStepCreateStart), call(onStepFetchStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/all-steps/all-steps.sagas.js"],"names":["all","call","put","takeLatest","select","delay","fetchCurrentTaskStart","completeStepQuestionFailure","completeStepQuestionSuccess","createStepFail","createStepSucessful","fetchStepsFailure","fetchStepsStart","fetchStepsSuccess","StepActionTypes","createStep","payload","data","taskId","console","log","resp","fetch","method","headers","body","JSON","stringify","json","done","message","error","fetchSteps","steps","onStepCreateStart","CREATE_STEP_START","onStepFetchStart","FETCH_STEPS_START","stepSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,KAA7C,QAAyD,oBAAzD;AACA,SAASC,qBAAT,QAAsC,sCAAtC;AACA,SAASC,2BAAT,EAAsCC,2BAAtC,EAAmEC,cAAnE,EAAmFC,mBAAnF,EAAwGC,iBAAxG,EAA2HC,eAA3H,EAA4IC,iBAA5I,QAAqK,qBAArK;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,UAAUC,UAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AACF,QAAIC,IAAI,GAAGD,OAAX;AACA,UAAME,MAAM,GAAGD,IAAI,CAACC,MAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAII,IAAI,GAAG,MAAMC,KAAK,CAAE,qCAAoCJ,MAAO,EAA7C,EAAgD;AACpEK,MAAAA,MAAM,EAAE,MAD4D;AAEpEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF2D;AAKpEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AAL8D,KAAhD,CAAtB;AAQAI,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACO,IAAL,EAAb;;AACA,QAAGP,IAAI,CAACQ,IAAR,EAAa;AACX,YAAM3B,GAAG,CAACQ,mBAAmB,CAACW,IAAI,CAACS,OAAN,CAApB,CAAT;AACD;;AACD,UAAMzB,KAAK,CAAC,GAAD,CAAX;AACA,UAAMH,GAAG,CAACI,qBAAqB,CAACY,MAAD,CAAtB,CAAT;AAED,GAnBD,CAmBE,OAAOa,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACA,UAAM7B,GAAG,CAACO,cAAc,CAACsB,KAAD,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUC,UAAV,CAAqB;AAAChB,EAAAA;AAAD,CAArB,EAA+B;AACpC,QAAME,MAAM,GAAGF,OAAf;;AACA,MAAI;AACF,QAAIiB,KAAK,GAAG,MAAMX,KAAK,CAAE,8BAA6BJ,MAAO,OAAtC,CAAvB;AACAe,IAAAA,KAAK,GAAG,MAAMA,KAAK,CAACL,IAAN,EAAd;AACAK,IAAAA,KAAK,CAACJ,IAAN,GACE,MAAM3B,GAAG,CAACW,iBAAiB,CAACoB,KAAK,CAACA,KAAN,CAAYA,KAAb,CAAlB,CADX,GAEE,MAAM/B,GAAG,CAACS,iBAAiB,CAAC,oBAAD,CAAlB,CAFX;AAGD,GAND,CAME,OAAOoB,KAAP,EAAc;AACd,UAAM7B,GAAG,CAACS,iBAAiB,CAACoB,KAAD,CAAlB,CAAT;AACD;AACF;AAGD,OAAO,UAAUG,iBAAV,GAA6B;AAClC,QAAM/B,UAAU,CAACW,eAAe,CAACqB,iBAAjB,EAAoCpB,UAApC,CAAhB;AACD;AAED,OAAO,UAAUqB,gBAAV,GAA4B;AACjC,QAAMjC,UAAU,CAACW,eAAe,CAACuB,iBAAjB,EAAoCL,UAApC,CAAhB;AACD;AAED,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAMtC,GAAG,CAAC,CACRC,IAAI,CAACiC,iBAAD,CADI,EAERjC,IAAI,CAACmC,gBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select, delay} from \"redux-saga/effects\";\r\nimport { fetchCurrentTaskStart } from \"../current-task/current-task.actions\";\r\nimport { completeStepQuestionFailure, completeStepQuestionSuccess, createStepFail, createStepSucessful, fetchStepsFailure, fetchStepsStart, fetchStepsSuccess } from \"./all-steps.actions\";\r\nimport { StepActionTypes } from \"./all-steps.types\";\r\n\r\nexport function* createStep({payload}){\r\n  try {\r\n    let data = payload;\r\n    const taskId = data.taskId\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-step/${taskId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      yield put(createStepSucessful(resp.message));\r\n    }\r\n    yield delay(500)\r\n    yield put(fetchCurrentTaskStart(taskId))\r\n    \r\n  } catch (error) {\r\n    console.log(error)\r\n    yield put(createStepFail(error))\r\n  }\r\n}\r\n\r\nexport function* fetchSteps({payload}){\r\n  const taskId = payload\r\n  try {\r\n    let steps = yield fetch(`http://127.0.0.1:5000/task/${taskId}/step`)\r\n    steps = yield steps.json()\r\n    steps.done\r\n    ? yield put(fetchStepsSuccess(steps.steps.steps))\r\n    : yield put(fetchStepsFailure('Steps not fetched!'))\r\n  } catch (error) {\r\n    yield put(fetchStepsFailure(error))\r\n  }\r\n}\r\n\r\n\r\nexport function* onStepCreateStart(){\r\n  yield takeLatest(StepActionTypes.CREATE_STEP_START, createStep)\r\n}\r\n\r\nexport function* onStepFetchStart(){\r\n  yield takeLatest(StepActionTypes.FETCH_STEPS_START, fetchSteps)\r\n}\r\n\r\nexport function* stepSagas() {\r\n  yield all([\r\n    call(onStepCreateStart),\r\n    call(onStepFetchStart),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}