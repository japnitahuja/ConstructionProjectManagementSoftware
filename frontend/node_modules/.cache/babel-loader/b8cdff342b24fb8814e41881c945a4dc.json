{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\task-item\\\\task-item.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, DropDownContent, DropDownOption, SmallCircle, TaskDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, ProgressBar, Progress, ProgressDiv } from \"./task-item.styles\";\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\nimport { CheckBox } from \"../checkbox/checkbox.component\";\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\nimport removeImage from \"../../assets/remove.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClickOutside = event => {\n      if (this.dropdownContainer.current && !this.dropdownContainer.current.contains(event.target)) {\n        this.setState({\n          removeDropdownSwitch: false\n        });\n      }\n    };\n\n    this.toggleRemoveDropdown = () => {\n      this.setState(prevState => ({\n        removeDropdownSwitch: !prevState.removeDropdownSwitch\n      }));\n    };\n\n    this.dropdownContainer = /*#__PURE__*/React.createRef();\n    this.state = {\n      taskDetails: this.props.taskDetails,\n      removeDropdownSwitch: false\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  deleteTask(e) {\n    console.log(\"delete button\", this.state.taskDetails._id);\n    this.props.deleteTask(this.state.taskDetails._id);\n    window.location.reload();\n  }\n\n  render() {\n    const {\n      _id,\n      index,\n      taskName,\n      completionPercentage,\n      completedSteps,\n      totalSteps,\n      isTaskDone\n    } = this.state.taskDetails;\n    console.log(this.state.taskDetails);\n    return /*#__PURE__*/_jsxDEV(TaskDiv, {\n      children: [/*#__PURE__*/_jsxDEV(LeftDiv, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/task/${_id}`,\n          style: {\n            textDecoration: 'none'\n          },\n          children: [/*#__PURE__*/_jsxDEV(SmallText, {\n            children: [\"TASK - \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(BigText, {\n            children: taskName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ProgressDiv, {\n            children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n              children: /*#__PURE__*/_jsxDEV(Progress, {\n                style: {\n                  width: `${completionPercentage}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 64,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n              style: {\n                color: \"#666666\"\n              },\n              children: [completedSteps, \"/\", totalSteps, \"  \\xA0 (\", isNaN(completedSteps / totalSteps * 100) ? 0 : completedSteps / totalSteps * 100, \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightDiv, {\n        children: [isTaskDone ? /*#__PURE__*/_jsxDEV(CheckBox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(Circle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 50\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginLeft: \"1.5em\"\n          },\n          onClick: this.toggleRemoveDropdown,\n          children: [/*#__PURE__*/_jsxDEV(SmallCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SmallCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(SmallCircle, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(DropDownContent, {\n            ref: this.dropdownContainer,\n            display: this.state.removeDropdownSwitch ? \"block\" : \"none\",\n            onClick: this.deleteTask,\n            children: /*#__PURE__*/_jsxDEV(DropDownOption, {\n              children: [/*#__PURE__*/_jsxDEV(Image, {\n                src: removeImage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 33\n              }, this), \"Remove\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteTask: taskId => dispatch(deleteCurrentTaskStart(taskId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/task-item/task-item.component.jsx"],"names":["React","Component","Link","Image","DropDownContent","DropDownOption","SmallCircle","TaskDiv","LeftDiv","RightDiv","BigText","SmallText","Circle","ProgressBar","Progress","ProgressDiv","connect","createStructuredSelector","deleteCurrentTaskStart","CheckBox","DeleteButton","removeImage","TaskItem","constructor","props","handleClickOutside","event","dropdownContainer","current","contains","target","setState","removeDropdownSwitch","toggleRemoveDropdown","prevState","createRef","state","taskDetails","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","deleteTask","e","console","log","_id","window","location","reload","render","index","taskName","completionPercentage","completedSteps","totalSteps","isTaskDone","textDecoration","width","color","isNaN","marginLeft","mapStateToProps","mapDispatchToProps","dispatch","taskId"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,SAAQC,IAAR,QAAmB,kBAAnB;AACA,SAASC,KAAT,EAAgBC,eAAhB,EAAiCC,cAAjC,EAAkDC,WAAlD,EAA+DC,OAA/D,EAAwEC,OAAxE,EAAiFC,QAAjF,EAA2FC,OAA3F,EAAoGC,SAApG,EAA+GC,MAA/G,EAAuHC,WAAvH,EAAoIC,QAApI,EAA8IC,WAA9I,QAAgK,oBAAhK;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,sBAAT,QAAuC,+CAAvC;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,SAASC,YAAT,QAA6B,uCAA7B;AACA,OAAOC,WAAP,MAAwB,yBAAxB;;;AAGA,MAAMC,QAAN,SAAuBrB,SAAvB,CAAgC;AAC5BsB,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAiBlBC,kBAjBkB,GAiBIC,KAAD,IAAW;AAC5B,UACE,KAAKC,iBAAL,CAAuBC,OAAvB,IACA,CAAC,KAAKD,iBAAL,CAAuBC,OAAvB,CAA+BC,QAA/B,CAAwCH,KAAK,CAACI,MAA9C,CAFH,EAGE;AACA,aAAKC,QAAL,CAAc;AACZC,UAAAA,oBAAoB,EAAE;AADV,SAAd;AAGD;AACF,KA1Be;;AAAA,SA4BlBC,oBA5BkB,GA4BK,MAAM;AACzB,WAAKF,QAAL,CAAeG,SAAD,KAAc;AACxBF,QAAAA,oBAAoB,EAAE,CAACE,SAAS,CAACF;AADT,OAAd,CAAd;AAGH,KAhCiB;;AAEd,SAAKL,iBAAL,gBAAyB3B,KAAK,CAACmC,SAAN,EAAzB;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,KAAKb,KAAL,CAAWa,WADf;AAETL,MAAAA,oBAAoB,EAAE;AAFb,KAAb;AAIH;;AAEDM,EAAAA,iBAAiB,GAAG;AAChBC,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuC,KAAKf,kBAA5C;AACH;;AAEDgB,EAAAA,oBAAoB,GAAG;AACrBF,IAAAA,QAAQ,CAACG,mBAAT,CAA6B,WAA7B,EAA0C,KAAKjB,kBAA/C;AACD;;AAmBDkB,EAAAA,UAAU,CAACC,CAAD,EAAG;AACTC,IAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B,KAAKV,KAAL,CAAWC,WAAX,CAAuBU,GAApD;AACA,SAAKvB,KAAL,CAAWmB,UAAX,CAAsB,KAAKP,KAAL,CAAWC,WAAX,CAAuBU,GAA7C;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,MAAhB;AACH;;AAEDC,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA,GAAD;AAAMK,MAAAA,KAAN;AAAaC,MAAAA,QAAb;AAAuBC,MAAAA,oBAAvB;AAA6CC,MAAAA,cAA7C;AAA6DC,MAAAA,UAA7D;AAAyEC,MAAAA;AAAzE,QAAuF,KAAKrB,KAAL,CAAWC,WAAxG;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,KAAL,CAAWC,WAAvB;AACA,wBACI,QAAC,OAAD;AAAA,8BACI,QAAC,OAAD;AAAA,+BACA,QAAC,IAAD;AAAM,UAAA,EAAE,EAAG,SAAQU,GAAI,EAAvB;AAA0B,UAAA,KAAK,EAAE;AAACW,YAAAA,cAAc,EAAC;AAAhB,WAAjC;AAAA,kCACI,QAAC,SAAD;AAAA,kCAAmBN,KAAK,GAAG,CAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,OAAD;AAAA,sBAAUC;AAAV;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,WAAD;AAAA,oCACI,QAAC,WAAD;AAAA,qCACI,QAAC,QAAD;AAAU,gBAAA,KAAK,EAAE;AAACM,kBAAAA,KAAK,EAAE,GAAEL,oBAAqB;AAA/B;AAAjB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,oBADJ,eAII,QAAC,SAAD;AAAW,cAAA,KAAK,EAAE;AAACM,gBAAAA,KAAK,EAAC;AAAP,eAAlB;AAAA,yBACCL,cADD,OACkBC,UADlB,cAEEK,KAAK,CAACN,cAAc,GAACC,UAAf,GAA0B,GAA3B,CAAL,GAAqC,CAArC,GAAuCD,cAAc,GAACC,UAAf,GAA0B,GAFnE;AAAA;AAAA;AAAA;AAAA;AAAA,oBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cADJ,eAiBI,QAAC,QAAD;AAAA,mBAEQC,UAAU,gBAAE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,gBAAF,gBAAe,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,gBAFjC,eAKI;AAAK,UAAA,KAAK,EAAE;AAACK,YAAAA,UAAU,EAAC;AAAZ,WAAZ;AAAkC,UAAA,OAAO,EAAE,KAAK7B,oBAAhD;AAAA,kCACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAGI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,kBAHJ,eAII,QAAC,eAAD;AACI,YAAA,GAAG,EAAE,KAAKN,iBADd;AAEI,YAAA,OAAO,EAAE,KAAKS,KAAL,CAAWJ,oBAAX,GAAgC,OAAhC,GAAwC,MAFrD;AAGI,YAAA,OAAO,EAAE,KAAKW,UAHlB;AAAA,mCAII,QAAC,cAAD;AAAA,sCACI,QAAC,KAAD;AAAO,gBAAA,GAAG,EAAEtB;AAAZ;AAAA;AAAA;AAAA;AAAA,sBADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAJJ;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBALJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAjBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAyCF;;AArF0B;;AAwFhC,MAAM0C,eAAe,GAAG9C,wBAAwB,CAAC,EAAD,CAAhD;;AAIE,MAAM+C,kBAAkB,GAAIC,QAAD,KAAe;AACxCtB,EAAAA,UAAU,EAAIuB,MAAD,IAAYD,QAAQ,CAAC/C,sBAAsB,CAACgD,MAAD,CAAvB;AADO,CAAf,CAA3B;;AAIA,eAAelD,OAAO,CACpB+C,eADoB,EAEpBC,kBAFoB,CAAP,CAGb1C,QAHa,CAAf","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { Image, DropDownContent, DropDownOption , SmallCircle, TaskDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, ProgressBar, Progress, ProgressDiv} from \"./task-item.styles\";\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { deleteCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\r\nimport { CheckBox } from \"../checkbox/checkbox.component\";\r\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\r\nimport removeImage from \"../../assets/remove.png\"\r\n\r\n\r\nclass TaskItem extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.dropdownContainer = React.createRef();\r\n        this.state = {\r\n            taskDetails: this.props.taskDetails, \r\n            removeDropdownSwitch: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    handleClickOutside = (event) => {\r\n        if (\r\n          this.dropdownContainer.current &&\r\n          !this.dropdownContainer.current.contains(event.target)\r\n        ) {\r\n          this.setState({\r\n            removeDropdownSwitch: false,\r\n          });\r\n        }\r\n      };\r\n\r\n    toggleRemoveDropdown = () => {\r\n        this.setState((prevState)=>({\r\n            removeDropdownSwitch: !prevState.removeDropdownSwitch\r\n        }))\r\n    }\r\n\r\n    deleteTask(e){\r\n        console.log(\"delete button\", this.state.taskDetails._id);\r\n        this.props.deleteTask(this.state.taskDetails._id);\r\n        window.location.reload()\r\n    }\r\n    \r\n    render (){\r\n        const {_id, index, taskName, completionPercentage, completedSteps, totalSteps, isTaskDone} = this.state.taskDetails;\r\n        console.log(this.state.taskDetails)\r\n        return (\r\n            <TaskDiv>\r\n                <LeftDiv>\r\n                <Link to={`/task/${_id}`} style={{textDecoration:'none'}}> \r\n                    <SmallText>TASK - {index + 1}</SmallText>\r\n                    <BigText>{taskName}</BigText>\r\n                    <ProgressDiv>\r\n                        <ProgressBar>\r\n                            <Progress style={{width:`${completionPercentage}%`}}/>\r\n                        </ProgressBar>\r\n                        <SmallText style={{color:\"#666666\"}}> \r\n                        {completedSteps}/{totalSteps}  &nbsp;\r\n                        ({isNaN(completedSteps/totalSteps*100)?0:completedSteps/totalSteps*100}%)\r\n                        </SmallText>\r\n                    </ProgressDiv>\r\n                    </Link>\r\n                </LeftDiv>\r\n                \r\n                <RightDiv>\r\n                    {\r\n                        isTaskDone? <CheckBox/>: <Circle/>\r\n                    }\r\n                    {/* <DeleteButton onClick={(e)=>this.deleteTask(e)}>Delete</DeleteButton> */}\r\n                    <div style={{marginLeft:\"1.5em\"}} onClick={this.toggleRemoveDropdown}>\r\n                        <SmallCircle></SmallCircle>\r\n                        <SmallCircle></SmallCircle>\r\n                        <SmallCircle></SmallCircle>\r\n                        <DropDownContent \r\n                            ref={this.dropdownContainer} \r\n                            display={this.state.removeDropdownSwitch?\"block\":\"none\"}\r\n                            onClick={this.deleteTask}>\r\n                            <DropDownOption>\r\n                                <Image src={removeImage}/>\r\n                                Remove\r\n                            </DropDownOption>\r\n                        </DropDownContent>\r\n                    </div>\r\n                    \r\n                </RightDiv>\r\n            </TaskDiv>\r\n        \r\n    )}\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    deleteTask : (taskId) => dispatch(deleteCurrentTaskStart(taskId))\r\n  });\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(TaskItem);\r\n"]},"metadata":{},"sourceType":"module"}