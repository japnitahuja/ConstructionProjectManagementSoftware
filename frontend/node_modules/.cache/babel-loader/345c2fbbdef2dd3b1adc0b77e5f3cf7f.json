{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\all-projects\\\\all-projects.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport ProjectList from \"../../components/projects-list/projects-list.component\";\nimport { createProjectStart, fetchProjectsStart } from \"../../redux/all-projects/all-projects.actions\";\nimport { selectUserProjects } from \"../../redux/all-projects/all-projects.selectors\";\nimport { signOut } from \"../../redux/user/user.actions\";\nimport { selectCurrentUserFirstName } from \"../../redux/user/user.selectors\";\nimport CreateProjectForm from \"../../components/create-project-form/create-project-form.component\";\nimport ProjectNav from \"../../components/project-nav/project-nav.component\";\nimport ProjectListContainer from \"../../components/projects-list/projects-list.container\";\nimport { GenericButton } from \"../../components/generic-button/generic-button.styles\";\nimport AddUserForm from \"../../components/adduser-form/adduser-form.component\";\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllProjects extends Component {\n  constructor() {\n    super();\n\n    this.search = searchedText => {\n      let temp = this.props.projects;\n      console.log(\"123\".match(/p/gi));\n\n      if (searchedText) {\n        temp = temp.filter(project => {\n          return project.projectName.includes(searchedText);\n        });\n      }\n\n      console.log(searchedText, temp);\n      this.setState({\n        projectsList: temp\n      });\n    };\n\n    this.state = {\n      projectsList: '' //will change based on search\n\n    };\n  }\n\n  componentDidMount() {\n    const {\n      fetchProjects\n    } = this.props;\n    fetchProjects();\n    this.setState({\n      projectsList: this.props.projects\n    });\n  }\n\n  render() {\n    const {\n      projectsList\n    } = this.state;\n    console.log(\"projects\", projectsList);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ProjectNav, {\n        title: \"Projects\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search Projects...\",\n        search: this.search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ProjectListContainer, {\n        projects: projectsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  name: selectCurrentUserFirstName,\n  projects: selectUserProjects\n});\n\nconst mapDispatchToProps = dispatch => ({\n  signOut: () => dispatch(signOut()),\n  createProject: projectDetails => dispatch(createProjectStart(projectDetails)),\n  fetchProjects: () => dispatch(fetchProjectsStart())\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllProjects);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/all-projects/all-projects.js"],"names":["React","Component","connect","createStructuredSelector","ProjectList","createProjectStart","fetchProjectsStart","selectUserProjects","signOut","selectCurrentUserFirstName","CreateProjectForm","ProjectNav","ProjectListContainer","GenericButton","AddUserForm","SearchBar","AllProjects","constructor","search","searchedText","temp","props","projects","console","log","match","filter","project","projectName","includes","setState","projectsList","state","componentDidMount","fetchProjects","render","mapStateToProps","name","mapDispatchToProps","dispatch","createProject","projectDetails"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,OAAOC,WAAP,MAAwB,wDAAxB;AACA,SAASC,kBAAT,EAA6BC,kBAA7B,QAAuD,+CAAvD;AACA,SAASC,kBAAT,QAAmC,iDAAnC;AACA,SAASC,OAAT,QAAwB,+BAAxB;AACA,SAASC,0BAAT,QAA2C,iCAA3C;AACA,OAAOC,iBAAP,MAA8B,oEAA9B;AACA,OAAQC,UAAR,MAAyB,oDAAzB;AACA,OAAOC,oBAAP,MAAiC,wDAAjC;AACA,SAASC,aAAT,QAA8B,uDAA9B;AACA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;;;AAGC,MAAMC,WAAN,SAA0Bf,SAA1B,CAAoC;AAEjCgB,EAAAA,WAAW,GAAE;AACX;;AADW,SAaZC,MAbY,GAaFC,YAAD,IAAkB;AACxB,UAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,QAAtB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAMC,KAAN,CAAY,KAAZ,CAAZ;;AACA,UAAGN,YAAH,EAAgB;AACdC,QAAAA,IAAI,GAAGA,IAAI,CAACM,MAAL,CAAaC,OAAD,IAAW;AAC5B,iBAAOA,OAAO,CAACC,WAAR,CAAoBC,QAApB,CAA6BV,YAA7B,CAAP;AACD,SAFM,CAAP;AAGD;;AAEDI,MAAAA,OAAO,CAACC,GAAR,CAAYL,YAAZ,EAA0BC,IAA1B;AACA,WAAKU,QAAL,CAAc;AAACC,QAAAA,YAAY,EAAEX;AAAf,OAAd;AACF,KAxBW;;AAEX,SAAKY,KAAL,GAAW;AACTD,MAAAA,YAAY,EAAE,EADL,CACQ;;AADR,KAAX;AAGD;;AAEAE,EAAAA,iBAAiB,GAAE;AAChB,UAAM;AAACC,MAAAA;AAAD,QAAkB,KAAKb,KAA7B;AACAa,IAAAA,aAAa;AACb,SAAKJ,QAAL,CAAc;AAACC,MAAAA,YAAY,EAAE,KAAKV,KAAL,CAAWC;AAA1B,KAAd;AACF;;AAgBFa,EAAAA,MAAM,GAAG;AACL,UAAM;AAACJ,MAAAA;AAAD,QAAiB,KAAKC,KAA5B;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBO,YAAvB;AAEA,wBACI;AAAA,8BACI,QAAC,UAAD;AAAY,QAAA,KAAK,EAAG;AAApB;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,SAAD;AAAW,QAAA,WAAW,EAAC,oBAAvB;AAA4C,QAAA,MAAM,EAAE,KAAKb;AAAzD;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,oBAAD;AAAsB,QAAA,QAAQ,EAAEa;AAAhC;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAQH;;AAzCgC;;AA4CrC,MAAMK,eAAe,GAAGjC,wBAAwB,CAAC;AAC7CkC,EAAAA,IAAI,EAAE5B,0BADuC;AAE7Ca,EAAAA,QAAQ,EAAEf;AAFmC,CAAD,CAAhD;;AAKE,MAAM+B,kBAAkB,GAAIC,QAAD,KAAe;AACxC/B,EAAAA,OAAO,EAAE,MAAM+B,QAAQ,CAAC/B,OAAO,EAAR,CADiB;AAExCgC,EAAAA,aAAa,EAAGC,cAAD,IAAoBF,QAAQ,CAAClC,kBAAkB,CAACoC,cAAD,CAAnB,CAFH;AAGxCP,EAAAA,aAAa,EAAG,MAAMK,QAAQ,CAACjC,kBAAkB,EAAnB;AAHU,CAAf,CAA3B;;AAMA,eAAeJ,OAAO,CAACkC,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CtB,WAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport ProjectList from \"../../components/projects-list/projects-list.component\";\r\nimport { createProjectStart, fetchProjectsStart } from \"../../redux/all-projects/all-projects.actions\";\r\nimport { selectUserProjects } from \"../../redux/all-projects/all-projects.selectors\";\r\nimport { signOut } from \"../../redux/user/user.actions\";\r\nimport { selectCurrentUserFirstName } from \"../../redux/user/user.selectors\";\r\nimport CreateProjectForm from \"../../components/create-project-form/create-project-form.component\"\r\nimport  ProjectNav  from \"../../components/project-nav/project-nav.component\";\r\nimport ProjectListContainer from \"../../components/projects-list/projects-list.container\";\r\nimport { GenericButton } from \"../../components/generic-button/generic-button.styles\";\r\nimport AddUserForm from \"../../components/adduser-form/adduser-form.component\";\r\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\r\n\r\n\r\n class AllProjects extends Component {\r\n\r\n    constructor(){\r\n      super()\r\n      this.state={\r\n        projectsList: '' //will change based on search\r\n      }\r\n    }\r\n\r\n     componentDidMount(){\r\n        const {fetchProjects} = this.props;\r\n        fetchProjects()\r\n        this.setState({projectsList: this.props.projects})\r\n     }\r\n\r\n     search = (searchedText) => {\r\n        let temp = this.props.projects\r\n        console.log(\"123\".match(/p/gi))\r\n        if(searchedText){\r\n          temp = temp.filter((project)=>{\r\n            return project.projectName.includes(searchedText);\r\n          })\r\n        }\r\n        \r\n        console.log(searchedText, temp)\r\n        this.setState({projectsList: temp})\r\n     }\r\n\r\n\r\n    render() {\r\n        const {projectsList} = this.state\r\n        console.log(\"projects\",projectsList)\r\n\r\n        return (\r\n            <div>\r\n                <ProjectNav title = \"Projects\" />\r\n                <SearchBar placeholder='Search Projects...' search={this.search}/>\r\n                <ProjectListContainer projects={projectsList}/>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    name: selectCurrentUserFirstName,\r\n    projects: selectUserProjects\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    signOut: () => dispatch(signOut()),\r\n    createProject: (projectDetails) => dispatch(createProjectStart(projectDetails)),\r\n    fetchProjects : () => dispatch(fetchProjectsStart())\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(AllProjects);\r\n\r\n"]},"metadata":{},"sourceType":"module"}