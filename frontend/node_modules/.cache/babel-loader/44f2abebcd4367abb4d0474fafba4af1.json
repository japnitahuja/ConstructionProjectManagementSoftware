{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\desktop\\\\github\\\\myles-website\\\\frontend\\\\src\\\\components\\\\steps-list\\\\steps-list.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { completeStepQuestionStart, deleteCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\nimport { selectStepQuestionAnsweredConfirmationMessage } from \"../../redux/all-steps/all-steps.selector\";\nimport ConformationMesage from \"../conformation-message/comformation-message.component\";\nimport { BigText, Circle, SmallText } from \"../task-item/task-item.styles\";\nimport StepItem from \"../step-item/step-item.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StepList extends React.Component {\n  render() {\n    let steps = this.props.steps;\n    console.log(steps);\n\n    if (!steps) {\n      steps = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: steps.map(({\n        stepName,\n        questionStatement,\n        _id,\n        isStepDone,\n        isQuestionAnswered\n      }, index) => {\n        console.log(_id);\n        const stepDetails = {\n          stepName,\n          questionStatement,\n          _id,\n          isStepDone,\n          isQuestionAnswered,\n          index\n        };\n        return /*#__PURE__*/_jsxDEV(StepItem, {\n          stepDetails: stepDetails\n        }, _id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = dispatch => ({\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  deleteStep: stepId => dispatch(deleteCurrentStepStart(stepId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepList);","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/components/steps-list/steps-list.component.jsx"],"names":["React","connect","Link","createStructuredSelector","completeStepQuestionStart","deleteCurrentStepStart","selectStepQuestionAnsweredConfirmationMessage","ConformationMesage","BigText","Circle","SmallText","StepItem","StepList","Component","render","steps","props","console","log","map","stepName","questionStatement","_id","isStepDone","isQuestionAnswered","index","stepDetails","mapStateToProps","mapDispatchToProps","dispatch","completeStepQuestion","stepId","deleteStep"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,yBAAT,EAAoCC,sBAApC,QAAkE,+CAAlE;AACA,SAASC,6CAAT,QAA8D,0CAA9D;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,SAA1B,QAA2C,+BAA3C;AACA,OAAOC,QAAP,MAAqB,kCAArB;;;AAEA,MAAMC,QAAN,SAAuBZ,KAAK,CAACa,SAA7B,CAAuC;AACrCC,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,QAAI,CAACA,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,EAAR;AACD;;AACD,wBACE;AAAA,gBACGA,KAAK,CAACI,GAAN,CACC,CAAC;AAACC,QAAAA,QAAD;AAAUC,QAAAA,iBAAV;AAA4BC,QAAAA,GAA5B;AAAgCC,QAAAA,UAAhC;AAA2CC,QAAAA;AAA3C,OAAD,EAAkEC,KAAlE,KAA4E;AAC1ER,QAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACA,cAAMI,WAAW,GAAG;AAACN,UAAAA,QAAD;AAAUC,UAAAA,iBAAV;AAA4BC,UAAAA,GAA5B;AAAgCC,UAAAA,UAAhC;AAA2CC,UAAAA,kBAA3C;AAA+DC,UAAAA;AAA/D,SAApB;AACA,4BACE,QAAC,QAAD;AAAoB,UAAA,WAAW,EAAIC;AAAnC,WAAeJ,GAAf;AAAA;AAAA;AAAA;AAAA,gBADF;AAGD,OAPF;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAaD;;AApBoC;;AAuBvC,MAAMK,eAAe,GAAGxB,wBAAwB,CAAC,EAAD,CAAhD;;AAEA,MAAMyB,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,oBAAoB,EAAGC,MAAD,IAAYF,QAAQ,CAACzB,yBAAyB,CAAC2B,MAAD,CAA1B,CADF;AAExCC,EAAAA,UAAU,EAAGD,MAAD,IAAYF,QAAQ,CAACxB,sBAAsB,CAAC0B,MAAD,CAAvB;AAFQ,CAAf,CAA3B;;AAKA,eAAe9B,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ChB,QAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { completeStepQuestionStart, deleteCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\r\nimport { selectStepQuestionAnsweredConfirmationMessage } from \"../../redux/all-steps/all-steps.selector\";\r\nimport ConformationMesage from \"../conformation-message/comformation-message.component\";\r\nimport { BigText, Circle, SmallText } from \"../task-item/task-item.styles\";\r\nimport StepItem from \"../step-item/step-item.component\"\r\n\r\nclass StepList extends React.Component {\r\n  render() {\r\n    let steps = this.props.steps;\r\n    console.log(steps);\r\n    if (!steps) {\r\n      steps = [];\r\n    }\r\n    return (\r\n      <div>\r\n        {steps.map(\r\n          ({stepName,questionStatement,_id,isStepDone,isQuestionAnswered,}, index) => {\r\n            console.log(_id);\r\n            const stepDetails = {stepName,questionStatement,_id,isStepDone,isQuestionAnswered, index}\r\n            return (\r\n              <StepItem key={_id} stepDetails = {stepDetails} />\r\n            );\r\n          }\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n  deleteStep: (stepId) => dispatch(deleteCurrentStepStart(stepId))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StepList);\r\n"]},"metadata":{},"sourceType":"module"}