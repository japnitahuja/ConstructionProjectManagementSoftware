{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\step-item\\\\step-item.component.jsx\";\nimport React, { Component } from \"react\";\nimport { CompleteStepButtons, CompleteStepButton, SmallBoldText, ArrowDown, ArrowUp, StepDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, RowContainer, ArrowDiv, PartitionDiv } from \"./step-item.styles\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport { completeStepQuestionStart, completeStepStart, deleteCurrentStepStart, fetchCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\nimport { selectCurrentProjectId } from \"../../redux/current-project/current-project.selectors\";\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from \"../../redux/current-step/current-step.selectors\";\nimport { selectCurrentTaskId } from \"../../redux/current-task/current-task.selectors\";\nimport { CheckBox } from \"../checkbox/checkbox.component\";\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\nimport { LongButton } from \"../long-button/long-button.styles\";\nimport checkCircle from \"../../assets/check-circle.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StepItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitQuestion = () => {\n      const {\n        _id\n      } = this.state.stepDetails;\n      console.log(\"Step Item\");\n      console.log(this.state.stepDetails);\n      this.props.completeStepQuestion(_id);\n      this.props.fetchCurrentStep(_id);\n      window.location.reload();\n    };\n\n    this.completeStep = async () => {\n      const {\n        completeStep,\n        taskId\n      } = this.props;\n      const stepId = this.state.stepDetails._id;\n      const data = {\n        stepId,\n        taskId\n      };\n      console.log(data);\n      await completeStep(data);\n      this.props.fetchCurrentStep(stepId);\n      window.location.reload();\n    };\n\n    this.deleteStep = e => {\n      const stepId = this.state.stepDetails._id;\n      const {\n        deleteStep\n      } = this.props;\n      deleteStep(stepId);\n      window.location.reload();\n    };\n\n    this.stepDetailsDiv = ({\n      isStepDone,\n      questionStatement,\n      isQuestionAnswered,\n      stepCompletionMessage\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"0px 25px\"\n          },\n          children: [questionStatement ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(SmallBoldText, {\n              children: questionStatement\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), isQuestionAnswered ? /*#__PURE__*/_jsxDEV(SmallBoldText, {\n              children: \"Step Question has been answered.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(CompleteStepButtons, {\n              children: [/*#__PURE__*/_jsxDEV(CompleteStepButton, {\n                border: false,\n                color: \"white\",\n                bgcolor: \"#6C7B8A\",\n                onClick: this.submitQuestion,\n                children: [\" \", \"YES\", \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(CompleteStepButton, {\n                border: true,\n                color: \"black\",\n                bgcolor: \"white\",\n                onClick: () => {\n                  this.setState(prevState => ({\n                    isOpen: !prevState.isOpen\n                  }));\n                },\n                children: [\" \", \"NO\", \" \"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 103,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this) : null, isStepDone ? /*#__PURE__*/_jsxDEV(SmallBoldText, {\n            children: \"Step Completed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 13\n          }, this) : /*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(LongButton, {\n              style: {\n                backgroundColor: \"#5887F9\",\n                borderRadius: \"5px\"\n              },\n              onClick: this.completeStep,\n              children: \"COMPLETE STEP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: stepCompletionMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = {\n      stepDetails: this.props.stepDetails,\n      isOpen: false\n    };\n  }\n\n  render() {\n    const {\n      stepName,\n      questionStatement,\n      _id,\n      isStepDone,\n      isQuestionAnswered,\n      index\n    } = this.state.stepDetails;\n    return /*#__PURE__*/_jsxDEV(StepDiv, {\n      children: [/*#__PURE__*/_jsxDEV(PartitionDiv, {\n        children: [/*#__PURE__*/_jsxDEV(LeftDiv, {\n          children: [/*#__PURE__*/_jsxDEV(RowContainer, {\n            children: [isStepDone ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: checkCircle,\n              style: {\n                width: \"20px\",\n                height: \"20px\",\n                marginRight: \"0.25em\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 153,\n              columnNumber: 17\n            }, this) : /*#__PURE__*/_jsxDEV(Circle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n              children: [\"Step - \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(BigText, {\n            children: stepName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RightDiv, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 11\n        }, this)]\n      }, _id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }, this), this.state.isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.stepDetailsDiv(this.state.stepDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(ArrowDiv, {\n        onClick: () => {\n          this.setState(prevState => ({\n            isOpen: !prevState.isOpen\n          }));\n        },\n        children: !this.state.isOpen ? /*#__PURE__*/_jsxDEV(ArrowDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 33\n        }, this) : /*#__PURE__*/_jsxDEV(ArrowUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone,\n  taskId: selectCurrentTaskId,\n  projectId: selectCurrentProjectId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: data => dispatch(completeStepStart(data)),\n  deleteStep: stepId => dispatch(deleteCurrentStepStart(stepId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepItem);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/step-item/step-item.component.jsx"],"names":["React","Component","CompleteStepButtons","CompleteStepButton","SmallBoldText","ArrowDown","ArrowUp","StepDiv","LeftDiv","RightDiv","BigText","SmallText","Circle","RowContainer","ArrowDiv","PartitionDiv","connect","createStructuredSelector","completeStepQuestionStart","completeStepStart","deleteCurrentStepStart","fetchCurrentStepStart","selectCurrentProjectId","selectCurrentStepCompletionMessage","selectCurrentStepId","selectCurrentStepIsDone","selectCurrentStepName","selectCurrentStepQuestion","selectCurrentStepQuestionAnswerConfirmation","selectCurrentStepQuestionAnswered","selectCurrentTaskId","CheckBox","DeleteButton","LongButton","checkCircle","StepItem","constructor","props","submitQuestion","_id","state","stepDetails","console","log","completeStepQuestion","fetchCurrentStep","window","location","reload","completeStep","taskId","stepId","data","deleteStep","e","stepDetailsDiv","isStepDone","questionStatement","isQuestionAnswered","stepCompletionMessage","padding","setState","prevState","isOpen","backgroundColor","borderRadius","render","stepName","index","width","height","marginRight","mapStateToProps","stepQuestion","isStepQuestionAnswered","questionCompletion","projectId","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport {\r\n  CompleteStepButtons,\r\n  CompleteStepButton,\r\n  SmallBoldText,\r\n  ArrowDown,\r\n  ArrowUp,\r\n  StepDiv,\r\n  LeftDiv,\r\n  RightDiv,\r\n  BigText,\r\n  SmallText,\r\n  Circle,\r\n  RowContainer,\r\n  ArrowDiv,\r\n  PartitionDiv,\r\n} from \"./step-item.styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport {\r\n  completeStepQuestionStart,\r\n  completeStepStart,\r\n  deleteCurrentStepStart,\r\n  fetchCurrentStepStart,\r\n} from \"../../redux/current-step/current-step.actions\";\r\nimport { selectCurrentProjectId } from \"../../redux/current-project/current-project.selectors\";\r\nimport {\r\n  selectCurrentStepCompletionMessage,\r\n  selectCurrentStepId,\r\n  selectCurrentStepIsDone,\r\n  selectCurrentStepName,\r\n  selectCurrentStepQuestion,\r\n  selectCurrentStepQuestionAnswerConfirmation,\r\n  selectCurrentStepQuestionAnswered,\r\n} from \"../../redux/current-step/current-step.selectors\";\r\nimport { selectCurrentTaskId } from \"../../redux/current-task/current-task.selectors\";\r\nimport { CheckBox } from \"../checkbox/checkbox.component\";\r\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\r\nimport { LongButton } from \"../long-button/long-button.styles\";\r\nimport checkCircle from \"../../assets/check-circle.png\";\r\n\r\nclass StepItem extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      stepDetails: this.props.stepDetails,\r\n      isOpen: false,\r\n    };\r\n  }\r\n\r\n  submitQuestion = () => {\r\n    const { _id } = this.state.stepDetails;\r\n    console.log(\"Step Item\");\r\n    console.log(this.state.stepDetails);\r\n    this.props.completeStepQuestion(_id);\r\n    this.props.fetchCurrentStep(_id);\r\n    window.location.reload();\r\n  };\r\n\r\n  completeStep = async () => {\r\n    const { completeStep, taskId } = this.props;\r\n    const stepId = this.state.stepDetails._id;\r\n    const data = { stepId, taskId };\r\n    console.log(data);\r\n    await completeStep(data);\r\n    this.props.fetchCurrentStep(stepId);\r\n    window.location.reload();\r\n  };\r\n\r\n  deleteStep = (e) => {\r\n    const stepId = this.state.stepDetails._id;\r\n    const { deleteStep } = this.props;\r\n    deleteStep(stepId);\r\n    window.location.reload();\r\n  };\r\n\r\n  stepDetailsDiv = ({\r\n    isStepDone,\r\n    questionStatement,\r\n    isQuestionAnswered,\r\n    stepCompletionMessage,\r\n  }) => {\r\n    return (\r\n      <center>\r\n        <div style={{ padding: \"0px 25px\" }}>\r\n          {questionStatement ? (\r\n            <div>\r\n              <SmallBoldText>{questionStatement}</SmallBoldText>\r\n              {isQuestionAnswered ? (\r\n                <SmallBoldText>Step Question has been answered.</SmallBoldText>\r\n              ) : (\r\n                <CompleteStepButtons>\r\n                  <CompleteStepButton\r\n                    border={false}\r\n                    color=\"white\"\r\n                    bgcolor=\"#6C7B8A\"\r\n                    onClick={this.submitQuestion}\r\n                  >\r\n                    {\" \"}\r\n                    YES{\" \"}\r\n                  </CompleteStepButton>\r\n                  <CompleteStepButton\r\n                    border={true}\r\n                    color=\"black\"\r\n                    bgcolor=\"white\"\r\n                    onClick={() => {\r\n                      this.setState((prevState) => ({\r\n                        isOpen: !prevState.isOpen,\r\n                      }));\r\n                    }}\r\n                  >\r\n                    {\" \"}\r\n                    NO{\" \"}\r\n                  </CompleteStepButton>\r\n                </CompleteStepButtons>\r\n              )}\r\n            </div>\r\n          ) : null}\r\n          {isStepDone ? (\r\n            <SmallBoldText>Step Completed.</SmallBoldText>\r\n          ) : (\r\n            <center>\r\n              <LongButton\r\n                style={{ backgroundColor: \"#5887F9\", borderRadius: \"5px\" }}\r\n                onClick={this.completeStep}\r\n              >\r\n                COMPLETE STEP\r\n              </LongButton>\r\n            </center>\r\n          )}\r\n          <h3>{stepCompletionMessage}</h3>\r\n        </div>\r\n      </center>\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      stepName,\r\n      questionStatement,\r\n      _id,\r\n      isStepDone,\r\n      isQuestionAnswered,\r\n      index,\r\n    } = this.state.stepDetails;\r\n    return (\r\n      <StepDiv>\r\n        <PartitionDiv key={_id}>\r\n          <LeftDiv>\r\n            <RowContainer>\r\n              {isStepDone ? (\r\n                <img\r\n                  src={checkCircle}\r\n                  style={{\r\n                    width: \"20px\",\r\n                    height: \"20px\",\r\n                    marginRight: \"0.25em\",\r\n                  }}\r\n                />\r\n              ) : (\r\n                <Circle />\r\n              )}\r\n              <SmallText>Step - {index + 1}</SmallText>\r\n            </RowContainer>\r\n\r\n            <BigText>{stepName}</BigText>\r\n          </LeftDiv>\r\n          <RightDiv>\r\n            {/* <DeleteButton id={_id} onClick={this.deleteStep}>Delete</DeleteButton> */}\r\n          </RightDiv>\r\n        </PartitionDiv>\r\n        {this.state.isOpen ? (\r\n          <div>{this.stepDetailsDiv(this.state.stepDetails)}</div>\r\n        ) : null}\r\n        <ArrowDiv\r\n          onClick={() => {\r\n            this.setState((prevState) => ({ isOpen: !prevState.isOpen }));\r\n          }}\r\n        >\r\n          {!this.state.isOpen ? <ArrowDown /> : <ArrowUp />}\r\n        </ArrowDiv>\r\n      </StepDiv>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  stepName: selectCurrentStepName,\r\n  stepQuestion: selectCurrentStepQuestion,\r\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n  isStepDone: selectCurrentStepIsDone,\r\n  taskId: selectCurrentTaskId,\r\n  projectId: selectCurrentProjectId,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchCurrentStep: (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n  completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n  completeStep: (data) => dispatch(completeStepStart(data)),\r\n  deleteStep: (stepId) => dispatch(deleteCurrentStepStart(stepId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StepItem);\r\n"]},"metadata":{},"sourceType":"module"}