{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\form-fullscreen-selection\\\\form-fullscreen-selection.component.js\";\nimport React, { Component } from \"react\";\nimport { LongButton } from \"../long-button/long-button.styles\";\nimport { ContainerDiv, NavBar, OneThirdDiv, ItemDiv } from \"./form-fullscreen-selection.styles\";\nimport { SmallText } from \"../project-item/project-item.styles\";\nimport { connect } from \"react-redux\";\nimport { inviteUserStart } from \"../../redux/current-project/current-project.actions\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectCurrentProjectRoles } from \"../../redux/current-project/current-project.selectors\";\nimport { FormHeading, FormLabel, FormInput, FormDiv } from \"../create-project-form/create-project-form.styles\";\nimport DropDown from \"../form-dropdown/form-dropdown.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass FormFullScreenSelection extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleOnClick = e => {\n      let {\n        item\n      } = e.target.dataset;\n      console.log(item);\n      this.props.select({\n        value: item,\n        type: this.props.type\n      });\n      this.props.exit();\n    };\n\n    this.state = {};\n  }\n\n  render() {\n    const {\n      exit,\n      items,\n      selected\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(ContainerDiv, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        children: [/*#__PURE__*/_jsxDEV(OneThirdDiv, {\n          align: \"flex-start\",\n          color: \"#205284\",\n          onClick: exit,\n          children: \"Back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OneThirdDiv, {\n          align: \"center\",\n          style: {\n            fontWeight: \"600\"\n          },\n          children: \"Select Task\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(OneThirdDiv, {\n          align: \"flex-end\",\n          color: \"#205284\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), items.includes(selected) ? /*#__PURE__*/_jsxDEV(ItemDiv, {\n        children: [\"`$\", selected, \"`\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 37\n      }, this) : null, items.map(item => {\n        return /*#__PURE__*/_jsxDEV(ItemDiv, {\n          \"data-item\": item,\n          onClick: this.handleOnClick,\n          selected: false,\n          children: item\n        }, item, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  // name: selectCurrentUserFirstName,\n  // projects: selectUserProjects\n  projectRoles: selectCurrentProjectRoles\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // signOut: () => dispatch(signOut())\n  inviteUser: userDetails => dispatch(inviteUserStart(userDetails))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormFullScreenSelection);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/form-fullscreen-selection/form-fullscreen-selection.component.js"],"names":["React","Component","LongButton","ContainerDiv","NavBar","OneThirdDiv","ItemDiv","SmallText","connect","inviteUserStart","createStructuredSelector","selectCurrentProjectRoles","FormHeading","FormLabel","FormInput","FormDiv","DropDown","FormFullScreenSelection","constructor","props","handleOnClick","e","item","target","dataset","console","log","select","value","type","exit","state","render","items","selected","fontWeight","includes","map","mapStateToProps","projectRoles","mapDispatchToProps","dispatch","inviteUser","userDetails"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,UAAT,QAA2B,mCAA3B;AACA,SACEC,YADF,EAEEC,MAFF,EAGEC,WAHF,EAIEC,OAJF,QAKO,oCALP;AAMA,SAASC,SAAT,QAA0B,qCAA1B;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,eAAT,QAAgC,qDAAhC;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,yBAAT,QAA0C,uDAA1C;AACA,SACEC,WADF,EAEEC,SAFF,EAGEC,SAHF,EAIEC,OAJF,QAKO,mDALP;AAMA,OAAOC,QAAP,MAAqB,0CAArB;;;AAEA,MAAMC,uBAAN,SAAsChB,SAAtC,CAAgD;AAC9CiB,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAKnBC,aALmB,GAKFC,CAAD,IAAO;AACrB,UAAI;AAAEC,QAAAA;AAAF,UAAWD,CAAC,CAACE,MAAF,CAASC,OAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AAEA,WAAKH,KAAL,CAAWQ,MAAX,CAAkB;AAAEC,QAAAA,KAAK,EAAEN,IAAT;AAAeO,QAAAA,IAAI,EAAE,KAAKV,KAAL,CAAWU;AAAhC,OAAlB;AACA,WAAKV,KAAL,CAAWW,IAAX;AACD,KAXkB;;AAEjB,SAAKC,KAAL,GAAa,EAAb;AACD;;AAUDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEF,MAAAA,IAAF;AAAQG,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA4B,KAAKf,KAAvC;AAEA,wBACE,QAAC,YAAD;AAAA,8BACE,QAAC,MAAD;AAAA,gCACE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAC,YAAnB;AAAgC,UAAA,KAAK,EAAC,SAAtC;AAAgD,UAAA,OAAO,EAAEW,IAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAIE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAC,QAAnB;AAA4B,UAAA,KAAK,EAAE;AAAEK,YAAAA,UAAU,EAAE;AAAd,WAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,eAOE,QAAC,WAAD;AAAa,UAAA,KAAK,EAAC,UAAnB;AAA8B,UAAA,KAAK,EAAC;AAApC;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAUGF,KAAK,CAACG,QAAN,CAAeF,QAAf,iBAA2B,QAAC,OAAD;AAAA,yBAAYA,QAAZ;AAAA;AAAA;AAAA;AAAA;AAAA,cAA3B,GAA8D,IAVjE,EAWGD,KAAK,CAACI,GAAN,CAAWf,IAAD,IAAU;AACnB,4BACE,QAAC,OAAD;AACE,uBAAWA,IADb;AAGE,UAAA,OAAO,EAAE,KAAKF,aAHhB;AAIE,UAAA,QAAQ,EAAE,KAJZ;AAAA,oBAMGE;AANH,WAEOA,IAFP;AAAA;AAAA;AAAA;AAAA,gBADF;AAUD,OAXA,CAXH;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AA0BD;;AA3C6C;;AA8ChD,MAAMgB,eAAe,GAAG5B,wBAAwB,CAAC;AAC/C;AACA;AACA6B,EAAAA,YAAY,EAAE5B;AAHiC,CAAD,CAAhD;;AAMA,MAAM6B,kBAAkB,GAAIC,QAAD,KAAe;AACxC;AACAC,EAAAA,UAAU,EAAGC,WAAD,IAAiBF,QAAQ,CAAChC,eAAe,CAACkC,WAAD,CAAhB;AAFG,CAAf,CAA3B;;AAKA,eAAenC,OAAO,CACpB8B,eADoB,EAEpBE,kBAFoB,CAAP,CAGbvB,uBAHa,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { LongButton } from \"../long-button/long-button.styles\";\r\nimport {\r\n  ContainerDiv,\r\n  NavBar,\r\n  OneThirdDiv,\r\n  ItemDiv,\r\n} from \"./form-fullscreen-selection.styles\";\r\nimport { SmallText } from \"../project-item/project-item.styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { inviteUserStart } from \"../../redux/current-project/current-project.actions\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { selectCurrentProjectRoles } from \"../../redux/current-project/current-project.selectors\";\r\nimport {\r\n  FormHeading,\r\n  FormLabel,\r\n  FormInput,\r\n  FormDiv,\r\n} from \"../create-project-form/create-project-form.styles\";\r\nimport DropDown from \"../form-dropdown/form-dropdown.component\";\r\n\r\nclass FormFullScreenSelection extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  handleOnClick = (e) => {\r\n    let { item } = e.target.dataset;\r\n    console.log(item);\r\n\r\n    this.props.select({ value: item, type: this.props.type });\r\n    this.props.exit();\r\n  };\r\n\r\n  render() {\r\n    const { exit, items, selected } = this.props;\r\n\r\n    return (\r\n      <ContainerDiv>\r\n        <NavBar>\r\n          <OneThirdDiv align=\"flex-start\" color=\"#205284\" onClick={exit}>\r\n            Back\r\n          </OneThirdDiv>\r\n          <OneThirdDiv align=\"center\" style={{ fontWeight: \"600\" }}>\r\n            Select Task\r\n          </OneThirdDiv>\r\n          <OneThirdDiv align=\"flex-end\" color=\"#205284\"></OneThirdDiv>\r\n        </NavBar>\r\n        {items.includes(selected) ? <ItemDiv>`${selected}`</ItemDiv> : null}\r\n        {items.map((item) => {\r\n          return (\r\n            <ItemDiv\r\n              data-item={item}\r\n              key={item}\r\n              onClick={this.handleOnClick}\r\n              selected={false}\r\n            >\r\n              {item}\r\n            </ItemDiv>\r\n          );\r\n        })}\r\n      </ContainerDiv>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  // name: selectCurrentUserFirstName,\r\n  // projects: selectUserProjects\r\n  projectRoles: selectCurrentProjectRoles,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // signOut: () => dispatch(signOut())\r\n  inviteUser: (userDetails) => dispatch(inviteUserStart(userDetails)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(FormFullScreenSelection);\r\n"]},"metadata":{},"sourceType":"module"}