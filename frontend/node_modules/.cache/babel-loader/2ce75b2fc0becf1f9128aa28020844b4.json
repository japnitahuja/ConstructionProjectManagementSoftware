{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\step\\\\step.page.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport { completeStepQuestionStart, completeStepStart } from '../../redux/current-step/current-step.actions';\nimport { fetchCurrentStepStart } from '../../redux/current-step/current-step.actions';\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Step extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.submitQuestion = () => {\n      const {\n        stepId,\n        completeStepQuestion\n      } = this.props;\n      completeStepQuestion(stepId);\n      this.props.fetchCurrentStep(stepId);\n      window.location.reload();\n    };\n\n    this.completeStep = () => {\n      const {\n        stepId,\n        completeStep\n      } = this.props;\n      completeStep(stepId);\n    };\n  }\n\n  componentDidMount() {\n    const stepId = this.props.match.params.stepId;\n    this.props.fetchCurrentStep(stepId);\n    console.log(stepId);\n  }\n\n  render() {\n    const {\n      stepName,\n      stepQuestion,\n      isStepQuestionAnswered,\n      stepCompletionMessage,\n      isStepDone\n    } = this.props;\n    console.log(stepCompletionMessage);\n\n    if (stepCompletionMessage) {\n      console.log(stepCompletionMessage);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"10px\",\n        border: \"1px solid black\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Step Name: \", stepName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: stepCompletionMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this), stepQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Question: \", stepQuestion, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 49\n        }, this), isStepQuestionAnswered ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Question has been answered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 53\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.submitQuestion,\n          children: \"COMPLETE STEP QUESTION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 93\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 21\n      }, this) : null, isStepDone ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"STEP COMPLETED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.completeStep,\n        children: \"COMPLETE STEP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 62\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  stepId: selectCurrentStepId,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: stepId => dispatch(completeStepStart(stepId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Step));","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/step/step.page.jsx"],"names":["React","Component","connect","BrowserRouter","withRouter","createStructuredSelector","completeStepQuestionStart","completeStepStart","fetchCurrentStepStart","selectCurrentStepCompletionMessage","selectCurrentStepId","selectCurrentStepIsDone","selectCurrentStepName","selectCurrentStepQuestion","selectCurrentStepQuestionAnswerConfirmation","selectCurrentStepQuestionAnswered","Step","submitQuestion","stepId","completeStepQuestion","props","fetchCurrentStep","window","location","reload","completeStep","componentDidMount","match","params","console","log","render","stepName","stepQuestion","isStepQuestionAnswered","stepCompletionMessage","isStepDone","padding","border","mapStateToProps","questionCompletion","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect'\r\nimport { completeStepQuestionStart, completeStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { fetchCurrentStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors'\r\n\r\n class Step extends Component {\r\n    componentDidMount(){\r\n        const stepId = this.props.match.params.stepId\r\n       this.props.fetchCurrentStep(stepId)\r\n       console.log(stepId)\r\n    }\r\n\r\n    submitQuestion = () => {\r\n        const {stepId, completeStepQuestion} = this.props\r\n        completeStepQuestion(stepId)\r\n        this.props.fetchCurrentStep(stepId)\r\n        window.location.reload()\r\n    }\r\n\r\n    completeStep = () => {\r\n        const {stepId, completeStep} = this.props\r\n        completeStep(stepId)\r\n    }\r\n    render() {\r\n        const {stepName, stepQuestion, isStepQuestionAnswered, stepCompletionMessage, isStepDone} = this.props\r\n\r\n        console.log(stepCompletionMessage)\r\n        if(stepCompletionMessage){\r\n            console.log(stepCompletionMessage)\r\n        }\r\n        return (\r\n            <div style={{ padding: \"10px\", border: \"1px solid black\" }}>\r\n                <h2>Step Name: {stepName}</h2>\r\n                <h3>{stepCompletionMessage}</h3>\r\n                \r\n                {\r\n                    stepQuestion?\r\n                    <div>\r\n                        Question: {stepQuestion}<br/>\r\n                        {\r\n                            isStepQuestionAnswered? <div>Question has been answered</div> : <button onClick={this.submitQuestion}>COMPLETE STEP QUESTION</button>\r\n                        }\r\n                        \r\n                    </div> \r\n                    : null\r\n                }\r\n                {\r\n                    isStepDone ? <div>STEP COMPLETED</div> : <button onClick={this.completeStep}>COMPLETE STEP</button>\r\n                }\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    stepName: selectCurrentStepName,\r\n    stepQuestion: selectCurrentStepQuestion,\r\n    isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n    stepId: selectCurrentStepId,\r\n    questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n    stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n    isStepDone: selectCurrentStepIsDone\r\n\r\n});\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchCurrentStep : (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n    completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n    completeStep: (stepId) => dispatch(completeStepStart(stepId))\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Step));\r\n"]},"metadata":{},"sourceType":"module"}