{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { deleteCurrentTaskInReducer } from \"../current-project/current-project.actions\";\nimport { selectCurrentProjectId } from \"../current-project/current-project.selectors\";\nimport { completeCurrentTaskFailure, completeCurrentTaskSuccess, fetchCurrentTaskFailure, fetchCurrentTaskSuccess, deleteCurrentTaskSuccess, deleteCurrentTaskFailure } from \"./current-task.actions\";\nimport { CurrentTaskActionTypes } from \"./current-task.types\";\nexport function* fetchCurrentTask({\n  payload\n}) {\n  try {\n    const taskId = payload;\n    console.log(taskId);\n    let currentTask = yield fetch(`http://127.0.0.1:5000/task/${taskId}`);\n    currentTask = yield currentTask.json();\n    currentTask.done ? yield put(fetchCurrentTaskSuccess(currentTask.task)) : yield put(fetchCurrentTaskFailure('CURRENT PROJECCT FETTCHING FAILED'));\n  } catch (error) {\n    fetchCurrentTaskFailure(error);\n  }\n}\nexport function* completeTask({\n  payload\n}) {\n  let taskId = payload;\n\n  try {\n    let taskCompletion = yield fetch(`http://127.0.0.1:5000/complete-task/${taskId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    taskCompletion = yield taskCompletion.json();\n    taskCompletion.done ? yield put(completeCurrentTaskSuccess(taskCompletion.message)) : yield put(completeCurrentTaskFailure(taskCompletion.error));\n  } catch (error) {\n    console.log(error);\n    yield put(completeCurrentTaskFailure(error));\n  }\n}\nexport function* deleteTask({\n  payload\n}) {\n  try {\n    let taskId = payload;\n    yield put(deleteCurrentTaskInReducer(taskId));\n    let projectId = yield select(selectCurrentProjectId);\n    projectId = {\n      projectId: projectId\n    };\n    console.log(projectId);\n    let taskDeletion = yield fetch(`http://127.0.0.1:5000/task/${taskId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(projectId)\n    });\n    taskDeletion = yield taskDeletion.json();\n\n    if (taskDeletion.done) {\n      yield put(deleteCurrentTaskSuccess(taskDeletion.message));\n    } else {\n      yield put(deleteCurrentTaskFailure(taskDeletion.error));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(deleteCurrentTaskFailure(error));\n  }\n}\nexport function* onCurrentTaskFetchStart() {\n  yield takeLatest(CurrentTaskActionTypes.FETCH_CURRENT_TASK_START, fetchCurrentTask);\n}\nexport function* onTaskCompletionStart() {\n  yield takeLatest(CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START, completeTask);\n}\nexport function* onDeleteTaskStart() {\n  yield takeLatest(CurrentTaskActionTypes.DELETE_CURRENT_TASK_START, deleteTask);\n}\nexport function* currentTaskSagas() {\n  yield all([call(onCurrentTaskFetchStart), call(onTaskCompletionStart), call(onDeleteTaskStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/current-task/current-task.sagas.js"],"names":["all","call","put","takeLatest","select","deleteCurrentTaskInReducer","selectCurrentProjectId","completeCurrentTaskFailure","completeCurrentTaskSuccess","fetchCurrentTaskFailure","fetchCurrentTaskSuccess","deleteCurrentTaskSuccess","deleteCurrentTaskFailure","CurrentTaskActionTypes","fetchCurrentTask","payload","taskId","console","log","currentTask","fetch","json","done","task","error","completeTask","taskCompletion","method","headers","message","deleteTask","projectId","taskDeletion","body","JSON","stringify","onCurrentTaskFetchStart","FETCH_CURRENT_TASK_START","onTaskCompletionStart","COMPLETE_CURRENT_TASK_START","onDeleteTaskStart","DELETE_CURRENT_TASK_START","currentTaskSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { deleteCurrentTaskInReducer } from \"../current-project/current-project.actions\";\r\nimport { selectCurrentProjectId } from \"../current-project/current-project.selectors\";\r\nimport { completeCurrentTaskFailure, completeCurrentTaskSuccess, fetchCurrentTaskFailure, fetchCurrentTaskSuccess, deleteCurrentTaskSuccess, deleteCurrentTaskFailure } from \"./current-task.actions\";\r\nimport { CurrentTaskActionTypes } from \"./current-task.types\";\r\n\r\nexport function* fetchCurrentTask({payload}){\r\n  try {\r\n      const taskId = payload\r\n      console.log(taskId)\r\n    let currentTask = yield fetch(`http://127.0.0.1:5000/task/${taskId}`)\r\n    currentTask = yield currentTask.json()\r\n    currentTask.done\r\n    ? yield put(fetchCurrentTaskSuccess(currentTask.task))\r\n    : yield put(fetchCurrentTaskFailure('CURRENT PROJECCT FETTCHING FAILED'))\r\n  } catch (error) {\r\n    fetchCurrentTaskFailure(error)\r\n  }\r\n}\r\n\r\nexport function* completeTask({payload}){\r\n  let taskId = payload\r\n  try {\r\n    let taskCompletion = yield fetch(`http://127.0.0.1:5000/complete-task/${taskId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    taskCompletion = yield taskCompletion.json()\r\n    taskCompletion.done?\r\n    yield put(completeCurrentTaskSuccess(taskCompletion.message)):\r\n    yield put(completeCurrentTaskFailure(taskCompletion.error))\r\n  } catch (error) {\r\n    console.log(error)\r\n    yield put(completeCurrentTaskFailure(error))\r\n  }\r\n}\r\n\r\nexport function* deleteTask({payload}){\r\n  try{\r\n    let taskId = payload;\r\n    yield put(deleteCurrentTaskInReducer(taskId));\r\n    let projectId = yield select(selectCurrentProjectId);\r\n    projectId = {projectId: projectId}\r\n    console.log(projectId)\r\n    let taskDeletion = yield fetch(`http://127.0.0.1:5000/task/${taskId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(projectId),\r\n\r\n    })\r\n    taskDeletion = yield taskDeletion.json()\r\n    if(taskDeletion.done){\r\n      yield put(deleteCurrentTaskSuccess(taskDeletion.message));\r\n      \r\n    }\r\n    else{\r\n      yield put(deleteCurrentTaskFailure(taskDeletion.error))\r\n    }\r\n    \r\n  } catch (error) {\r\n    console.log(error)\r\n    yield put(deleteCurrentTaskFailure(error))\r\n  }\r\n\r\n  }\r\n\r\n\r\n\r\nexport function* onCurrentTaskFetchStart(){\r\n  yield takeLatest(CurrentTaskActionTypes.FETCH_CURRENT_TASK_START , fetchCurrentTask)\r\n}\r\n\r\nexport function* onTaskCompletionStart(){\r\n  yield takeLatest(CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START, completeTask)\r\n}\r\n\r\nexport function* onDeleteTaskStart(){\r\n  yield takeLatest(CurrentTaskActionTypes.DELETE_CURRENT_TASK_START, deleteTask)\r\n}\r\n\r\nexport function* currentTaskSagas() {\r\n  yield all([\r\n    call(onCurrentTaskFetchStart),\r\n    call(onTaskCompletionStart),\r\n    call(onDeleteTaskStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}