{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\step-item\\\\step-item.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { StepDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, RowContainer, ArrowDiv, PartitionDiv } from \"./step-item.styles\";\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\nimport { completeStepQuestionStart, completeStepStart, fetchCurrentStepStart } from '../../redux/current-step/current-step.actions';\nimport '../../redux/current-step/current-step.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StepItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitQuestion = () => {\n      const {\n        stepId,\n        completeStepQuestion\n      } = this.props;\n      completeStepQuestion(stepId);\n      this.props.fetchCurrentStep(stepId);\n      window.location.reload();\n    };\n\n    this.completeStep = async () => {\n      const {\n        stepId,\n        completeStep,\n        taskId,\n        history\n      } = this.props;\n      const data = {\n        stepId,\n        taskId\n      };\n      console.log(data);\n      await completeStep(data);\n      history.push(`/task/${taskId}`);\n    };\n\n    this.stepDetailsDiv = ({\n      isStepDone,\n      questionStatement,\n      isStepQuestionAnswered,\n      stepCompletionMessage\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [questionStatement ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Question: \", questionStatement, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 50\n          }, this), isStepQuestionAnswered ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"Question has been answered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 49\n          }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: this.submitQuestion,\n            children: \"COMPLETE STEP QUESTION\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 89\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 17\n        }, this) : null, isStepDone ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"STEP COMPLETED\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 34\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.completeStep,\n          children: \"COMPLETE STEP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 62\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: stepCompletionMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      stepDetails: this.props.stepDetails,\n      isOpen: false\n    };\n  } // deleteTask(e){\n  //     console.log(\"delete button\", this.state.taskDetails._id);\n  //     this.props.deleteTask(this.state.taskDetails._id);\n  // }\n\n\n  componentDidMount() {\n    const stepId = this.props.match.params.stepId;\n    this.props.fetchCurrentStep(stepId);\n    console.log(stepId);\n  }\n\n  render() {\n    const {\n      stepName,\n      questionStatement,\n      _id,\n      isStepDone,\n      isQuestionAnswered,\n      index\n    } = this.state.stepDetails;\n    console.log(this.state.stepDetails);\n    return /*#__PURE__*/_jsxDEV(StepDiv, {\n      children: [/*#__PURE__*/_jsxDEV(PartitionDiv, {\n        children: [/*#__PURE__*/_jsxDEV(LeftDiv, {\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/step/${_id}`,\n            style: {\n              textDecoration: 'none'\n            },\n            children: [/*#__PURE__*/_jsxDEV(RowContainer, {\n              children: [/*#__PURE__*/_jsxDEV(Circle, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 80,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n                children: [\"STEP - \", index + 1]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(BigText, {\n              children: stepName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RightDiv, {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            id: _id,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)]\n      }, _id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), this.state.isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.stepDetailsDiv(this.state.stepDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 39\n      }, this) : null, /*#__PURE__*/_jsxDEV(ArrowDiv, {\n        onClick: () => {\n          this.setState(prevState => ({\n            isOpen: !prevState.isOpen\n          }));\n        },\n        children: !this.state.isOpen ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2228\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u2227\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteTask: taskId => dispatch(deleteCurrentTaskStart(taskId)),\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: data => dispatch(completeStepStart(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepItem);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/step-item/step-item.component.jsx"],"names":["React","Component","Link","StepDiv","LeftDiv","RightDiv","BigText","SmallText","Circle","RowContainer","ArrowDiv","PartitionDiv","connect","createStructuredSelector","deleteCurrentTaskStart","completeStepQuestionStart","completeStepStart","fetchCurrentStepStart","StepItem","constructor","props","submitQuestion","stepId","completeStepQuestion","fetchCurrentStep","window","location","reload","completeStep","taskId","history","data","console","log","push","stepDetailsDiv","isStepDone","questionStatement","isStepQuestionAnswered","stepCompletionMessage","state","stepDetails","isOpen","componentDidMount","match","params","render","stepName","_id","isQuestionAnswered","index","textDecoration","setState","prevState","mapStateToProps","mapDispatchToProps","dispatch","deleteTask"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { StepDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, RowContainer, ArrowDiv, PartitionDiv} from \"./step-item.styles\";\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { deleteCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\r\nimport { completeStepQuestionStart, completeStepStart, fetchCurrentStepStart } from '../../redux/current-step/current-step.actions'\r\nimport {  } from '../../redux/current-step/current-step.actions'\r\n\r\nclass StepItem extends Component{\r\n    constructor(props){\r\n        super(props);\r\n      \r\n        this.state = {\r\n            stepDetails: this.props.stepDetails,\r\n            isOpen:false\r\n        };\r\n    }\r\n\r\n    // deleteTask(e){\r\n    //     console.log(\"delete button\", this.state.taskDetails._id);\r\n    //     this.props.deleteTask(this.state.taskDetails._id);\r\n    // }\r\n\r\n    componentDidMount(){\r\n        const stepId = this.props.match.params.stepId\r\n       this.props.fetchCurrentStep(stepId)\r\n       console.log(stepId)\r\n    }\r\n\r\n    submitQuestion = () => {\r\n        const {stepId, completeStepQuestion} = this.props\r\n        completeStepQuestion(stepId)\r\n        this.props.fetchCurrentStep(stepId)\r\n        window.location.reload()\r\n    }\r\n\r\n    completeStep = async() => {\r\n        const {stepId, completeStep, taskId, history} = this.props\r\n        const data = {stepId, taskId}\r\n        console.log(data)\r\n        await completeStep(data)\r\n        history.push(`/task/${taskId}`)\r\n        \r\n    }\r\n\r\n    stepDetailsDiv = ({isStepDone,questionStatement,isStepQuestionAnswered, stepCompletionMessage}) => {\r\n        return(\r\n            <div>\r\n                 {\r\n                questionStatement?\r\n                <div>\r\n                    Question: {questionStatement}<br/>\r\n                    {\r\n                        isStepQuestionAnswered? <div>Question has been answered</div> : <button onClick={this.submitQuestion}>COMPLETE STEP QUESTION</button>\r\n                    }\r\n                    \r\n                </div> \r\n                : null\r\n                }\r\n                {\r\n                    isStepDone ? <div>STEP COMPLETED</div> : <button onClick={this.completeStep}>COMPLETE STEP</button>\r\n                }\r\n                <h3>{stepCompletionMessage}</h3>\r\n            </div>\r\n        )\r\n        \r\n\r\n    };\r\n    \r\n    render (){\r\n        const {stepName,questionStatement,_id,isStepDone,isQuestionAnswered, index} = this.state.stepDetails;\r\n        console.log(this.state.stepDetails)\r\n        return (\r\n            <StepDiv>\r\n                <PartitionDiv key={_id}>\r\n                    <LeftDiv>\r\n                        <Link to={`/step/${_id}`} style={{textDecoration:'none'}}>\r\n                            <RowContainer>\r\n                            <Circle /> \r\n                            <SmallText>STEP - {index+1}</SmallText>\r\n                            </RowContainer>\r\n                            \r\n                            <BigText>{stepName}</BigText>\r\n                        </Link>\r\n                    </LeftDiv>\r\n                    <RightDiv>\r\n                        <button id={_id}>Delete</button>\r\n                       \r\n                    </RightDiv>\r\n                </PartitionDiv>\r\n                {\r\n\r\n                    this.state.isOpen?<div>{this.stepDetailsDiv(this.state.stepDetails)}</div>:null\r\n                }\r\n                <ArrowDiv onClick={()=>\r\n                {\r\n                    this.setState((prevState) => ({isOpen: !prevState.isOpen }));\r\n                    \r\n                }}>\r\n                    {!this.state.isOpen? <p>&or;</p> : <p>&and;</p>}\r\n                </ArrowDiv>\r\n\r\n                \r\n            \r\n            </StepDiv>\r\n            \r\n                \r\n            \r\n        \r\n    )}\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    deleteTask : (taskId) => dispatch(deleteCurrentTaskStart(taskId)),\r\n    fetchCurrentStep : (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n    completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n    completeStep: (data) => dispatch(completeStepStart(data))\r\n  });\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(StepItem);\r\n"]},"metadata":{},"sourceType":"module"}