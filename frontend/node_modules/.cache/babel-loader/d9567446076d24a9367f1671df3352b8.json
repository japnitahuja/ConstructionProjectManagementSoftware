{"ast":null,"code":"import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { createTaskSucessful, createTaskFail, fetchTasksStart, fetchTasksFailure, fetchTasksSuccess } from \"./all-tasks.actions\";\nimport { TaskActionTypes } from \"./all-tasks.types\";\nimport { selectCurrentProjectId, selectCurrentProjectTasks } from '../current-project/current-project.selectors';\nimport { fetchCurrentProjectStart } from \"../current-project/current-project.actions\";\nexport function* createTask({\n  payload\n}) {\n  try {\n    let data = payload;\n    let userId = yield select(selectUserId);\n    let projectTasks = yield select(selectCurrentProjectTasks);\n    let projectId = yield select(selectCurrentProjectId);\n    data['userId'] = userId;\n    let resp = yield fetch(`http://127.0.0.1:5000/create-task/${data.projectId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n    console.log(resp);\n\n    if (resp.done) {\n      yield put(createTaskSucessful(resp.message));\n    } else {\n      yield put(createTaskFail(resp.error));\n    }\n\n    yield delay(500);\n    yield put(fetchCurrentProjectStart(projectId));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchTasks({\n  payload\n}) {\n  try {\n    let tasks = yield fetch(`http://127.0.0.1:5000/project/${payload}/task`);\n    tasks = yield tasks.json();\n    tasks.done ? yield put(fetchTasksSuccess(tasks.tasks.tasks)) : yield put(fetchTasksFailure('Error.'));\n  } catch (error) {\n    fetchTasksFailure(error);\n  }\n}\nexport function* onTaskCreateStart() {\n  yield takeLatest(TaskActionTypes.CREATE_TASK_START, createTask);\n}\nexport function* onTaskFetchStart() {\n  yield takeLatest(TaskActionTypes.FETCH_TASKS_START, fetchTasks);\n}\nexport function* taskSagas() {\n  yield all([call(onTaskCreateStart), call(onTaskFetchStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/all-tasks/all-tasks.sagas.js"],"names":["all","call","put","takeLatest","select","delay","selectUserId","createTaskSucessful","createTaskFail","fetchTasksStart","fetchTasksFailure","fetchTasksSuccess","TaskActionTypes","selectCurrentProjectId","selectCurrentProjectTasks","fetchCurrentProjectStart","createTask","payload","data","userId","projectTasks","projectId","resp","fetch","method","headers","body","JSON","stringify","json","console","log","done","message","error","fetchTasks","tasks","onTaskCreateStart","CREATE_TASK_START","onTaskFetchStart","FETCH_TASKS_START","taskSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,KAA7C,QAAyD,oBAAzD;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,mBAAT,EAA8BC,cAA9B,EAA8CC,eAA9C,EAA+DC,iBAA/D,EAAkFC,iBAAlF,QAA2G,qBAA3G;AACA,SAASC,eAAT,QAAgC,mBAAhC;AACA,SAAQC,sBAAR,EAAgCC,yBAAhC,QAAgE,8CAAhE;AACA,SAASC,wBAAT,QAAyC,4CAAzC;AAEA,OAAO,UAAUC,UAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AACF,QAAIC,IAAI,GAAGD,OAAX;AACA,QAAIE,MAAM,GAAG,MAAMf,MAAM,CAACE,YAAD,CAAzB;AACA,QAAIc,YAAY,GAAG,MAAMhB,MAAM,CAACU,yBAAD,CAA/B;AACA,QAAIO,SAAS,GAAG,MAAMjB,MAAM,CAACS,sBAAD,CAA5B;AACAK,IAAAA,IAAI,CAAC,QAAD,CAAJ,GAAiBC,MAAjB;AACA,QAAIG,IAAI,GAAG,MAAMC,KAAK,CAAE,qCAAoCL,IAAI,CAACG,SAAU,EAArD,EAAwD;AAC5EG,MAAAA,MAAM,EAAE,MADoE;AAE5EC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFmE;AAK5EC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AALsE,KAAxD,CAAtB;AAQAI,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACO,IAAL,EAAb;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;;AACA,QAAGA,IAAI,CAACU,IAAR,EAAa;AACT,YAAM9B,GAAG,CAACK,mBAAmB,CAACe,IAAI,CAACW,OAAN,CAApB,CAAT;AACH,KAFD,MAEK;AACH,YAAM/B,GAAG,CAACM,cAAc,CAACc,IAAI,CAACY,KAAN,CAAf,CAAT;AACD;;AACD,UAAM7B,KAAK,CAAC,GAAD,CAAX;AACA,UAAMH,GAAG,CAACa,wBAAwB,CAACM,SAAD,CAAzB,CAAT;AACD,GAvBD,CAuBE,OAAOa,KAAP,EAAc;AACdJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACD;AACF;AAED,OAAO,UAAUC,UAAV,CAAqB;AAAClB,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AACF,QAAImB,KAAK,GAAG,MAAMb,KAAK,CAAE,iCAAgCN,OAAQ,OAA1C,CAAvB;AACAmB,IAAAA,KAAK,GAAG,MAAMA,KAAK,CAACP,IAAN,EAAd;AAEAO,IAAAA,KAAK,CAACJ,IAAN,GACE,MAAM9B,GAAG,CAACS,iBAAiB,CAACyB,KAAK,CAACA,KAAN,CAAYA,KAAb,CAAlB,CADX,GAEE,MAAMlC,GAAG,CAACQ,iBAAiB,CAAC,QAAD,CAAlB,CAFX;AAGD,GAPD,CAOE,OAAOwB,KAAP,EAAc;AACdxB,IAAAA,iBAAiB,CAACwB,KAAD,CAAjB;AACD;AACF;AAGD,OAAO,UAAUG,iBAAV,GAA6B;AAClC,QAAMlC,UAAU,CAACS,eAAe,CAAC0B,iBAAjB,EAAoCtB,UAApC,CAAhB;AACD;AAED,OAAO,UAAUuB,gBAAV,GAA4B;AACjC,QAAMpC,UAAU,CAACS,eAAe,CAAC4B,iBAAjB,EAAoCL,UAApC,CAAhB;AACD;AAED,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAMzC,GAAG,CAAC,CACRC,IAAI,CAACoC,iBAAD,CADI,EAERpC,IAAI,CAACsC,gBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select, delay} from \"redux-saga/effects\";\r\nimport { selectUserId } from \"../user/user.selectors\";\r\nimport { createTaskSucessful, createTaskFail, fetchTasksStart, fetchTasksFailure, fetchTasksSuccess } from \"./all-tasks.actions\";\r\nimport { TaskActionTypes } from \"./all-tasks.types\";\r\nimport {selectCurrentProjectId, selectCurrentProjectTasks} from '../current-project/current-project.selectors'\r\nimport { fetchCurrentProjectStart } from \"../current-project/current-project.actions\";\r\n\r\nexport function* createTask({payload}){\r\n  try {\r\n    let data = payload;\r\n    let userId = yield select(selectUserId)\r\n    let projectTasks = yield select(selectCurrentProjectTasks)\r\n    let projectId = yield select(selectCurrentProjectId)\r\n    data['userId'] = userId\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-task/${data.projectId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    console.log(resp)\r\n    if(resp.done){\r\n        yield put(createTaskSucessful(resp.message));\r\n    }else{\r\n      yield put(createTaskFail(resp.error))\r\n    }\r\n    yield delay(500)\r\n    yield put(fetchCurrentProjectStart(projectId))\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* fetchTasks({payload}){\r\n  try {\r\n    let tasks = yield fetch(`http://127.0.0.1:5000/project/${payload}/task`)\r\n    tasks = yield tasks.json()\r\n\r\n    tasks.done\r\n    ? yield put(fetchTasksSuccess(tasks.tasks.tasks))\r\n    : yield put(fetchTasksFailure('Error.'))\r\n  } catch (error) {\r\n    fetchTasksFailure(error)\r\n  }\r\n}\r\n\r\n\r\nexport function* onTaskCreateStart(){\r\n  yield takeLatest(TaskActionTypes.CREATE_TASK_START, createTask)\r\n}\r\n\r\nexport function* onTaskFetchStart(){\r\n  yield takeLatest(TaskActionTypes.FETCH_TASKS_START, fetchTasks)\r\n}\r\n\r\nexport function* taskSagas() {\r\n  yield all([\r\n    call(onTaskCreateStart),\r\n    call(onTaskFetchStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}