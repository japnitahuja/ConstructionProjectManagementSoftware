{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project-punch-list\\\\project-punch-list.jsx\";\nimport React, { Component } from 'react';\nimport { selectCurrentProjectName, selectCurrentProjectPunchlists, selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { TaskNav } from '../../components/task-nav/task-nav.component';\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\nimport PunchLists from '../../components/all-punch-list/all-punch-list.component';\nimport SearchBar from '../../components/search-bar/search-bar.component';\nimport { fetchCurrentProjectStart } from '../../redux/current-project/current-project.actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectPunchList extends Component {\n  constructor() {\n    super();\n\n    this.search = searchedText => {\n      let temp = this.props.punchlists;\n\n      if (searchedText) {\n        temp = temp.filter(({\n          punchListName\n        }) => {\n          return punchListName.toLowerCase().includes(searchedText.toLowerCase());\n        });\n      }\n\n      this.setState({\n        punchlistsList: temp\n      });\n    };\n\n    this.state = {\n      punchlistsList: ''\n    };\n  }\n\n  componentDidMount() {\n    const projectId = this.props.match.params.projectId;\n    this.props.fetchProject(projectId);\n    this.setState({\n      punchlistsList: this.props.punchlists\n    });\n  }\n\n  render() {\n    const {\n      punchlistsList\n    } = this.state;\n    const {\n      projectName\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search Punch Lists...\",\n        search: this.search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), VPOsList.length === 0 ? /*#__PURE__*/_jsxDEV(NoResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 40\n      }, this) : /*#__PURE__*/_jsxDEV(PunchLists, {\n        punchlists: punchlistsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  projectName: selectCurrentProjectName,\n  punchlists: selectCurrentProjectPunchlists\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProject: projectId => dispatch(fetchCurrentProjectStart(projectId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectPunchList);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project-punch-list/project-punch-list.jsx"],"names":["React","Component","selectCurrentProjectName","selectCurrentProjectPunchlists","selectCurrentProjectTasks","createStructuredSelector","connect","TaskNav","LowerNavBar","PunchLists","SearchBar","fetchCurrentProjectStart","ProjectPunchList","constructor","search","searchedText","temp","props","punchlists","filter","punchListName","toLowerCase","includes","setState","punchlistsList","state","componentDidMount","projectId","match","params","fetchProject","render","projectName","VPOsList","length","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,wBAAT,EAAmCC,8BAAnC,EAAmEC,yBAAnE,QAAoG,uDAApG;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,8CAAxB;AACA,OAAOC,WAAP,MAAwB,wDAAxB;AACA,OAAOC,UAAP,MAAuB,0DAAvB;AACA,OAAOC,SAAP,MAAsB,kDAAtB;AACA,SAASC,wBAAT,QAAyC,qDAAzC;;;AAGA,MAAMC,gBAAN,SAA+BX,SAA/B,CAAyC;AACrCY,EAAAA,WAAW,GAAE;AACT;;AADS,SAYbC,MAZa,GAYHC,YAAD,IAAkB;AACvB,UAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,UAAtB;;AAEA,UAAGH,YAAH,EAAgB;AACdC,QAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAY,CAAC;AAACC,UAAAA;AAAD,SAAD,KAAmB;AACpC,iBAAOA,aAAa,CAACC,WAAd,GAA4BC,QAA5B,CAAqCP,YAAY,CAACM,WAAb,EAArC,CAAP;AACD,SAFM,CAAP;AAGD;;AAGD,WAAKE,QAAL,CAAc;AAACC,QAAAA,cAAc,EAAER;AAAjB,OAAd;AAEF,KAxBW;;AAET,SAAKS,KAAL,GAAW;AACPD,MAAAA,cAAc,EAAE;AADT,KAAX;AAGH;;AACDE,EAAAA,iBAAiB,GAAE;AACf,UAAMC,SAAS,GAAG,KAAKV,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBF,SAA1C;AACA,SAAKV,KAAL,CAAWa,YAAX,CAAwBH,SAAxB;AACA,SAAKJ,QAAL,CAAc;AAACC,MAAAA,cAAc,EAAE,KAAKP,KAAL,CAAWC;AAA5B,KAAd;AACH;;AAiBDa,EAAAA,MAAM,GAAG;AACL,UAAM;AAACP,MAAAA;AAAD,QAAmB,KAAKC,KAA9B;AACA,UAAM;AAACO,MAAAA;AAAD,QAAgB,KAAKf,KAA3B;AAEA,wBACK;AAAA,8BACG,QAAC,OAAD;AAAS,QAAA,KAAK,EAAIe;AAAlB;AAAA;AAAA;AAAA;AAAA,cADH,eAEG,QAAC,SAAD;AAAW,QAAA,WAAW,EAAC,uBAAvB;AAA+C,QAAA,MAAM,EAAE,KAAKlB;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFH,EAGImB,QAAQ,CAACC,MAAT,KAAoB,CAApB,gBAAsB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAAtB,gBAAmC,QAAC,UAAD;AAAY,QAAA,UAAU,EAAGV;AAAzB;AAAA;AAAA;AAAA;AAAA,cAHvC,eAIG,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAJH;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AAQH;;AAxCoC;;AA2CzC,MAAMW,eAAe,GAAG9B,wBAAwB,CAAC;AAC7C2B,EAAAA,WAAW,EAAE9B,wBADgC;AAE7CgB,EAAAA,UAAU,EAAEf;AAFiC,CAAD,CAAhD;;AAME,MAAMiC,kBAAkB,GAAIC,QAAD,KAAe;AACxCP,EAAAA,YAAY,EAAGH,SAAD,IAAeU,QAAQ,CAAC1B,wBAAwB,CAACgB,SAAD,CAAzB;AADG,CAAf,CAA3B;;AAIA,eAAerB,OAAO,CAAC6B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CxB,gBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { selectCurrentProjectName, selectCurrentProjectPunchlists, selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport { TaskNav } from '../../components/task-nav/task-nav.component';\r\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\r\nimport PunchLists from '../../components/all-punch-list/all-punch-list.component'\r\nimport SearchBar from '../../components/search-bar/search-bar.component';\r\nimport { fetchCurrentProjectStart } from '../../redux/current-project/current-project.actions';\r\n\r\n\r\nclass ProjectPunchList extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            punchlistsList: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const projectId = this.props.match.params.projectId;\r\n        this.props.fetchProject(projectId);\r\n        this.setState({punchlistsList: this.props.punchlists})\r\n    }\r\n\r\n    search = (searchedText) => {\r\n        let temp = this.props.punchlists\r\n\r\n        if(searchedText){\r\n          temp = temp.filter(({punchListName})=>{\r\n            return punchListName.toLowerCase().includes(searchedText.toLowerCase())\r\n          })\r\n        }\r\n        \r\n     \r\n        this.setState({punchlistsList: temp})\r\n        \r\n     }\r\n\r\n\r\n    render() {\r\n        const {punchlistsList} = this.state;\r\n        const {projectName} = this.props;\r\n\r\n        return (\r\n             <div>\r\n                <TaskNav title = {projectName}/>\r\n                <SearchBar placeholder=\"Search Punch Lists...\" search={this.search}/>\r\n                {VPOsList.length === 0?<NoResult/>: <PunchLists punchlists= {punchlistsList} />}\r\n                <LowerNavBar/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    projectName: selectCurrentProjectName,\r\n    punchlists: selectCurrentProjectPunchlists\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchProject: (projectId) => dispatch(fetchCurrentProjectStart(projectId))\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ProjectPunchList);"]},"metadata":{},"sourceType":"module"}