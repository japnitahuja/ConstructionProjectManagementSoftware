{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\addrole-form\\\\addrole-form.component.js\";\nimport React, { Component } from \"react\";\nimport { LongButton } from \"../long-button/long-button.styles\";\nimport { AddRoleDiv, UsersDiv, UsersDivContent, CheckBox, FormButton } from \"./addrole-form.styles\";\nimport { SmallText } from \"../project-item/project-item.styles\";\nimport { connect } from \"react-redux\";\nimport { inviteUserStart } from \"../../redux/current-project/current-project.actions\";\nimport { createStructuredSelector } from \"reselect\";\nimport { selectCurrentProjectRoles, selectCurrentProjectUsers } from \"../../redux/current-project/current-project.selectors\";\nimport { FormHeading, FormLabel, FormInput, FormDiv } from \"../create-project-form/create-project-form.styles\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddRoleForm extends Component {\n  constructor() {\n    super();\n\n    this.handleOnChange = e => {\n      const {\n        name,\n        value\n      } = e.target;\n      console.log(name, value);\n\n      if (name === \"role\") {\n        this.setState({\n          newRole: value\n        });\n      } else if (name === \"user\") {\n        const {\n          userid\n        } = e.target.dataset;\n        const {\n          checked\n        } = e.target;\n\n        if (checked) {\n          let exists = false;\n          this.state.usersAssigned.map(userId => {\n            if (userId === userid) {\n              exists = true;\n            }\n          });\n\n          if (!exists) {\n            let temp = this.state.usersAssigned;\n            temp.push(userid);\n            this.setState({\n              usersAssigned: temp\n            });\n          }\n        } else if (!checked) {\n          let temp = this.state.usersAssigned;\n          temp = temp.filter(userId => {\n            return !(userId === userid);\n          });\n          this.setState({\n            usersAssigned: temp\n          });\n        }\n      }\n    };\n\n    this.handleOnSubmit = e => {\n      e.preventDefault();\n      let allRoles,\n          updatedUserPermission = [];\n      this.props.projectRoles.map(projectRole => {\n        allRoles.push(projectRole);\n      });\n    };\n\n    this.state = {\n      newRole: '',\n      usersAssigned: []\n    };\n  }\n\n  render() {\n    let {\n      projectUsers,\n      projectRoles\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(AddRoleDiv, {\n      children: [/*#__PURE__*/_jsxDEV(FormHeading, {\n        children: [\"Create a New Role\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.props.exit,\n          style: {\n            textDecoration: 'none',\n            background: 'none',\n            border: 'none',\n            fontSize: '1.4em',\n            color: 'rgba(102,102,102,0.6)'\n          },\n          children: \" \\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FormDiv, {\n        onChange: e => this.handleOnChange(e),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(FormLabel, {\n            htmlFor: \"role\",\n            style: {\n              textAlign: \"left\"\n            },\n            children: \"A role helps assign a specific set of Subjects to a user. Which type of position would you like to create?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n            type: \"text\",\n            value: this.state.newRole,\n            name: \"role\",\n            id: \"role\",\n            onChange: e => this.handleOnChange(e),\n            placeholder: \"ex) Site Manager, Intern \",\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(UsersDiv, {\n          children: projectUsers.map((user, index) => {\n            let unnamed = user.user.email.slice(0, user.user.email.indexOf('@'));\n            return /*#__PURE__*/_jsxDEV(UsersDivContent, {\n              children: [/*#__PURE__*/_jsxDEV(CheckBox, {\n                name: \"user\",\n                id: index,\n                \"data-userid\": user._id,\n                onChange: e => this.handleOnChange(e)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                children: user.user.firstName ? user.user.firstName : unnamed\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 19\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"row\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(FormButton, {\n            border: \"1px solid #000000\",\n            color: \"#3F8CFF\",\n            bgcolor: \"#FFFFFF\",\n            width: \"40%\",\n            onClick: this.props.exit,\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 126,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(FormButton, {\n            border: \"1px solid #3F8CFF\",\n            color: \"#FFFFFF\",\n            bgcolor: \"#3F8CFF\",\n            width: \"40%\",\n            onClick: this.props.handleOnSubmit,\n            children: \"Create\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  projectRoles: selectCurrentProjectRoles,\n  projectUsers: selectCurrentProjectUsers\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AddRoleForm);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/addrole-form/addrole-form.component.js"],"names":["React","Component","LongButton","AddRoleDiv","UsersDiv","UsersDivContent","CheckBox","FormButton","SmallText","connect","inviteUserStart","createStructuredSelector","selectCurrentProjectRoles","selectCurrentProjectUsers","FormHeading","FormLabel","FormInput","FormDiv","AddRoleForm","constructor","handleOnChange","e","name","value","target","console","log","setState","newRole","userid","dataset","checked","exists","state","usersAssigned","map","userId","temp","push","filter","handleOnSubmit","preventDefault","allRoles","updatedUserPermission","props","projectRoles","projectRole","render","projectUsers","exit","textDecoration","background","border","fontSize","color","textAlign","user","index","unnamed","email","slice","indexOf","_id","firstName","display","flexDirection","justifyContent","alignItems","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { LongButton } from \"../long-button/long-button.styles\";\r\nimport { AddRoleDiv, UsersDiv, UsersDivContent, CheckBox, FormButton } from \"./addrole-form.styles\";\r\nimport { SmallText } from \"../project-item/project-item.styles\";\r\nimport { connect } from \"react-redux\";\r\nimport { inviteUserStart } from \"../../redux/current-project/current-project.actions\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { selectCurrentProjectRoles, selectCurrentProjectUsers } from \"../../redux/current-project/current-project.selectors\";\r\nimport {FormHeading, FormLabel, FormInput, FormDiv} from \"../create-project-form/create-project-form.styles\"\r\n\r\nclass AddRoleForm extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      newRole:'',\r\n      usersAssigned: []\r\n\r\n    };\r\n  }\r\n\r\n  handleOnChange = (e) => {\r\n    const { name, value } = e.target;\r\n    console.log(name, value)\r\n    if(name===\"role\"){\r\n      this.setState({newRole: value})\r\n    }\r\n    else if(name===\"user\"){\r\n      const {userid} = e.target.dataset;\r\n      const { checked } = e.target;\r\n\r\n      if(checked){\r\n        \r\n        let exists = false;\r\n        this.state.usersAssigned.map((userId) => {\r\n          if(userId === userid){\r\n            exists = true;\r\n        }})\r\n        if(!exists){\r\n          \r\n          let temp = this.state.usersAssigned\r\n          temp.push(userid)\r\n          this.setState({usersAssigned:temp})\r\n        }\r\n    }\r\n\r\n    else if(!checked){\r\n      \r\n      let temp = this.state.usersAssigned\r\n      temp = temp.filter((userId) => {return !(userId === userid)})\r\n      this.setState({usersAssigned:temp})\r\n    } \r\n    }\r\n    \r\n  }\r\n\r\n  handleOnSubmit = (e) => {\r\n    e.preventDefault()\r\n\r\n    let allRoles, updatedUserPermission = []\r\n\r\n    this.props.projectRoles.map((projectRole)=> {\r\n      allRoles.push(projectRole)\r\n    })\r\n  }\r\n  \r\n  render() {\r\n    let {projectUsers, projectRoles} = this.props;\r\n    \r\n    return (\r\n      <AddRoleDiv>\r\n        <FormHeading>\r\n            Create a New Role\r\n            <button  onClick={this.props.exit} style={{textDecoration:'none', \r\n                            background: 'none', \r\n                            border: 'none', \r\n                            fontSize:'1.4em', \r\n                            color:'rgba(102,102,102,0.6)'}}> &times;</button>\r\n        </FormHeading>\r\n        <br/>\r\n\r\n        <FormDiv onChange={(e) => this.handleOnChange(e)} >\r\n          <div>\r\n            <FormLabel htmlFor=\"role\" style={{textAlign:\"left\"}}> \r\n              A role helps assign a specific set of Subjects to a user. \r\n              Which type of position would you like to create?\r\n            </FormLabel>\r\n            <br/>\r\n            <br/>\r\n            <FormInput\r\n              type=\"text\"\r\n              value={this.state.newRole}\r\n              name=\"role\"\r\n              id=\"role\"\r\n              onChange={(e) => this.handleOnChange(e)}\r\n              placeholder = \"ex) Site Manager, Intern \"\r\n              required />\r\n          </div>\r\n\r\n          <UsersDiv>\r\n          {\r\n            projectUsers.map((user, index)=> {\r\n              let unnamed = user.user.email.slice(0,user.user.email.indexOf('@'));\r\n              \r\n              return(\r\n                <UsersDivContent key={index}>\r\n                  <CheckBox\r\n                  name=\"user\"\r\n                  id={index}\r\n                  data-userid = {user._id}\r\n                  onChange={(e) => this.handleOnChange(e)}\r\n                  ></CheckBox>\r\n                  <label>{user.user.firstName?user.user.firstName:unnamed}</label>\r\n                </UsersDivContent>\r\n\r\n              )\r\n            })\r\n          }\r\n          </UsersDiv>\r\n          \r\n          <div style={{\r\n               display:\"flex\",\r\n               flexDirection:\"row\",\r\n               justifyContent: \"space-between\", \r\n               alignItems: \"center\"\r\n          }}>\r\n          <FormButton \r\n            border=\"1px solid #000000\"\r\n            color=\"#3F8CFF\"\r\n            bgcolor = \"#FFFFFF\"\r\n            width=\"40%\"\r\n            onClick={this.props.exit}\r\n          > \r\n          Cancel\r\n          </FormButton>\r\n          <FormButton \r\n            border=\"1px solid #3F8CFF\"\r\n            color=\"#FFFFFF\"\r\n            bgcolor = \"#3F8CFF\"\r\n            width=\"40%\"\r\n            onClick={this.props.handleOnSubmit}\r\n          > \r\n          Create\r\n          </FormButton>\r\n\r\n          </div>\r\n         \r\n        </FormDiv>\r\n      </AddRoleDiv>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  projectRoles: selectCurrentProjectRoles,\r\n  projectUsers: selectCurrentProjectUsers\r\n\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  \r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AddRoleForm);\r\n"]},"metadata":{},"sourceType":"module"}