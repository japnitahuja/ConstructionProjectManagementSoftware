{"ast":null,"code":"import { all, call, put, select, takeLatest } from \"redux-saga/effects\";\nimport { onTaskCompletionStart } from \"../current-task/current-task.sagas\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { createOrganisationFail, createOrganisationSucessful, fetchAllOrganisationFailure, fetchAllOrganisationSuccess, fetchOrganisationFailure, fetchOrganisationSuccess } from \"./organisation.actions\";\nimport { OrganisationActionTypes } from \"./organisation.types\";\nexport function* fetchAllOrganisations({\n  payload\n}) {\n  let userId = yield select(selectUserId);\n\n  try {\n    let organisation = yield fetch(`http://127.0.0.1:5000/organisation/${userId}`);\n    organisation = yield organisation.json();\n    organisation.done ? yield put(fetchAllOrganisationSuccess(organisation.org)) : yield put(fetchAllOrganisationFailure('error!'));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* createOrganisation({\n  payload\n}) {\n  let userId = yield select(selectUserId);\n  let data = payload;\n\n  try {\n    let org = yield fetch(`http://127.0.0.1:5000/create-organisation/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    org = yield org.json();\n    org.done ? yield put(createOrganisationSucessful(org.message)) : yield put(createOrganisationFail('error!'));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchOrganisation({\n  payload\n}) {\n  let orgId = payload;\n\n  try {\n    let organisation = yield fetch(`http://127.0.0.1:5000/org/${orgId}`);\n    organisation = yield organisation.json();\n    organisation.done ? yield put(fetchOrganisationSuccess(organisation.org)) : yield put(fetchOrganisationFailure('error!'));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onFetchAllOrganisations() {\n  yield takeLatest(OrganisationActionTypes.FETCH_ALL_ORGANISATIONS_START, fetchAllOrganisations);\n}\nexport function* onCreateOrganisationStart() {\n  yield takeLatest(OrganisationActionTypes.CREATE_ORGANISATION_START, createOrganisation);\n}\nexport function* onFetchOrganisationStart() {\n  yield takeLatest(OrganisationActionTypes.FETCH_ORGANISATION_START, fetchOrganisation);\n}\nexport function* organisationSagas() {\n  yield all([call(onFetchAllOrganisations), call(onCreateOrganisationStart), call(onFetchOrganisationStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/organisation/organisation.sagas.js"],"names":["all","call","put","select","takeLatest","onTaskCompletionStart","selectUserId","createOrganisationFail","createOrganisationSucessful","fetchAllOrganisationFailure","fetchAllOrganisationSuccess","fetchOrganisationFailure","fetchOrganisationSuccess","OrganisationActionTypes","fetchAllOrganisations","payload","userId","organisation","fetch","json","done","org","error","console","log","createOrganisation","data","method","headers","body","JSON","stringify","message","fetchOrganisation","orgId","onFetchAllOrganisations","FETCH_ALL_ORGANISATIONS_START","onCreateOrganisationStart","CREATE_ORGANISATION_START","onFetchOrganisationStart","FETCH_ORGANISATION_START","organisationSagas"],"mappings":"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","sourcesContent":["import { all, call, put, select, takeLatest } from \"redux-saga/effects\";\r\nimport { onTaskCompletionStart } from \"../current-task/current-task.sagas\";\r\nimport { selectUserId } from \"../user/user.selectors\";\r\nimport { createOrganisationFail, createOrganisationSucessful, fetchAllOrganisationFailure, fetchAllOrganisationSuccess, fetchOrganisationFailure, fetchOrganisationSuccess } from \"./organisation.actions\";\r\nimport { OrganisationActionTypes } from \"./organisation.types\";\r\n\r\nexport function* fetchAllOrganisations({payload}){\r\n    let userId = yield select(selectUserId)\r\n    \r\n    try {\r\n        let organisation = yield fetch(`http://127.0.0.1:5000/organisation/${userId}`)\r\n        organisation = yield organisation.json()\r\n        organisation.done?\r\n        yield put(fetchAllOrganisationSuccess(organisation.org))\r\n        : yield put(fetchAllOrganisationFailure('error!'))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport function* createOrganisation({payload}){\r\n    let userId = yield select(selectUserId)\r\n    let data = payload\r\n    try {\r\n        let org = yield fetch(\r\n            `http://127.0.0.1:5000/create-organisation/${userId}`,\r\n            {\r\n              method: \"POST\",\r\n              headers: {\r\n                \"Content-Type\": \"application/json\",\r\n              },\r\n              body: JSON.stringify(data),\r\n            }\r\n          );\r\n          org = yield org.json();\r\n          org.done\r\n            ? yield put(createOrganisationSucessful(org.message))\r\n            : yield put(createOrganisationFail('error!'));\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport function* fetchOrganisation({payload}){\r\n    let orgId = payload\r\n    try {\r\n        let organisation = yield fetch(`http://127.0.0.1:5000/org/${orgId}`)\r\n        organisation = yield organisation.json()\r\n        organisation.done?\r\n        yield put(fetchOrganisationSuccess(organisation.org))\r\n        : yield put(fetchOrganisationFailure('error!'))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport function* onFetchAllOrganisations(){\r\n    yield takeLatest(OrganisationActionTypes.FETCH_ALL_ORGANISATIONS_START, fetchAllOrganisations)\r\n}\r\n\r\nexport function* onCreateOrganisationStart(){\r\n    yield takeLatest(OrganisationActionTypes.CREATE_ORGANISATION_START, createOrganisation)\r\n}\r\n\r\nexport function* onFetchOrganisationStart(){\r\n    yield takeLatest(OrganisationActionTypes.FETCH_ORGANISATION_START, fetchOrganisation)\r\n}\r\n\r\nexport function* organisationSagas(){\r\n    yield all([\r\n        call(onFetchAllOrganisations),\r\n        call(onCreateOrganisationStart),\r\n        call(onFetchOrganisationStart)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}