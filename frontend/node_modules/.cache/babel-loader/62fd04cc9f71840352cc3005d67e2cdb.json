{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\gantt-chart\\\\gantt-chart.component.jsx\";\nimport React, { Component } from 'react';\nimport { gantt } from 'dhtmlx-gantt';\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = {\n  data: [{\n    id: 1,\n    text: 'Task #1',\n    start_date: '15-04-2019',\n    duration: 3,\n    progress: 0.6\n  }, {\n    id: 2,\n    text: 'Task #2',\n    start_date: '18-04-2019',\n    duration: 3,\n    progress: 0.4\n  }],\n  links: [{\n    id: 1,\n    source: 1,\n    target: 2,\n    type: '0'\n  }]\n};\nexport default class Gantt extends Component {\n  constructor(props) {\n    super(props);\n    this.dataProcessor = null;\n  }\n\n  componentDidMount() {\n    gantt.init(this.ganttContainer);\n    this.initGanttDataProcessor();\n    gantt.parse(data);\n  }\n\n  initGanttDataProcessor() {\n    /**\r\n     * type: \"task\"|\"link\"\r\n     * action: \"create\"|\"update\"|\"delete\"\r\n     * item: data object object\r\n     */\n    const onDataUpdated = this.props.onDataUpdated;\n    console.log(onDataUpdated);\n    this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\n      return new Promise((resolve, reject) => {\n        if (onDataUpdated) {\n          onDataUpdated(type, action, item, id);\n        } // if onDataUpdated changes returns a permanent id of the created item, you can return it from here so dhtmlxGantt could apply it\n        // resolve({id: databaseId});\n\n\n        return resolve();\n      });\n    });\n  }\n\n  componentWillUnmount() {\n    if (this.dataProcessor) {\n      this.dataProcessor.destructor();\n      this.dataProcessor = null;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: input => {\n        this.ganttContainer = input;\n      },\n      style: {\n        width: '100%',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 12\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/gantt-chart/gantt-chart.component.jsx"],"names":["React","Component","gantt","data","id","text","start_date","duration","progress","links","source","target","type","Gantt","constructor","props","dataProcessor","componentDidMount","init","ganttContainer","initGanttDataProcessor","parse","onDataUpdated","console","log","createDataProcessor","action","item","Promise","resolve","reject","componentWillUnmount","destructor","render","input","width","height"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,OAAO,uCAAP;;AAEA,MAAMC,IAAI,GAAG;AACTA,EAAAA,IAAI,EAAE,CACF;AAAEC,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,SAAf;AAA0BC,IAAAA,UAAU,EAAE,YAAtC;AAAoDC,IAAAA,QAAQ,EAAE,CAA9D;AAAiEC,IAAAA,QAAQ,EAAE;AAA3E,GADE,EAEF;AAAEJ,IAAAA,EAAE,EAAE,CAAN;AAASC,IAAAA,IAAI,EAAE,SAAf;AAA0BC,IAAAA,UAAU,EAAE,YAAtC;AAAoDC,IAAAA,QAAQ,EAAE,CAA9D;AAAiEC,IAAAA,QAAQ,EAAE;AAA3E,GAFE,CADG;AAKTC,EAAAA,KAAK,EAAE,CACH;AAAEL,IAAAA,EAAE,EAAE,CAAN;AAASM,IAAAA,MAAM,EAAE,CAAjB;AAAoBC,IAAAA,MAAM,EAAE,CAA5B;AAA+BC,IAAAA,IAAI,EAAE;AAArC,GADG;AALE,CAAb;AAUA,eAAe,MAAMC,KAAN,SAAoBZ,SAApB,CAA8B;AAEzCa,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AADe,SAInBC,aAJmB,GAIH,IAJG;AAElB;;AAIDC,EAAAA,iBAAiB,GAAG;AAChBf,IAAAA,KAAK,CAACgB,IAAN,CAAW,KAAKC,cAAhB;AACA,SAAKC,sBAAL;AACAlB,IAAAA,KAAK,CAACmB,KAAN,CAAYlB,IAAZ;AACH;;AAEDiB,EAAAA,sBAAsB,GAAG;AACrB;AACR;AACA;AACA;AACA;AACQ,UAAME,aAAa,GAAG,KAAKP,KAAL,CAAWO,aAAjC;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYF,aAAZ;AACA,SAAKN,aAAL,GAAqBd,KAAK,CAACuB,mBAAN,CAA0B,CAACb,IAAD,EAAOc,MAAP,EAAeC,IAAf,EAAqBvB,EAArB,KAA4B;AACzE,aAAO,IAAIwB,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAIR,aAAJ,EAAmB;AACjBA,UAAAA,aAAa,CAACV,IAAD,EAAOc,MAAP,EAAeC,IAAf,EAAqBvB,EAArB,CAAb;AACD,SAHqC,CAKtC;AACA;;;AACA,eAAOyB,OAAO,EAAd;AACD,OARM,CAAP;AASD,KAVoB,CAArB;AAWD;;AAEHE,EAAAA,oBAAoB,GAAG;AACnB,QAAI,KAAKf,aAAT,EAAwB;AACpB,WAAKA,aAAL,CAAmBgB,UAAnB;AACA,WAAKhB,aAAL,GAAqB,IAArB;AACH;AACJ;;AAEDiB,EAAAA,MAAM,GAAG;AACN,wBACI;AACK,MAAA,GAAG,EAAIC,KAAD,IAAW;AAAE,aAAKf,cAAL,GAAsBe,KAAtB;AAA6B,OADrD;AAEK,MAAA,KAAK,EAAG;AAAEC,QAAAA,KAAK,EAAE,MAAT;AAAiBC,QAAAA,MAAM,EAAE;AAAzB;AAFb;AAAA;AAAA;AAAA;AAAA,YADJ;AAMF;;AAjDwC","sourcesContent":["import React, { Component } from 'react';\r\nimport { gantt } from 'dhtmlx-gantt';\r\nimport 'dhtmlx-gantt/codebase/dhtmlxgantt.css';\r\n\r\nconst data = {\r\n    data: [\r\n        { id: 1, text: 'Task #1', start_date: '15-04-2019', duration: 3, progress: 0.6 },\r\n        { id: 2, text: 'Task #2', start_date: '18-04-2019', duration: 3, progress: 0.4 }\r\n    ],\r\n    links: [\r\n        { id: 1, source: 1, target: 2, type: '0' }\r\n    ]\r\n};\r\n \r\nexport default class Gantt extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    }\r\n\r\n    dataProcessor = null;\r\n\r\n    componentDidMount() {\r\n        gantt.init(this.ganttContainer);\r\n        this.initGanttDataProcessor();\r\n        gantt.parse(data);\r\n    }\r\n\r\n    initGanttDataProcessor() {\r\n        /**\r\n         * type: \"task\"|\"link\"\r\n         * action: \"create\"|\"update\"|\"delete\"\r\n         * item: data object object\r\n         */\r\n        const onDataUpdated = this.props.onDataUpdated;\r\n        console.log(onDataUpdated)\r\n        this.dataProcessor = gantt.createDataProcessor((type, action, item, id) => {\r\n          return new Promise((resolve, reject) => {\r\n            if (onDataUpdated) {\r\n              onDataUpdated(type, action, item, id);\r\n            }\r\n    \r\n            // if onDataUpdated changes returns a permanent id of the created item, you can return it from here so dhtmlxGantt could apply it\r\n            // resolve({id: databaseId});\r\n            return resolve();\r\n          });\r\n        });\r\n      }\r\n\r\n    componentWillUnmount() {\r\n        if (this.dataProcessor) {\r\n            this.dataProcessor.destructor();\r\n            this.dataProcessor = null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n       return (\r\n           <div\r\n                ref={ (input) => { this.ganttContainer = input } }\r\n                style={ { width: '100%', height: '100vh' } }\r\n            ></div>\r\n       );\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}