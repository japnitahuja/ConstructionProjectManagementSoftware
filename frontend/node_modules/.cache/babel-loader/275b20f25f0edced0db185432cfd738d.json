{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\task\\\\task.page.js\";\nimport React, { Component } from 'react';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CreateStepForm from '../../components/create-step-form/create-step-form.component';\nimport { completeCurrentTaskStart, fetchCurrentTaskStart } from '../../redux/current-task/current-task.actions';\nimport { selectCurrentTaskCompletionMessage, selectCurrentTaskIsDone, selectCurrentTaskName, selectCurrentTaskSteps } from '../../redux/current-task/current-task.selectors';\nimport { Link } from 'react-router-dom';\nimport StepPageTaskNav from '../../components/step-page-task-nav/step-page-task-nav.component';\nimport StepNavBar from '../../components/step-navbar/step-navbar.component';\nimport StepListContainer from '../../components/steps-list/steps-list.container';\nimport { selectCurrentProjectId } from \"../../redux/current-project/current-project.selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Task extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.completeTask = () => {\n      const taskId = this.props.match.params.taskId;\n      this.props.completeTask(taskId);\n    };\n  }\n\n  componentDidMount() {\n    const taskId = this.props.match.params.taskId;\n    this.props.fetchSteps(taskId);\n    console.log(taskId);\n  }\n\n  render() {\n    const {\n      steps,\n      projectId,\n      taskName,\n      isTaskDone,\n      taskCompletionMessage\n    } = this.props;\n    console.log('task page');\n    console.log(steps);\n    const taskId = this.props.match.params.taskId;\n    console.log(taskId);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StepPageTaskNav, {\n        projectId: projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StepNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StepListContainer, {\n        steps: steps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: taskCompletionMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(CreateStepForm, {\n        taskId: this.props.match.params.taskId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/purchaseOrders/${taskId}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"PURCHASE ORDERS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), isTaskDone ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"TASK IS DONE!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 22\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.completeTask,\n        children: \"COMPLETE TASK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  steps: selectCurrentTaskSteps,\n  taskName: selectCurrentTaskName,\n  isTaskDone: selectCurrentTaskIsDone,\n  taskCompletionMessage: selectCurrentTaskCompletionMessage,\n  projectId: selectCurrentProjectId,\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  stepId: selectCurrentStepId,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone,\n  taskId: selectCurrentTaskId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSteps: taskId => dispatch(fetchCurrentTaskStart(taskId)),\n  completeTask: taskId => dispatch(completeCurrentTaskStart(taskId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Task);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/task/task.page.js"],"names":["React","Component","createStructuredSelector","connect","CreateStepForm","completeCurrentTaskStart","fetchCurrentTaskStart","selectCurrentTaskCompletionMessage","selectCurrentTaskIsDone","selectCurrentTaskName","selectCurrentTaskSteps","Link","StepPageTaskNav","StepNavBar","StepListContainer","selectCurrentProjectId","Task","completeTask","taskId","props","match","params","componentDidMount","fetchSteps","console","log","render","steps","projectId","taskName","isTaskDone","taskCompletionMessage","mapStateToProps","stepName","selectCurrentStepName","stepQuestion","selectCurrentStepQuestion","isStepQuestionAnswered","selectCurrentStepQuestionAnswered","stepId","selectCurrentStepId","questionCompletion","selectCurrentStepQuestionAnswerConfirmation","stepCompletionMessage","selectCurrentStepCompletionMessage","isStepDone","selectCurrentStepIsDone","selectCurrentTaskId","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport CreateStepForm from '../../components/create-step-form/create-step-form.component';\r\nimport { completeCurrentTaskStart, fetchCurrentTaskStart } from '../../redux/current-task/current-task.actions';\r\nimport { selectCurrentTaskCompletionMessage, selectCurrentTaskIsDone, selectCurrentTaskName, selectCurrentTaskSteps } from '../../redux/current-task/current-task.selectors';\r\nimport { Link } from 'react-router-dom';\r\nimport StepPageTaskNav from '../../components/step-page-task-nav/step-page-task-nav.component';\r\nimport StepNavBar from '../../components/step-navbar/step-navbar.component';\r\nimport StepListContainer from '../../components/steps-list/steps-list.container';\r\nimport {selectCurrentProjectId} from \"../../redux/current-project/current-project.selectors\"\r\n\r\nclass Task extends Component {\r\n    componentDidMount(){\r\n        const taskId = this.props.match.params.taskId\r\n       this.props.fetchSteps(taskId)\r\n       console.log(taskId)\r\n    }\r\n    \r\n    completeTask = () => {\r\n        const taskId = this.props.match.params.taskId\r\n        this.props.completeTask(taskId)\r\n        \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const {steps,projectId, taskName, isTaskDone, taskCompletionMessage} = this.props;\r\n        console.log('task page')\r\n        console.log(steps)\r\n        const taskId = this.props.match.params.taskId\r\n        console.log(taskId)\r\n        return (\r\n            <div>\r\n                <StepPageTaskNav projectId = {projectId}/>\r\n                <StepNavBar />\r\n                {/* <TaskList tasks = {tasks}/> */}\r\n                <StepListContainer steps = {steps} />\r\n                <br></br>\r\n                 <h3>{taskCompletionMessage}</h3>\r\n                <CreateStepForm taskId = {this.props.match.params.taskId} />\r\n                <Link to={`/purchaseOrders/${taskId}`}><button>PURCHASE ORDERS</button></Link>\r\n                {\r\n                     isTaskDone ? \r\n                     <div>TASK IS DONE!</div> : \r\n                     <button onClick={this.completeTask}>COMPLETE TASK</button> \r\n                 }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    steps: selectCurrentTaskSteps,\r\n    taskName: selectCurrentTaskName,\r\n    isTaskDone: selectCurrentTaskIsDone,\r\n    taskCompletionMessage: selectCurrentTaskCompletionMessage,\r\n    projectId: selectCurrentProjectId,\r\n    stepName: selectCurrentStepName,\r\n    stepQuestion: selectCurrentStepQuestion,\r\n    isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n    stepId: selectCurrentStepId,\r\n    questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n    stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n    isStepDone: selectCurrentStepIsDone,\r\n    taskId: selectCurrentTaskId\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchSteps : (taskId) => dispatch(fetchCurrentTaskStart(taskId)),\r\n    completeTask: (taskId) => dispatch(completeCurrentTaskStart(taskId))\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(Task);"]},"metadata":{},"sourceType":"module"}