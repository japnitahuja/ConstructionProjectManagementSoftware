{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project-change-orders\\\\project-change-orders.page.js\";\nimport React, { Component } from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport PurchaseOrderList from \"../../components/purchase-orders-list/purchase-orders-list.component\";\nimport { selectCurrentProjectChangeOrders, selectCurrentProjectName, selectCurrentProjectPurchaseOrders } from \"../../redux/current-project/current-project.selectors\";\nimport { fetchCurrentProjectStart } from \"../../redux/current-project/current-project.actions\";\nimport LowerNavBar from \"../../components/lower-nav-bar/lower-nav-bar.component\";\nimport PurchaseOrderListContainer from \"../../components/purchase-orders-list/purchase-order-lists.container\";\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\nimport ChangeOrderList from \"../../components/change-orders-list/change-orders-list.component\";\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\nimport NoResult from \"../../components/no-result/no-result.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectChangeOrders extends Component {\n  constructor() {\n    super();\n\n    this.search = searchedText => {\n      let temp = this.props.changeOrders;\n\n      if (searchedText) {\n        temp = temp.filter(({\n          purchasedItem\n        }) => {\n          return purchasedItem.toLowerCase().includes(searchedText.toLowerCase());\n        });\n      }\n\n      this.setState({\n        VPOsList: temp\n      });\n    };\n\n    this.toggleSearch = () => {\n      this.setState(prevState => {\n        showSearch: !showSearch;\n      });\n    };\n\n    this.state = {\n      VPOsList: \"\",\n      showSearch: false\n    };\n  }\n\n  componentDidMount() {\n    const projectId = this.props.match.params.projectId;\n    this.props.fetchProject(projectId);\n    this.setState({\n      VPOsList: this.props.changeOrders\n    });\n  }\n\n  render() {\n    const {\n      changeOrders,\n      projectName\n    } = this.props;\n    const {\n      VPOsList\n    } = this.state;\n    console.log(changeOrders);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName,\n        toggleSearch: this.toggleSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search variance POs...\",\n        search: this.search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), VPOsList.length === 0 ? /*#__PURE__*/_jsxDEV(NoResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChangeOrderList, {\n        changeOrders: VPOsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  changeOrders: selectCurrentProjectChangeOrders,\n  projectName: selectCurrentProjectName\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProject: projectId => dispatch(fetchCurrentProjectStart(projectId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectChangeOrders);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project-change-orders/project-change-orders.page.js"],"names":["React","Component","createStructuredSelector","connect","PurchaseOrderList","selectCurrentProjectChangeOrders","selectCurrentProjectName","selectCurrentProjectPurchaseOrders","fetchCurrentProjectStart","LowerNavBar","PurchaseOrderListContainer","TaskNav","ChangeOrderList","SearchBar","NoResult","ProjectChangeOrders","constructor","search","searchedText","temp","props","changeOrders","filter","purchasedItem","toLowerCase","includes","setState","VPOsList","toggleSearch","prevState","showSearch","state","componentDidMount","projectId","match","params","fetchProject","render","projectName","console","log","length","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport PurchaseOrderList from \"../../components/purchase-orders-list/purchase-orders-list.component\";\r\nimport {\r\n  selectCurrentProjectChangeOrders,\r\n  selectCurrentProjectName,\r\n  selectCurrentProjectPurchaseOrders,\r\n} from \"../../redux/current-project/current-project.selectors\";\r\nimport { fetchCurrentProjectStart } from \"../../redux/current-project/current-project.actions\";\r\nimport LowerNavBar from \"../../components/lower-nav-bar/lower-nav-bar.component\";\r\nimport PurchaseOrderListContainer from \"../../components/purchase-orders-list/purchase-order-lists.container\";\r\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\r\nimport ChangeOrderList from \"../../components/change-orders-list/change-orders-list.component\";\r\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\r\nimport NoResult from \"../../components/no-result/no-result.component\";\r\n\r\nclass ProjectChangeOrders extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      VPOsList: \"\",\r\n      showSearch: false,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const projectId = this.props.match.params.projectId;\r\n    this.props.fetchProject(projectId);\r\n    this.setState({ VPOsList: this.props.changeOrders });\r\n  }\r\n\r\n  search = (searchedText) => {\r\n    let temp = this.props.changeOrders;\r\n\r\n    if (searchedText) {\r\n      temp = temp.filter(({ purchasedItem }) => {\r\n        return purchasedItem.toLowerCase().includes(searchedText.toLowerCase());\r\n      });\r\n    }\r\n\r\n    this.setState({ VPOsList: temp });\r\n  };\r\n\r\n  toggleSearch = () => {\r\n    this.setState((prevState) => {\r\n      showSearch: !showSearch;\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { changeOrders, projectName } = this.props;\r\n    const { VPOsList } = this.state;\r\n    console.log(changeOrders);\r\n\r\n    return (\r\n      <div>\r\n        <TaskNav title={projectName} toggleSearch={this.toggleSearch} />\r\n        <SearchBar placeholder=\"Search variance POs...\" search={this.search} />\r\n        {VPOsList.length === 0 ? (\r\n          <NoResult />\r\n        ) : (\r\n          <ChangeOrderList changeOrders={VPOsList} />\r\n        )}\r\n        <LowerNavBar />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  changeOrders: selectCurrentProjectChangeOrders,\r\n  projectName: selectCurrentProjectName,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchProject: (projectId) => dispatch(fetchCurrentProjectStart(projectId)),\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(ProjectChangeOrders);\r\n"]},"metadata":{},"sourceType":"module"}