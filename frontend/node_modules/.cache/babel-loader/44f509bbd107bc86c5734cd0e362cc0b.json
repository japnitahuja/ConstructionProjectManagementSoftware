{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { completeCurrentTaskFailure, completeCurrentTaskSuccess, fetchCurrentTaskFailure, fetchCurrentTaskSuccess } from \"./current-task.actions\";\nimport { CurrentTaskActionTypes } from \"./current-task.types\";\nexport function* fetchCurrentTask({\n  payload\n}) {\n  try {\n    const taskId = payload;\n    console.log(taskId);\n    let currentTask = yield fetch(`http://127.0.0.1:5000/task/${taskId}`);\n    currentTask = yield currentTask.json();\n    currentTask.done ? yield put(fetchCurrentTaskSuccess(currentTask.task)) : yield put(fetchCurrentTaskFailure('CURRENT PROJECCT FETTCHING FAILED'));\n  } catch (error) {\n    fetchCurrentTaskFailure(error);\n  }\n}\nexport function* completeTask({\n  payload\n}) {\n  let taskId = payload;\n\n  try {\n    let taskCompletion = yield fetch(`http://127.0.0.1:5000/complete-task/${taskId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    taskCompletion = yield taskCompletion.json();\n    taskCompletion.done ? yield put(completeCurrentTaskSuccess(taskCompletion.message)) : yield put(completeCurrentTaskFailure(taskCompletion.error));\n  } catch (error) {\n    console.log(error);\n    yield put(completeCurrentTaskFailure(error));\n  }\n}\nexport function* onCurrentTaskFetchStart() {\n  yield takeLatest(CurrentTaskActionTypes.FETCH_CURRENT_TASK_START, fetchCurrentTask);\n}\nexport function* onTaskCompletionStart() {\n  yield takeLatest(CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START, completeTask);\n}\nexport function* currentTaskSagas() {\n  yield all([call(onCurrentTaskFetchStart), call(onTaskCompletionStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/current-task/current-task.sagas.js"],"names":["all","call","put","takeLatest","select","selectUserId","completeCurrentTaskFailure","completeCurrentTaskSuccess","fetchCurrentTaskFailure","fetchCurrentTaskSuccess","CurrentTaskActionTypes","fetchCurrentTask","payload","taskId","console","log","currentTask","fetch","json","done","task","error","completeTask","taskCompletion","method","headers","message","onCurrentTaskFetchStart","FETCH_CURRENT_TASK_START","onTaskCompletionStart","COMPLETE_CURRENT_TASK_START","currentTaskSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAkD,oBAAlD;AACA,SAASC,YAAT,QAA6B,wBAA7B;AACA,SAASC,0BAAT,EAAqCC,0BAArC,EAAiEC,uBAAjE,EAA0FC,uBAA1F,QAAyH,wBAAzH;AACA,SAASC,sBAAT,QAAuC,sBAAvC;AAEA,OAAO,UAAUC,gBAAV,CAA2B;AAACC,EAAAA;AAAD,CAA3B,EAAqC;AAC1C,MAAI;AACA,UAAMC,MAAM,GAAGD,OAAf;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACF,QAAIG,WAAW,GAAG,MAAMC,KAAK,CAAE,8BAA6BJ,MAAO,EAAtC,CAA7B;AACAG,IAAAA,WAAW,GAAG,MAAMA,WAAW,CAACE,IAAZ,EAApB;AACAF,IAAAA,WAAW,CAACG,IAAZ,GACE,MAAMjB,GAAG,CAACO,uBAAuB,CAACO,WAAW,CAACI,IAAb,CAAxB,CADX,GAEE,MAAMlB,GAAG,CAACM,uBAAuB,CAAC,mCAAD,CAAxB,CAFX;AAGD,GARD,CAQE,OAAOa,KAAP,EAAc;AACdb,IAAAA,uBAAuB,CAACa,KAAD,CAAvB;AACD;AACF;AAED,OAAO,UAAUC,YAAV,CAAuB;AAACV,EAAAA;AAAD,CAAvB,EAAiC;AACtC,MAAIC,MAAM,GAAGD,OAAb;;AACA,MAAI;AACF,QAAIW,cAAc,GAAG,MAAMN,KAAK,CAAE,uCAAsCJ,MAAO,EAA/C,EAAkD;AAChFW,MAAAA,MAAM,EAAE,MADwE;AAEhFC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT;AAFuE,KAAlD,CAAhC;AAMAF,IAAAA,cAAc,GAAG,MAAMA,cAAc,CAACL,IAAf,EAAvB;AACAK,IAAAA,cAAc,CAACJ,IAAf,GACA,MAAMjB,GAAG,CAACK,0BAA0B,CAACgB,cAAc,CAACG,OAAhB,CAA3B,CADT,GAEA,MAAMxB,GAAG,CAACI,0BAA0B,CAACiB,cAAc,CAACF,KAAhB,CAA3B,CAFT;AAGD,GAXD,CAWE,OAAOA,KAAP,EAAc;AACdP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACA,UAAMnB,GAAG,CAACI,0BAA0B,CAACe,KAAD,CAA3B,CAAT;AACD;AACF;AAED,OAAO,UAAUM,uBAAV,GAAmC;AACxC,QAAMxB,UAAU,CAACO,sBAAsB,CAACkB,wBAAxB,EAAmDjB,gBAAnD,CAAhB;AACD;AAED,OAAO,UAAUkB,qBAAV,GAAiC;AACtC,QAAM1B,UAAU,CAACO,sBAAsB,CAACoB,2BAAxB,EAAqDR,YAArD,CAAhB;AACD;AAED,OAAO,UAAUS,gBAAV,GAA6B;AAClC,QAAM/B,GAAG,CAAC,CACRC,IAAI,CAAC0B,uBAAD,CADI,EAER1B,IAAI,CAAC4B,qBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { selectUserId } from \"../user/user.selectors\"\r\nimport { completeCurrentTaskFailure, completeCurrentTaskSuccess, fetchCurrentTaskFailure, fetchCurrentTaskSuccess } from \"./current-task.actions\";\r\nimport { CurrentTaskActionTypes } from \"./current-task.types\";\r\n\r\nexport function* fetchCurrentTask({payload}){\r\n  try {\r\n      const taskId = payload\r\n      console.log(taskId)\r\n    let currentTask = yield fetch(`http://127.0.0.1:5000/task/${taskId}`)\r\n    currentTask = yield currentTask.json()\r\n    currentTask.done\r\n    ? yield put(fetchCurrentTaskSuccess(currentTask.task))\r\n    : yield put(fetchCurrentTaskFailure('CURRENT PROJECCT FETTCHING FAILED'))\r\n  } catch (error) {\r\n    fetchCurrentTaskFailure(error)\r\n  }\r\n}\r\n\r\nexport function* completeTask({payload}){\r\n  let taskId = payload\r\n  try {\r\n    let taskCompletion = yield fetch(`http://127.0.0.1:5000/complete-task/${taskId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    taskCompletion = yield taskCompletion.json()\r\n    taskCompletion.done?\r\n    yield put(completeCurrentTaskSuccess(taskCompletion.message)):\r\n    yield put(completeCurrentTaskFailure(taskCompletion.error))\r\n  } catch (error) {\r\n    console.log(error)\r\n    yield put(completeCurrentTaskFailure(error))\r\n  }\r\n}\r\n\r\nexport function* onCurrentTaskFetchStart(){\r\n  yield takeLatest(CurrentTaskActionTypes.FETCH_CURRENT_TASK_START , fetchCurrentTask)\r\n}\r\n\r\nexport function* onTaskCompletionStart(){\r\n  yield takeLatest(CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START, completeTask)\r\n}\r\n\r\nexport function* currentTaskSagas() {\r\n  yield all([\r\n    call(onCurrentTaskFetchStart),\r\n    call(onTaskCompletionStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}