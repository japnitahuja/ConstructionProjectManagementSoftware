{"ast":null,"code":"import { all, call, put, select, takeLatest } from \"redux-saga/effects\";\nimport { onTaskCompletionStart } from \"../current-task/current-task.sagas\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { createOrganisationFail, createOrganisationSucessful, fetchAllOrganisationFailure, fetchAllOrganisationSuccess, fetchOrganisationFailure, fetchOrganisationSuccess } from \"./organisation.actions\";\nimport { OrganisationActionTypes } from \"./organisation.types\";\nexport function* fetchAllOrganisations({\n  payload\n}) {\n  let userId = yield select(selectUserId);\n\n  try {\n    let organisation = yield fetch(`http://127.0.0.1:5000/organisation/${userId}`);\n    organisation = yield organisation.json();\n    organisation.done ? yield put(fetchAllOrganisationSuccess(organisation.org)) : yield put(fetchAllOrganisationFailure(\"error!\"));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* createOrganisation({\n  payload\n}) {\n  let userId = yield select(selectUserId);\n  let data = payload;\n\n  try {\n    let org = yield fetch(`http://127.0.0.1:5000/create-organisation/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    org = yield org.json();\n    org.done ? yield put(createOrganisationSucessful(org.message)) : yield put(createOrganisationFail(\"error!\"));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchOrganisation({\n  payload\n}) {\n  let orgId = payload;\n\n  try {\n    let organisation = yield fetch(`http://127.0.0.1:5000/org/${orgId}`);\n    organisation = yield organisation.json();\n    organisation.done ? yield put(fetchOrganisationSuccess(organisation.org)) : yield put(fetchOrganisationFailure(\"error!\"));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onFetchAllOrganisations() {\n  yield takeLatest(OrganisationActionTypes.FETCH_ALL_ORGANISATIONS_START, fetchAllOrganisations);\n}\nexport function* onCreateOrganisationStart() {\n  yield takeLatest(OrganisationActionTypes.CREATE_ORGANISATION_START, createOrganisation);\n}\nexport function* onFetchOrganisationStart() {\n  yield takeLatest(OrganisationActionTypes.FETCH_ORGANISATION_START, fetchOrganisation);\n}\nexport function* organisationSagas() {\n  yield all([call(onFetchAllOrganisations), call(onCreateOrganisationStart), call(onFetchOrganisationStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/organisation/organisation.sagas.js"],"names":["all","call","put","select","takeLatest","onTaskCompletionStart","selectUserId","createOrganisationFail","createOrganisationSucessful","fetchAllOrganisationFailure","fetchAllOrganisationSuccess","fetchOrganisationFailure","fetchOrganisationSuccess","OrganisationActionTypes","fetchAllOrganisations","payload","userId","organisation","fetch","json","done","org","error","console","log","createOrganisation","data","method","headers","body","JSON","stringify","message","fetchOrganisation","orgId","onFetchAllOrganisations","FETCH_ALL_ORGANISATIONS_START","onCreateOrganisationStart","CREATE_ORGANISATION_START","onFetchOrganisationStart","FETCH_ORGANISATION_START","organisationSagas"],"mappings":"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","sourcesContent":["import { all, call, put, select, takeLatest } from \"redux-saga/effects\";\r\nimport { onTaskCompletionStart } from \"../current-task/current-task.sagas\";\r\nimport { selectUserId } from \"../user/user.selectors\";\r\nimport {\r\n  createOrganisationFail,\r\n  createOrganisationSucessful,\r\n  fetchAllOrganisationFailure,\r\n  fetchAllOrganisationSuccess,\r\n  fetchOrganisationFailure,\r\n  fetchOrganisationSuccess,\r\n} from \"./organisation.actions\";\r\nimport { OrganisationActionTypes } from \"./organisation.types\";\r\n\r\nexport function* fetchAllOrganisations({ payload }) {\r\n  let userId = yield select(selectUserId);\r\n\r\n  try {\r\n    let organisation = yield fetch(\r\n      `http://127.0.0.1:5000/organisation/${userId}`\r\n    );\r\n    organisation = yield organisation.json();\r\n    organisation.done\r\n      ? yield put(fetchAllOrganisationSuccess(organisation.org))\r\n      : yield put(fetchAllOrganisationFailure(\"error!\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* createOrganisation({ payload }) {\r\n  let userId = yield select(selectUserId);\r\n  let data = payload;\r\n  try {\r\n    let org = yield fetch(\r\n      `http://127.0.0.1:5000/create-organisation/${userId}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data),\r\n      }\r\n    );\r\n    org = yield org.json();\r\n    org.done\r\n      ? yield put(createOrganisationSucessful(org.message))\r\n      : yield put(createOrganisationFail(\"error!\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* fetchOrganisation({ payload }) {\r\n  let orgId = payload;\r\n  try {\r\n    let organisation = yield fetch(`http://127.0.0.1:5000/org/${orgId}`);\r\n    organisation = yield organisation.json();\r\n    organisation.done\r\n      ? yield put(fetchOrganisationSuccess(organisation.org))\r\n      : yield put(fetchOrganisationFailure(\"error!\"));\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* onFetchAllOrganisations() {\r\n  yield takeLatest(\r\n    OrganisationActionTypes.FETCH_ALL_ORGANISATIONS_START,\r\n    fetchAllOrganisations\r\n  );\r\n}\r\n\r\nexport function* onCreateOrganisationStart() {\r\n  yield takeLatest(\r\n    OrganisationActionTypes.CREATE_ORGANISATION_START,\r\n    createOrganisation\r\n  );\r\n}\r\n\r\nexport function* onFetchOrganisationStart() {\r\n  yield takeLatest(\r\n    OrganisationActionTypes.FETCH_ORGANISATION_START,\r\n    fetchOrganisation\r\n  );\r\n}\r\n\r\nexport function* organisationSagas() {\r\n  yield all([\r\n    call(onFetchAllOrganisations),\r\n    call(onCreateOrganisationStart),\r\n    call(onFetchOrganisationStart),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}