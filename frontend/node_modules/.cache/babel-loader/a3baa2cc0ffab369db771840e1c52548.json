{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { createTaskSucessful, createTaskFail, fetchTasksStart, fetchTasksFailure, fetchTasksSuccess } from \"./all-tasks.actions\";\nimport { TaskActionTypes } from \"./all-tasks.types\";\nexport function* createTask({\n  payload\n}) {\n  try {\n    let data = payload;\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/create-task/${payload}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createTaskSucessful(resp.message));\n    } else {\n      yield put(createTaskFail(resp.error));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchTasks({\n  payload\n}) {\n  try {\n    let tasks = yield fetch(`http://127.0.0.1:5000/project/${payload}/task`);\n    tasks = yield tasks.json();\n    tasks.done ? yield put(fetchTasksSuccess(tasks.tasks.tasks)) : yield put(fetchTasksFailure('Error.'));\n  } catch (error) {\n    fetchTasksFailure(error);\n  }\n}\nexport function* onTaskCreateStart() {\n  yield takeLatest(TaskActionTypes.CREATE_TASK_START, createTask);\n}\nexport function* onTaskFetchStart() {\n  yield takeLatest(TaskActionTypes.FETCH_TASKS_START, fetchTasks);\n}\nexport function* taskSagas() {\n  yield all([call(onTaskCreateStart), call(onTaskFetchStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/all-tasks/all-tasks.sagas.js"],"names":["all","call","put","takeLatest","select","createTaskSucessful","createTaskFail","fetchTasksStart","fetchTasksFailure","fetchTasksSuccess","TaskActionTypes","createTask","payload","data","console","log","resp","fetch","method","headers","body","JSON","stringify","json","done","message","error","fetchTasks","tasks","onTaskCreateStart","CREATE_TASK_START","onTaskFetchStart","FETCH_TASKS_START","taskSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAkD,oBAAlD;AACA,SAASC,mBAAT,EAA8BC,cAA9B,EAA8CC,eAA9C,EAA+DC,iBAA/D,EAAkFC,iBAAlF,QAA2G,qBAA3G;AACA,SAASC,eAAT,QAAgC,mBAAhC;AAEA,OAAO,UAAUC,UAAV,CAAqB;AAACC,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AACF,QAAIC,IAAI,GAAGD,OAAX;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,QAAIG,IAAI,GAAG,MAAMC,KAAK,CAAE,qCAAoCL,OAAQ,EAA9C,EAAiD;AACrEM,MAAAA,MAAM,EAAE,MAD6D;AAErEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF4D;AAKrEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,IAAf;AAL+D,KAAjD,CAAtB;AAQAG,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACO,IAAL,EAAb;;AACA,QAAGP,IAAI,CAACQ,IAAR,EAAa;AACT,YAAMtB,GAAG,CAACG,mBAAmB,CAACW,IAAI,CAACS,OAAN,CAApB,CAAT;AACH,KAFD,MAEK;AACH,YAAMvB,GAAG,CAACI,cAAc,CAACU,IAAI,CAACU,KAAN,CAAf,CAAT;AACD;AACF,GAjBD,CAiBE,OAAOA,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF;AAED,OAAO,UAAUC,UAAV,CAAqB;AAACf,EAAAA;AAAD,CAArB,EAA+B;AACpC,MAAI;AAEF,QAAIgB,KAAK,GAAG,MAAMX,KAAK,CAAE,iCAAgCL,OAAQ,OAA1C,CAAvB;AACAgB,IAAAA,KAAK,GAAG,MAAMA,KAAK,CAACL,IAAN,EAAd;AAEAK,IAAAA,KAAK,CAACJ,IAAN,GACE,MAAMtB,GAAG,CAACO,iBAAiB,CAACmB,KAAK,CAACA,KAAN,CAAYA,KAAb,CAAlB,CADX,GAEE,MAAM1B,GAAG,CAACM,iBAAiB,CAAC,QAAD,CAAlB,CAFX;AAGD,GARD,CAQE,OAAOkB,KAAP,EAAc;AACdlB,IAAAA,iBAAiB,CAACkB,KAAD,CAAjB;AACD;AACF;AAGD,OAAO,UAAUG,iBAAV,GAA6B;AAClC,QAAM1B,UAAU,CAACO,eAAe,CAACoB,iBAAjB,EAAoCnB,UAApC,CAAhB;AACD;AAED,OAAO,UAAUoB,gBAAV,GAA4B;AACjC,QAAM5B,UAAU,CAACO,eAAe,CAACsB,iBAAjB,EAAoCL,UAApC,CAAhB;AACD;AAED,OAAO,UAAUM,SAAV,GAAsB;AAC3B,QAAMjC,GAAG,CAAC,CACRC,IAAI,CAAC4B,iBAAD,CADI,EAER5B,IAAI,CAAC8B,gBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { createTaskSucessful, createTaskFail, fetchTasksStart, fetchTasksFailure, fetchTasksSuccess } from \"./all-tasks.actions\";\r\nimport { TaskActionTypes } from \"./all-tasks.types\";\r\n\r\nexport function* createTask({payload}){\r\n  try {\r\n    let data = payload;\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-task/${payload}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n        yield put(createTaskSucessful(resp.message));\r\n    }else{\r\n      yield put(createTaskFail(resp.error))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* fetchTasks({payload}){\r\n  try {\r\n\r\n    let tasks = yield fetch(`http://127.0.0.1:5000/project/${payload}/task`)\r\n    tasks = yield tasks.json()\r\n  \r\n    tasks.done\r\n    ? yield put(fetchTasksSuccess(tasks.tasks.tasks))\r\n    : yield put(fetchTasksFailure('Error.'))\r\n  } catch (error) {\r\n    fetchTasksFailure(error)\r\n  }\r\n}\r\n\r\n\r\nexport function* onTaskCreateStart(){\r\n  yield takeLatest(TaskActionTypes.CREATE_TASK_START, createTask)\r\n}\r\n\r\nexport function* onTaskFetchStart(){\r\n  yield takeLatest(TaskActionTypes.FETCH_TASKS_START, fetchTasks)\r\n}\r\n\r\nexport function* taskSagas() {\r\n  yield all([\r\n    call(onTaskCreateStart),\r\n    call(onTaskFetchStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}