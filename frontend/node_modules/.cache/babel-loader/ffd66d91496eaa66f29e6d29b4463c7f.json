{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\steps-list\\\\steps-list.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { completeStepQuestionStart, deleteCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\nimport { selectStepQuestionAnsweredConfirmationMessage } from \"../../redux/all-steps/all-steps.selector\";\nimport ConformationMesage from \"../conformation-message/comformation-message.component\";\nimport { BigText, Circle, SmallText } from \"../task-item/task-item.styles\";\nimport StepItem from \"../step-item/step-item.component\";\nimport { LongButton } from '../../components/long-button/long-button.styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass StepList extends React.Component {\n  render() {\n    let steps = this.props.steps;\n    console.log(steps);\n\n    if (!steps) {\n      steps = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: steps.map(({\n          stepName,\n          questionStatement,\n          _id,\n          isStepDone,\n          isQuestionAnswered\n        }, index) => {\n          console.log(_id);\n          const stepDetails = {\n            stepName,\n            questionStatement,\n            _id,\n            isStepDone,\n            isQuestionAnswered,\n            index\n          };\n          return /*#__PURE__*/_jsxDEV(StepItem, {\n            stepDetails: stepDetails\n          }, _id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 27,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(LongButton, {\n          style: {\n            backgroundColor: \"#205284\"\n          },\n          onClick: this.props.completeTask,\n          children: \"COMPLETE TASK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 8\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = dispatch => ({\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  deleteStep: stepId => dispatch(deleteCurrentStepStart(stepId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepList);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/steps-list/steps-list.component.jsx"],"names":["React","connect","Link","createStructuredSelector","completeStepQuestionStart","deleteCurrentStepStart","selectStepQuestionAnsweredConfirmationMessage","ConformationMesage","BigText","Circle","SmallText","StepItem","LongButton","StepList","Component","render","steps","props","console","log","map","stepName","questionStatement","_id","isStepDone","isQuestionAnswered","index","stepDetails","backgroundColor","completeTask","mapStateToProps","mapDispatchToProps","dispatch","completeStepQuestion","stepId","deleteStep"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,yBAAT,EAAoCC,sBAApC,QAAkE,+CAAlE;AACA,SAASC,6CAAT,QAA8D,0CAA9D;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,SAA1B,QAA2C,+BAA3C;AACA,OAAOC,QAAP,MAAqB,kCAArB;AACA,SAASC,UAAT,QAA2B,iDAA3B;;;;AAEA,MAAMC,QAAN,SAAuBb,KAAK,CAACc,SAA7B,CAAuC;AACrCC,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKC,KAAL,CAAWD,KAAvB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;;AACA,QAAI,CAACA,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,EAAR;AACD;;AACD,wBACE;AAAA,8BACA;AAAA,kBACGA,KAAK,CAACI,GAAN,CACC,CAAC;AAACC,UAAAA,QAAD;AAAUC,UAAAA,iBAAV;AAA4BC,UAAAA,GAA5B;AAAgCC,UAAAA,UAAhC;AAA2CC,UAAAA;AAA3C,SAAD,EAAkEC,KAAlE,KAA4E;AAC1ER,UAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACA,gBAAMI,WAAW,GAAG;AAACN,YAAAA,QAAD;AAAUC,YAAAA,iBAAV;AAA4BC,YAAAA,GAA5B;AAAgCC,YAAAA,UAAhC;AAA2CC,YAAAA,kBAA3C;AAA+DC,YAAAA;AAA/D,WAApB;AACA,8BACE,QAAC,QAAD;AAAoB,YAAA,WAAW,EAAIC;AAAnC,aAAeJ,GAAf;AAAA;AAAA;AAAA;AAAA,kBADF;AAGD,SAPF;AADH;AAAA;AAAA;AAAA;AAAA,cADA,eAYC;AAAA,+BACA,QAAC,UAAD;AAAY,UAAA,KAAK,EAAE;AAACK,YAAAA,eAAe,EAAE;AAAlB,WAAnB;AAAiD,UAAA,OAAO,EAAE,KAAKX,KAAL,CAAWY,YAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,cAZD;AAAA,oBADF;AAoBD;;AA3BoC;;AA8BvC,MAAMC,eAAe,GAAG3B,wBAAwB,CAAC,EAAD,CAAhD;;AAEA,MAAM4B,kBAAkB,GAAIC,QAAD,KAAe;AACxCC,EAAAA,oBAAoB,EAAGC,MAAD,IAAYF,QAAQ,CAAC5B,yBAAyB,CAAC8B,MAAD,CAA1B,CADF;AAExCC,EAAAA,UAAU,EAAGD,MAAD,IAAYF,QAAQ,CAAC3B,sBAAsB,CAAC6B,MAAD,CAAvB;AAFQ,CAAf,CAA3B;;AAKA,eAAejC,OAAO,CAAC6B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6ClB,QAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { completeStepQuestionStart, deleteCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\r\nimport { selectStepQuestionAnsweredConfirmationMessage } from \"../../redux/all-steps/all-steps.selector\";\r\nimport ConformationMesage from \"../conformation-message/comformation-message.component\";\r\nimport { BigText, Circle, SmallText } from \"../task-item/task-item.styles\";\r\nimport StepItem from \"../step-item/step-item.component\"\r\nimport { LongButton } from '../../components/long-button/long-button.styles';\r\n\r\nclass StepList extends React.Component {\r\n  render() {\r\n    let steps = this.props.steps;\r\n    console.log(steps);\r\n    if (!steps) {\r\n      steps = [];\r\n    }\r\n    return (\r\n      <>\r\n      <div>\r\n        {steps.map(\r\n          ({stepName,questionStatement,_id,isStepDone,isQuestionAnswered,}, index) => {\r\n            console.log(_id);\r\n            const stepDetails = {stepName,questionStatement,_id,isStepDone,isQuestionAnswered, index}\r\n            return (\r\n              <StepItem key={_id} stepDetails = {stepDetails} />\r\n            );\r\n          }\r\n        )}\r\n      </div>\r\n       <center>\r\n       <LongButton style={{backgroundColor: \"#205284\"}} onClick={this.props.completeTask}>COMPLETE TASK</LongButton> \r\n       </center>\r\n      \r\n      \r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n  deleteStep: (stepId) => dispatch(deleteCurrentStepStart(stepId))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StepList);\r\n"]},"metadata":{},"sourceType":"module"}