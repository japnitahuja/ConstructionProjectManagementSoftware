{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project-change-orders\\\\project-change-orders.page.js\";\nimport React, { Component } from 'react';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport PurchaseOrderList from '../../components/purchase-orders-list/purchase-orders-list.component';\nimport { selectCurrentProjectChangeOrders, selectCurrentProjectName, selectCurrentProjectPurchaseOrders } from '../../redux/current-project/current-project.selectors';\nimport { fetchCurrentProjectStart } from '../../redux/current-project/current-project.actions';\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\nimport PurchaseOrderListContainer from '../../components/purchase-orders-list/purchase-order-lists.container';\nimport { TaskNav } from '../../components/task-nav/task-nav.component';\nimport ChangeOrderList from '../../components/change-orders-list/change-orders-list.component';\nimport SearchBar from '../../components/search-bar/search-bar.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectChangeOrders extends Component {\n  constructor() {\n    super();\n\n    this.search = searchedText => {\n      let temp = this.props.changeOrders;\n\n      if (searchedText) {\n        temp = temp.filter(({\n          purchasedItem\n        }) => {\n          return purchasedItem.toLowerCase().includes(searchedText.toLowerCase());\n        });\n      }\n\n      this.setState({\n        VPOsList: temp\n      });\n    };\n\n    this.state = {\n      VPOsList: ''\n    };\n  }\n\n  componentDidMount() {\n    const projectId = this.props.match.params.projectId;\n    this.props.fetchProject(projectId);\n    this.setState({\n      VPOsList: this.props.changeOrders\n    });\n  }\n\n  render() {\n    const {\n      changeOrders,\n      projectName\n    } = this.props;\n    const {\n      VPOsList\n    } = this.state;\n    console.log(changeOrders);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search variance POs...\",\n        search: this.search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), VPOsList.length === 0 ? /*#__PURE__*/_jsxDEV(NoResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 40\n      }, this) : /*#__PURE__*/_jsxDEV(ChangeOrderList, {\n        changeOrders: VPOsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 53\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  changeOrders: selectCurrentProjectChangeOrders,\n  projectName: selectCurrentProjectName\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProject: projectId => dispatch(fetchCurrentProjectStart(projectId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectChangeOrders);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project-change-orders/project-change-orders.page.js"],"names":["React","Component","createStructuredSelector","connect","PurchaseOrderList","selectCurrentProjectChangeOrders","selectCurrentProjectName","selectCurrentProjectPurchaseOrders","fetchCurrentProjectStart","LowerNavBar","PurchaseOrderListContainer","TaskNav","ChangeOrderList","SearchBar","ProjectChangeOrders","constructor","search","searchedText","temp","props","changeOrders","filter","purchasedItem","toLowerCase","includes","setState","VPOsList","state","componentDidMount","projectId","match","params","fetchProject","render","projectName","console","log","length","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,iBAAP,MAA8B,sEAA9B;AACA,SAASC,gCAAT,EAA2CC,wBAA3C,EAAqEC,kCAArE,QAA+G,uDAA/G;AACA,SAASC,wBAAT,QAAyC,qDAAzC;AACA,OAAOC,WAAP,MAAwB,wDAAxB;AACA,OAAOC,0BAAP,MAAuC,sEAAvC;AACA,SAASC,OAAT,QAAwB,8CAAxB;AACA,OAAOC,eAAP,MAA4B,kEAA5B;AACA,OAAOC,SAAP,MAAsB,kDAAtB;;;AAEA,MAAMC,mBAAN,SAAkCb,SAAlC,CAA4C;AACxCc,EAAAA,WAAW,GAAE;AACT;;AADS,SAYbC,MAZa,GAYHC,YAAD,IAAkB;AACvB,UAAIC,IAAI,GAAG,KAAKC,KAAL,CAAWC,YAAtB;;AAEA,UAAGH,YAAH,EAAgB;AACdC,QAAAA,IAAI,GAAGA,IAAI,CAACG,MAAL,CAAY,CAAC;AAACC,UAAAA;AAAD,SAAD,KAAmB;AACpC,iBAAOA,aAAa,CAACC,WAAd,GAA4BC,QAA5B,CAAqCP,YAAY,CAACM,WAAb,EAArC,CAAP;AACD,SAFM,CAAP;AAGD;;AAGD,WAAKE,QAAL,CAAc;AAACC,QAAAA,QAAQ,EAAER;AAAX,OAAd;AAEF,KAxBW;;AAET,SAAKS,KAAL,GAAW;AACPD,MAAAA,QAAQ,EAAE;AADH,KAAX;AAGH;;AACDE,EAAAA,iBAAiB,GAAE;AACf,UAAMC,SAAS,GAAG,KAAKV,KAAL,CAAWW,KAAX,CAAiBC,MAAjB,CAAwBF,SAA1C;AACA,SAAKV,KAAL,CAAWa,YAAX,CAAwBH,SAAxB;AACA,SAAKJ,QAAL,CAAc;AAACC,MAAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWC;AAAtB,KAAd;AACH;;AAgBDa,EAAAA,MAAM,GAAG;AACL,UAAM;AAACb,MAAAA,YAAD;AAAec,MAAAA;AAAf,QAA8B,KAAKf,KAAzC;AACA,UAAM;AAACO,MAAAA;AAAD,QAAa,KAAKC,KAAxB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYhB,YAAZ;AAEA,wBACK;AAAA,8BACG,QAAC,OAAD;AAAS,QAAA,KAAK,EAAIc;AAAlB;AAAA;AAAA;AAAA;AAAA,cADH,eAEG,QAAC,SAAD;AAAW,QAAA,WAAW,EAAC,wBAAvB;AAAgD,QAAA,MAAM,EAAE,KAAKlB;AAA7D;AAAA;AAAA;AAAA;AAAA,cAFH,EAGIU,QAAQ,CAACW,MAAT,KAAoB,CAApB,gBAAsB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cAAtB,gBAAmC,QAAC,eAAD;AAAiB,QAAA,YAAY,EAAIX;AAAjC;AAAA;AAAA;AAAA;AAAA,cAHvC,eAKG,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cALH;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AASH;;AAzCuC;;AA4C5C,MAAMY,eAAe,GAAGpC,wBAAwB,CAAC;AAC7CkB,EAAAA,YAAY,EAAEf,gCAD+B;AAE7C6B,EAAAA,WAAW,EAAE5B;AAFgC,CAAD,CAAhD;;AAKE,MAAMiC,kBAAkB,GAAIC,QAAD,KAAe;AACtCR,EAAAA,YAAY,EAAGH,SAAD,IAAeW,QAAQ,CAAChC,wBAAwB,CAACqB,SAAD,CAAzB;AADC,CAAf,CAA3B;;AAKA,eAAe1B,OAAO,CAACmC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CzB,mBAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport PurchaseOrderList from '../../components/purchase-orders-list/purchase-orders-list.component';\r\nimport { selectCurrentProjectChangeOrders, selectCurrentProjectName, selectCurrentProjectPurchaseOrders } from '../../redux/current-project/current-project.selectors';\r\nimport { fetchCurrentProjectStart } from '../../redux/current-project/current-project.actions';\r\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\r\nimport PurchaseOrderListContainer from '../../components/purchase-orders-list/purchase-order-lists.container';\r\nimport { TaskNav } from '../../components/task-nav/task-nav.component';\r\nimport ChangeOrderList from '../../components/change-orders-list/change-orders-list.component';\r\nimport SearchBar from '../../components/search-bar/search-bar.component'\r\n\r\nclass ProjectChangeOrders extends Component {\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            VPOsList: ''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        const projectId = this.props.match.params.projectId;\r\n        this.props.fetchProject(projectId);\r\n        this.setState({VPOsList: this.props.changeOrders})\r\n    }\r\n\r\n    search = (searchedText) => {\r\n        let temp = this.props.changeOrders\r\n\r\n        if(searchedText){\r\n          temp = temp.filter(({purchasedItem})=>{\r\n            return purchasedItem.toLowerCase().includes(searchedText.toLowerCase())\r\n          })\r\n        }\r\n        \r\n     \r\n        this.setState({VPOsList: temp})\r\n        \r\n     }\r\n\r\n    render() {\r\n        const {changeOrders, projectName} = this.props;\r\n        const {VPOsList} = this.state\r\n        console.log(changeOrders)\r\n        \r\n        return (\r\n             <div>\r\n                <TaskNav title = {projectName}/>\r\n                <SearchBar placeholder=\"Search variance POs...\" search={this.search}/>\r\n                {VPOsList.length === 0?<NoResult/>: <ChangeOrderList changeOrders = {VPOsList} />}\r\n               \r\n                <LowerNavBar />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    changeOrders: selectCurrentProjectChangeOrders,\r\n    projectName: selectCurrentProjectName\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n      fetchProject: (projectId) => dispatch(fetchCurrentProjectStart(projectId))\r\n    \r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ProjectChangeOrders);"]},"metadata":{},"sourceType":"module"}