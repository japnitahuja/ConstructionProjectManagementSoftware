{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { deleteCurrentTaskInReducer } from \"../current-project/current-project.actions\";\nimport { selectCurrentProjectId } from \"../current-project/current-project.selectors\";\nimport { completeCurrentTaskFailure, completeCurrentTaskSuccess, fetchCurrentTaskFailure, fetchCurrentTaskSuccess, deleteCurrentTaskSuccess, deleteCurrentTaskFailure, updateCurrentTaskSuccess, updateCurrentTaskFailure } from \"./current-task.actions\";\nimport { selectCurrentTaskId } from \"./current-task.selectors\";\nimport { CurrentTaskActionTypes } from \"./current-task.types\";\nexport function* fetchCurrentTask({\n  payload\n}) {\n  try {\n    const taskId = payload;\n    console.log(taskId);\n    let currentTask = yield fetch(`http://127.0.0.1:5000/task/${taskId}`);\n    currentTask = yield currentTask.json();\n    currentTask.done ? yield put(fetchCurrentTaskSuccess(currentTask.task)) : yield put(fetchCurrentTaskFailure(\"CURRENT PROJECCT FETTCHING FAILED\"));\n  } catch (error) {\n    fetchCurrentTaskFailure(error);\n  }\n}\nexport function* completeTask({\n  payload\n}) {\n  try {\n    console.log('task completion starts at saga');\n    let taskId = payload;\n    let projectId = yield select(selectCurrentProjectId);\n    projectId = yield {\n      projectId: projectId\n    };\n    console.log('saga project id', projectId);\n    let taskCompletion = yield fetch(`http://127.0.0.1:5000/complete-task/${taskId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(projectId)\n    });\n    taskCompletion = yield taskCompletion.json();\n    taskCompletion.done ? yield put(completeCurrentTaskSuccess(taskCompletion.message)) : yield put(completeCurrentTaskFailure(taskCompletion.error));\n  } catch (error) {\n    console.log(error);\n    yield put(completeCurrentTaskFailure(error));\n  }\n}\nexport function* deleteTask({\n  payload\n}) {\n  try {\n    let taskId = payload;\n    yield put(deleteCurrentTaskInReducer(taskId));\n    let projectId = yield select(selectCurrentProjectId);\n    projectId = {\n      projectId: projectId\n    };\n    console.log(projectId);\n    let taskDeletion = yield fetch(`http://127.0.0.1:5000/task/${taskId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(projectId)\n    });\n    taskDeletion = yield taskDeletion.json();\n\n    if (taskDeletion.done) {\n      yield put(deleteCurrentTaskSuccess(taskDeletion.message));\n    } else {\n      yield put(deleteCurrentTaskFailure(taskDeletion.error));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(deleteCurrentTaskFailure(error));\n  }\n}\nexport function* updateTask({\n  payload\n}) {\n  try {\n    let {\n      taskId\n    } = payload;\n    let data = {};\n    console.log(payload);\n\n    for (const key of Object.keys(payload)) {\n      console.log(key);\n\n      if (key != \"taskId\") {\n        data[key] = payload[key];\n      }\n    }\n\n    let taskUpdate = yield fetch(`http://127.0.0.1:5000/task/${taskId}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    taskUpdate = yield taskUpdate.json();\n\n    if (taskUpdate.done) {\n      yield put(updateCurrentTaskSuccess(taskUpdate.message));\n    } else {\n      yield put(updateCurrentTaskFailure(taskUpdate.error));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(updateCurrentTaskFailure(error));\n  }\n}\nexport function* onCurrentTaskFetchStart() {\n  yield takeLatest(CurrentTaskActionTypes.FETCH_CURRENT_TASK_START, fetchCurrentTask);\n}\nexport function* onTaskCompletionStart() {\n  yield takeLatest(CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START, completeTask);\n}\nexport function* onDeleteTaskStart() {\n  yield takeLatest(CurrentTaskActionTypes.DELETE_CURRENT_TASK_START, deleteTask);\n}\nexport function* onUpdateTaskStart() {\n  yield takeLatest(CurrentTaskActionTypes.UPDATE_CURRENT_TASK_START, updateTask);\n}\nexport function* currentTaskSagas() {\n  yield all([call(onCurrentTaskFetchStart), call(onTaskCompletionStart), call(onDeleteTaskStart), call(onUpdateTaskStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/current-task/current-task.sagas.js"],"names":["all","call","put","takeLatest","select","deleteCurrentTaskInReducer","selectCurrentProjectId","completeCurrentTaskFailure","completeCurrentTaskSuccess","fetchCurrentTaskFailure","fetchCurrentTaskSuccess","deleteCurrentTaskSuccess","deleteCurrentTaskFailure","updateCurrentTaskSuccess","updateCurrentTaskFailure","selectCurrentTaskId","CurrentTaskActionTypes","fetchCurrentTask","payload","taskId","console","log","currentTask","fetch","json","done","task","error","completeTask","projectId","taskCompletion","method","headers","body","JSON","stringify","message","deleteTask","taskDeletion","updateTask","data","key","Object","keys","taskUpdate","onCurrentTaskFetchStart","FETCH_CURRENT_TASK_START","onTaskCompletionStart","COMPLETE_CURRENT_TASK_START","onDeleteTaskStart","DELETE_CURRENT_TASK_START","onUpdateTaskStart","UPDATE_CURRENT_TASK_START","currentTaskSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\r\nimport { deleteCurrentTaskInReducer } from \"../current-project/current-project.actions\";\r\nimport { selectCurrentProjectId } from \"../current-project/current-project.selectors\";\r\nimport {\r\n  completeCurrentTaskFailure,\r\n  completeCurrentTaskSuccess,\r\n  fetchCurrentTaskFailure,\r\n  fetchCurrentTaskSuccess,\r\n  deleteCurrentTaskSuccess,\r\n  deleteCurrentTaskFailure,\r\n  updateCurrentTaskSuccess,\r\n  updateCurrentTaskFailure,\r\n} from \"./current-task.actions\";\r\nimport { selectCurrentTaskId } from \"./current-task.selectors\";\r\nimport { CurrentTaskActionTypes } from \"./current-task.types\";\r\n\r\nexport function* fetchCurrentTask({ payload }) {\r\n  try {\r\n    const taskId = payload;\r\n    console.log(taskId);\r\n    let currentTask = yield fetch(`http://127.0.0.1:5000/task/${taskId}`);\r\n    currentTask = yield currentTask.json();\r\n    currentTask.done\r\n      ? yield put(fetchCurrentTaskSuccess(currentTask.task))\r\n      : yield put(fetchCurrentTaskFailure(\"CURRENT PROJECCT FETTCHING FAILED\"));\r\n  } catch (error) {\r\n    fetchCurrentTaskFailure(error);\r\n  }\r\n}\r\n\r\nexport function* completeTask({ payload }) {\r\n  try {\r\n    console.log('task completion starts at saga')\r\n    let taskId = payload\r\n    let projectId = yield select(selectCurrentProjectId);\r\n    projectId = yield { projectId: projectId }\r\n    console.log('saga project id', projectId)\r\n    let taskCompletion = yield fetch(\r\n      `http://127.0.0.1:5000/complete-task/${taskId}`,\r\n      {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(projectId),\r\n      }\r\n    );\r\n    taskCompletion = yield taskCompletion.json();\r\n    taskCompletion.done\r\n      ? yield put(completeCurrentTaskSuccess(taskCompletion.message))\r\n      : yield put(completeCurrentTaskFailure(taskCompletion.error));\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(completeCurrentTaskFailure(error));\r\n  }\r\n}\r\n\r\nexport function* deleteTask({ payload }) {\r\n  try {\r\n    let taskId = payload;\r\n    yield put(deleteCurrentTaskInReducer(taskId));\r\n    let projectId = yield select(selectCurrentProjectId);\r\n    projectId = { projectId: projectId };\r\n    console.log(projectId);\r\n    let taskDeletion = yield fetch(`http://127.0.0.1:5000/task/${taskId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(projectId),\r\n    });\r\n    taskDeletion = yield taskDeletion.json();\r\n    if (taskDeletion.done) {\r\n      yield put(deleteCurrentTaskSuccess(taskDeletion.message));\r\n    } else {\r\n      yield put(deleteCurrentTaskFailure(taskDeletion.error));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(deleteCurrentTaskFailure(error));\r\n  }\r\n}\r\n\r\nexport function* updateTask({ payload }) {\r\n  try {\r\n    let {taskId} = payload;\r\n    let data = {};\r\n    console.log(payload)\r\n    for (const key of Object.keys(payload)) {\r\n      console.log(key);\r\n      if(key != \"taskId\"){\r\n        data[key] = payload[key];\r\n      }\r\n    }\r\n    \r\n    let taskUpdate = yield fetch(`http://127.0.0.1:5000/task/${taskId}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    taskUpdate = yield taskUpdate.json();\r\n    if (taskUpdate.done) {\r\n      yield put(updateCurrentTaskSuccess(taskUpdate.message));\r\n    } else {\r\n      yield put(updateCurrentTaskFailure(taskUpdate.error));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(updateCurrentTaskFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onCurrentTaskFetchStart() {\r\n  yield takeLatest(\r\n    CurrentTaskActionTypes.FETCH_CURRENT_TASK_START,\r\n    fetchCurrentTask\r\n  );\r\n}\r\n\r\nexport function* onTaskCompletionStart() {\r\n  yield takeLatest(\r\n    CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START,\r\n    completeTask\r\n  );\r\n}\r\n\r\nexport function* onDeleteTaskStart() {\r\n  yield takeLatest(\r\n    CurrentTaskActionTypes.DELETE_CURRENT_TASK_START,\r\n    deleteTask\r\n  );\r\n}\r\n\r\nexport function* onUpdateTaskStart() {\r\n  yield takeLatest(\r\n    CurrentTaskActionTypes.UPDATE_CURRENT_TASK_START,\r\n    updateTask\r\n  );\r\n}\r\n\r\nexport function* currentTaskSagas() {\r\n  yield all([\r\n    call(onCurrentTaskFetchStart),\r\n    call(onTaskCompletionStart),\r\n    call(onDeleteTaskStart),\r\n    call(onUpdateTaskStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}