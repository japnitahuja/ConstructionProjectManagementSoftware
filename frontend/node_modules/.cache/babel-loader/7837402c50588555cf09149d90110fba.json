{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { selectCurrentProjectId } from \"../current-project/current-project.selectors\";\nimport { fetchCurrentTaskStart } from \"../current-task/current-task.actions\";\nimport { fetchCurrentTask } from \"../current-task/current-task.sagas\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { createPoitemFailure, createPoitemSuccess, createPurchaseOrderFailure, createPurchaseOrderSuccess, fetchCurrentPurchaseOrderFailure, fetchCurrentPurchaseOrderStart, fetchCurrentPurchaseOrderSuccess } from './current-purchase-order.actions';\nimport { selectCurrentPOId } from \"./current-purchase-order.selector\";\nimport { CurrentPurchaseOrderActionTypes } from \"./current-purchase-order.types\";\nexport function* createPurchaseOrderStart({\n  payload\n}) {\n  try {\n    let data = payload;\n    const projectId = yield select(selectCurrentProjectId);\n    const userId = yield select(selectUserId);\n    console.log(projectId);\n    const taskId = data.taskId;\n    data['projectId'] = projectId;\n    data['userId'] = userId;\n    console.log(data);\n    let purchaseOrderCreation = yield fetch(`http://127.0.0.1:5000/create-purchase-order/${taskId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    purchaseOrderCreation = yield purchaseOrderCreation.json();\n    purchaseOrderCreation.done ? yield put(createPurchaseOrderSuccess(purchaseOrderCreation.message)) : yield put(createPurchaseOrderFailure('ERROR')); // yield put(fetchCurrentPurchaseOrderStart(taskId))\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchCurrentPOStart({\n  payload\n}) {\n  let POid = payload;\n\n  try {\n    let PO = yield fetch(`http://127.0.0.1:5000/purchaseOrder/${POid}`);\n    PO = yield PO.json();\n    PO.done ? yield put(fetchCurrentPurchaseOrderSuccess(PO.PO)) : yield put(fetchCurrentPurchaseOrderFailure('error'));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* createPOitem({\n  payload\n}) {\n  let data = payload;\n  let POid = data.poId;\n\n  try {\n    let POitem = yield fetch(`http://127.0.0.1:5000/create-purchase-order-items/${POid}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    POitem = yield POitem.json();\n    POitem.done ? yield put(createPoitemSuccess(POitem.message)) : yield put(createPoitemFailure('ERROR'));\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onCreatePurchaseOrderStart() {\n  yield takeLatest(CurrentPurchaseOrderActionTypes.CREATE_PURCHASE_ORDER_START, createPurchaseOrderStart);\n}\nexport function* onFetchCurrentPurchaseOrderStart() {\n  yield takeLatest(CurrentPurchaseOrderActionTypes.FETCH_CURRENT_PURCHASE_ORDER_START, fetchCurrentPOStart);\n}\nexport function* onCreatePOitemStart() {\n  yield takeLatest(CurrentPurchaseOrderActionTypes.CREATE_CURRENT_PO_ITEM_START, createPOitem);\n}\nexport function* currentPurchaseOrderSagas() {\n  yield all([call(onCreatePurchaseOrderStart), call(onFetchCurrentPurchaseOrderStart), call(onCreatePOitemStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/current-purchase-order/current-purchase-order.saga.js"],"names":["all","call","put","takeLatest","select","selectCurrentProjectId","fetchCurrentTaskStart","fetchCurrentTask","selectUserId","createPoitemFailure","createPoitemSuccess","createPurchaseOrderFailure","createPurchaseOrderSuccess","fetchCurrentPurchaseOrderFailure","fetchCurrentPurchaseOrderStart","fetchCurrentPurchaseOrderSuccess","selectCurrentPOId","CurrentPurchaseOrderActionTypes","createPurchaseOrderStart","payload","data","projectId","userId","console","log","taskId","purchaseOrderCreation","fetch","method","headers","body","JSON","stringify","json","done","message","error","fetchCurrentPOStart","POid","PO","createPOitem","poId","POitem","onCreatePurchaseOrderStart","CREATE_PURCHASE_ORDER_START","onFetchCurrentPurchaseOrderStart","FETCH_CURRENT_PURCHASE_ORDER_START","onCreatePOitemStart","CREATE_CURRENT_PO_ITEM_START","currentPurchaseOrderSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { selectCurrentProjectId } from \"../current-project/current-project.selectors\";\r\nimport { fetchCurrentTaskStart } from \"../current-task/current-task.actions\";\r\nimport { fetchCurrentTask } from \"../current-task/current-task.sagas\";\r\nimport { selectUserId } from \"../user/user.selectors\";\r\nimport {createPoitemFailure, createPoitemSuccess, createPurchaseOrderFailure, createPurchaseOrderSuccess, fetchCurrentPurchaseOrderFailure, fetchCurrentPurchaseOrderStart, fetchCurrentPurchaseOrderSuccess} from './current-purchase-order.actions'\r\nimport { selectCurrentPOId } from \"./current-purchase-order.selector\";\r\nimport { CurrentPurchaseOrderActionTypes } from \"./current-purchase-order.types\";\r\n\r\nexport function* createPurchaseOrderStart({payload}){\r\n  try {\r\n      let data = payload\r\n      const projectId = yield select(selectCurrentProjectId)\r\n      const userId = yield select(selectUserId)\r\n      console.log(projectId)\r\n      const taskId = data.taskId\r\n      data['projectId'] = projectId\r\n      data['userId'] = userId\r\n      console.log(data)\r\n    let purchaseOrderCreation = yield fetch(`http://127.0.0.1:5000/create-purchase-order/${taskId}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n      purchaseOrderCreation = yield purchaseOrderCreation.json()\r\n      purchaseOrderCreation.done ? \r\n      yield put(createPurchaseOrderSuccess(purchaseOrderCreation.message)):\r\n      yield put(createPurchaseOrderFailure('ERROR'))\r\n      // yield put(fetchCurrentPurchaseOrderStart(taskId))\r\n  } catch (error) {\r\n      console.log(error)\r\n  }\r\n}\r\n\r\nexport function* fetchCurrentPOStart({payload}){\r\n    let POid = payload\r\n    try {\r\n        let PO = yield fetch(`http://127.0.0.1:5000/purchaseOrder/${POid}`)\r\n        PO = yield PO.json()\r\n        PO.done?\r\n        yield put(fetchCurrentPurchaseOrderSuccess(PO.PO)):\r\n        yield put(fetchCurrentPurchaseOrderFailure('error'))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport function* createPOitem({payload}){\r\n    let data = payload\r\n    let POid = data.poId\r\n    try {\r\n        \r\n        let POitem = yield fetch(`http://127.0.0.1:5000/create-purchase-order-items/${POid}`, {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(data)\r\n      })\r\n      POitem = yield POitem.json()\r\n      POitem.done ? \r\n      yield put(createPoitemSuccess(POitem.message)):\r\n      yield put(createPoitemFailure('ERROR'))\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport function* onCreatePurchaseOrderStart(){\r\n  yield takeLatest(CurrentPurchaseOrderActionTypes.CREATE_PURCHASE_ORDER_START , createPurchaseOrderStart)\r\n}\r\n\r\nexport function* onFetchCurrentPurchaseOrderStart(){\r\n    yield takeLatest(CurrentPurchaseOrderActionTypes.FETCH_CURRENT_PURCHASE_ORDER_START, fetchCurrentPOStart)\r\n}\r\n\r\nexport function* onCreatePOitemStart(){\r\n    yield takeLatest(CurrentPurchaseOrderActionTypes.CREATE_CURRENT_PO_ITEM_START, createPOitem)\r\n}\r\n\r\nexport function* currentPurchaseOrderSagas() {\r\n  yield all([\r\n    call(onCreatePurchaseOrderStart),\r\n    call(onFetchCurrentPurchaseOrderStart),\r\n    call(onCreatePOitemStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}