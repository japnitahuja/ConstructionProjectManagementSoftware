{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\all-projects\\\\all-projects.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { createStructuredSelector } from \"reselect\";\nimport ProjectList from \"../../components/projects-list/projects-list.component\";\nimport { createProjectStart, fetchProjectsStart } from \"../../redux/all-projects/all-projects.actions\";\nimport { selectAreProjectsFetching, selectProjectsFetched, selectUserProjects } from \"../../redux/all-projects/all-projects.selectors\";\nimport { signOut } from \"../../redux/user/user.actions\";\nimport { selectCurrentUserFirstName } from \"../../redux/user/user.selectors\";\nimport CreateProjectForm from \"../../components/create-project-form/create-project-form.component\";\nimport ProjectsNav from \"../../components/projects-nav/projects-nav.component\";\nimport ProjectListContainer from \"../../components/projects-list/projects-list.container\";\nimport { GenericButton } from \"../../components/generic-button/generic-button.styles\";\nimport AddUserForm from \"../../components/adduser-form/adduser-form.component\";\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\nimport NoResult from \"../../components/no-result/no-result.component\";\nimport { Overlay } from \"../../components/admin-panel-task-page/admin-panel-task-page.styles\";\nimport ProjectsFilter from \"../../components/projects-filter/projects-filter.component\";\nimport Spinner from \"../../components/spinner/spinner.component\";\nimport { fetchOrganisationStart } from \"../../redux/organisation/organisation.actions\";\nimport { selectCurrentOrganisationId } from \"./../../redux/organisation/organisation.selectors\";\nimport ProjectCreateButton from \"../../components/project-createbutton/project-createbutton.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllProjects extends Component {\n  constructor(props) {\n    super(props);\n\n    this.search = searchedText => {\n      let temp = this.props.projects;\n\n      if (searchedText) {\n        temp = temp.filter(({\n          projectName\n        }) => {\n          return projectName.toLowerCase().includes(searchedText.toLowerCase());\n        });\n      }\n\n      this.setState({\n        projectsList: temp\n      });\n    };\n\n    this.filter = filters => {\n      console.log(\"filters\", filters);\n      let temp = this.props.projects;\n\n      for (let filter in filters) {\n        if (filters[filter] != \"\") {\n          temp = temp.filter(project => {\n            console.log(project[filter], filter, filters, filters[filter]);\n            return project[filter] == filters[filter];\n          });\n        }\n      }\n\n      this.setState({\n        projectsList: temp,\n        filters: filters\n      });\n    };\n\n    this.toggleSearchBar = () => {\n      console.log(\"search\");\n      this.setState(prevState => ({\n        showSearch: !prevState.showSearch\n      }), () => {\n        console.log(this.state);\n      });\n    };\n\n    this.toggleFilter = () => {\n      this.setState(prevState => ({\n        showFilter: !prevState.showFilter\n      }), () => {\n        console.log(this.state);\n      });\n    };\n\n    this.setProjectState = () => {\n      this.setState({\n        projectsList: this.props.projects,\n        setProjects: 1\n      });\n    };\n\n    this.state = {\n      projectsList: [],\n      //will change based on search\n      showSearch: false,\n      showFilter: false,\n      filters: {},\n      setProjects: 0\n    };\n  }\n\n  async componentDidMount() {\n    //window.location.reload() //remove this, just a juagad.\n    const {\n      fetchProjects,\n      fetchOrg\n    } = this.props;\n    const orgId = this.props.match.params.orgId;\n    fetchProjects(orgId);\n    fetchOrg(orgId);\n  }\n\n  render() {\n    let {\n      projectsList\n    } = this.state;\n    let {\n      projectsFetched,\n      organisationId\n    } = this.props;\n    let {\n      orgId\n    } = this.props.match.params;\n\n    if (!projectsFetched) {\n      return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 14\n      }, this);\n    } else if (projectsFetched && organisationId == orgId && this.state.setProjects == 0) {\n      this.setProjectState();\n    }\n\n    if (!projectsList) {\n      projectsList = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ProjectsNav, {\n        title: \"Projects\",\n        toggleSearchBar: this.toggleSearchBar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this), this.state.showSearch ? /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search Projects...\",\n        search: this.search,\n        toggleFilter: this.toggleFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 11\n      }, this) : null, projectsList.length === 0 ? /*#__PURE__*/_jsxDEV(NoResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ProjectListContainer, {\n        projects: projectsList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 11\n      }, this), this.state.showFilter ? /*#__PURE__*/_jsxDEV(Overlay, {\n        backgroundcolor: \"rgba(0,0,0,0.3)\",\n        style: {\n          bottom: \"0\",\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(ProjectsFilter, {\n          exit: this.toggleFilter,\n          onSubmit: this.filter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(ProjectCreateButton, {\n        orgId: orgId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  name: selectCurrentUserFirstName,\n  projects: selectUserProjects,\n  projectsFetched: selectProjectsFetched,\n  organisationId: selectCurrentOrganisationId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  signOut: () => dispatch(signOut()),\n  createProject: projectDetails => dispatch(createProjectStart(projectDetails)),\n  fetchProjects: orgId => dispatch(fetchProjectsStart(orgId)),\n  fetchOrg: orgId => dispatch(fetchOrganisationStart(orgId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllProjects);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/all-projects/all-projects.js"],"names":["React","Component","connect","createStructuredSelector","ProjectList","createProjectStart","fetchProjectsStart","selectAreProjectsFetching","selectProjectsFetched","selectUserProjects","signOut","selectCurrentUserFirstName","CreateProjectForm","ProjectsNav","ProjectListContainer","GenericButton","AddUserForm","SearchBar","NoResult","Overlay","ProjectsFilter","Spinner","fetchOrganisationStart","selectCurrentOrganisationId","ProjectCreateButton","AllProjects","constructor","props","search","searchedText","temp","projects","filter","projectName","toLowerCase","includes","setState","projectsList","filters","console","log","project","toggleSearchBar","prevState","showSearch","state","toggleFilter","showFilter","setProjectState","setProjects","componentDidMount","fetchProjects","fetchOrg","orgId","match","params","render","projectsFetched","organisationId","length","bottom","height","display","flexDirection","justifyContent","alignItems","mapStateToProps","name","mapDispatchToProps","dispatch","createProject","projectDetails"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport ProjectList from \"../../components/projects-list/projects-list.component\";\r\nimport {\r\n  createProjectStart,\r\n  fetchProjectsStart,\r\n} from \"../../redux/all-projects/all-projects.actions\";\r\nimport {\r\n  selectAreProjectsFetching,\r\n  selectProjectsFetched,\r\n  selectUserProjects,\r\n} from \"../../redux/all-projects/all-projects.selectors\";\r\nimport { signOut } from \"../../redux/user/user.actions\";\r\nimport { selectCurrentUserFirstName } from \"../../redux/user/user.selectors\";\r\nimport CreateProjectForm from \"../../components/create-project-form/create-project-form.component\";\r\nimport ProjectsNav from \"../../components/projects-nav/projects-nav.component\";\r\nimport ProjectListContainer from \"../../components/projects-list/projects-list.container\";\r\nimport { GenericButton } from \"../../components/generic-button/generic-button.styles\";\r\nimport AddUserForm from \"../../components/adduser-form/adduser-form.component\";\r\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\r\nimport NoResult from \"../../components/no-result/no-result.component\";\r\nimport { Overlay } from \"../../components/admin-panel-task-page/admin-panel-task-page.styles\";\r\nimport ProjectsFilter from \"../../components/projects-filter/projects-filter.component\";\r\nimport Spinner from \"../../components/spinner/spinner.component\";\r\nimport { fetchOrganisationStart } from \"../../redux/organisation/organisation.actions\";\r\nimport { selectCurrentOrganisationId } from \"./../../redux/organisation/organisation.selectors\";\r\nimport ProjectCreateButton from \"../../components/project-createbutton/project-createbutton.component\";\r\n\r\nclass AllProjects extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      projectsList: [], //will change based on search\r\n      showSearch: false,\r\n      showFilter: false,\r\n      filters: {},\r\n      setProjects: 0,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //window.location.reload() //remove this, just a juagad.\r\n    const { fetchProjects, fetchOrg } = this.props;\r\n    const orgId = this.props.match.params.orgId;\r\n    fetchProjects(orgId);\r\n    fetchOrg(orgId);\r\n  }\r\n\r\n  search = (searchedText) => {\r\n    let temp = this.props.projects;\r\n\r\n    if (searchedText) {\r\n      temp = temp.filter(({ projectName }) => {\r\n        return projectName.toLowerCase().includes(searchedText.toLowerCase());\r\n      });\r\n    }\r\n\r\n    this.setState({ projectsList: temp });\r\n  };\r\n\r\n  filter = (filters) => {\r\n    console.log(\"filters\", filters);\r\n\r\n    let temp = this.props.projects;\r\n\r\n    for (let filter in filters) {\r\n      if (filters[filter] != \"\") {\r\n        temp = temp.filter((project) => {\r\n          console.log(project[filter], filter, filters, filters[filter]);\r\n          return project[filter] == filters[filter];\r\n        });\r\n      }\r\n    }\r\n\r\n    this.setState({ projectsList: temp, filters: filters });\r\n  };\r\n\r\n  toggleSearchBar = () => {\r\n    console.log(\"search\");\r\n    this.setState(\r\n      (prevState) => ({\r\n        showSearch: !prevState.showSearch,\r\n      }),\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  toggleFilter = () => {\r\n    this.setState(\r\n      (prevState) => ({\r\n        showFilter: !prevState.showFilter,\r\n      }),\r\n      () => {\r\n        console.log(this.state);\r\n      }\r\n    );\r\n  };\r\n\r\n  setProjectState = () => {\r\n    this.setState({\r\n      projectsList: this.props.projects,\r\n      setProjects: 1,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let { projectsList } = this.state;\r\n    let { projectsFetched, organisationId } = this.props;\r\n    let { orgId } = this.props.match.params;\r\n\r\n    if (!projectsFetched) {\r\n      return <Spinner />;\r\n    } else if (\r\n      projectsFetched &&\r\n      organisationId == orgId &&\r\n      this.state.setProjects == 0\r\n    ) {\r\n      this.setProjectState();\r\n    }\r\n\r\n    if (!projectsList) {\r\n      projectsList = [];\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <ProjectsNav title=\"Projects\" toggleSearchBar={this.toggleSearchBar} />\r\n        {this.state.showSearch ? (\r\n          <SearchBar\r\n            placeholder=\"Search Projects...\"\r\n            search={this.search}\r\n            toggleFilter={this.toggleFilter}\r\n          />\r\n        ) : null}\r\n\r\n        {projectsList.length === 0 ? (\r\n          <NoResult />\r\n        ) : (\r\n          <ProjectListContainer projects={projectsList} />\r\n        )}\r\n\r\n        {this.state.showFilter ? (\r\n          <Overlay\r\n            backgroundcolor=\"rgba(0,0,0,0.3)\"\r\n            style={{\r\n              bottom: \"0\",\r\n              height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <ProjectsFilter exit={this.toggleFilter} onSubmit={this.filter} />\r\n          </Overlay>\r\n        ) : null}\r\n\r\n        <ProjectCreateButton orgId={orgId} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  name: selectCurrentUserFirstName,\r\n  projects: selectUserProjects,\r\n  projectsFetched: selectProjectsFetched,\r\n  organisationId: selectCurrentOrganisationId,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  signOut: () => dispatch(signOut()),\r\n  createProject: (projectDetails) =>\r\n    dispatch(createProjectStart(projectDetails)),\r\n  fetchProjects: (orgId) => dispatch(fetchProjectsStart(orgId)),\r\n  fetchOrg: (orgId) => dispatch(fetchOrganisationStart(orgId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllProjects);\r\n"]},"metadata":{},"sourceType":"module"}