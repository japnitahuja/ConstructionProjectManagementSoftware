{"ast":null,"code":"import { CurrentTaskActionTypes } from \"./current-task.types\";\nconst INITIAL_STATE = {\n  isCurrentTaskFetching: false,\n  currentTaskId: null,\n  currentTaskName: null,\n  currentTaskPurchaseOrders: null,\n  currentTaskSteps: null,\n  currentTaskTotalSteps: null,\n  currentTaskCompletedSteps: null,\n  currentTaskCompletionPercentage: null,\n  currentTaskIsDone: null,\n  currentTaskStartDate: null,\n  currentTaskEndDate: null,\n  currentTaskOwner: null,\n  currentTaskMessage: null,\n  errorMessage: null,\n  currentTaskCompletionMessage: null,\n  isCurrentTaskCompleting: null,\n  isCurrentTaskDeleting: false,\n  currentTaskDeletingMessage: null\n};\n\nconst currentTaskReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case CurrentTaskActionTypes.FETCH_CURRENT_TASK_START:\n      return { ...state,\n        isCurrentTaskFetching: true,\n        currentTaskCompletionMessage: null\n      };\n\n    case CurrentTaskActionTypes.FETCH_CURRENT_TASK_SUCCESS:\n      const {\n        taskName,\n        taskStartDate,\n        taskEndDate,\n        taskOwner,\n        purchaseOrders,\n        _id,\n        steps,\n        completionPercentage,\n        completedSteps,\n        totalSteps,\n        isTaskDone\n      } = action.payload;\n      return { ...state,\n        isCurrentTaskFetching: false,\n        currentTaskId: _id,\n        currentTaskName: taskName,\n        currentTaskStartDate: taskStartDate,\n        currentTaskEndDate: taskEndDate,\n        currentTaskOwner: taskOwner,\n        currentTaskPurchaseOrders: purchaseOrders,\n        currentTaskSteps: steps,\n        currentTaskCompletedSteps: completedSteps,\n        currentTaskCompletionPercentage: completionPercentage,\n        currentTaskTotalSteps: totalSteps,\n        currentTaskIsDone: isTaskDone\n      };\n\n    case CurrentTaskActionTypes.FETCH_CURRENT_TASK_FAILURE:\n      return { ...state,\n        isCurrentTaskFetching: false,\n        errorMessage: action.payload\n      };\n\n    case CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START:\n      return { ...state,\n        isCurrentTaskCompleting: true,\n        currentTaskCompletionMessage: null\n      };\n\n    case CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_SUCCESS:\n      return { ...state,\n        isCurrentTaskCompleting: false,\n        currentTaskCompletionMessage: action.payload\n      };\n\n    case CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_FAILURE:\n      return { ...state,\n        isCurrentTaskCompleting: false,\n        currentTaskCompletionMessage: action.payload,\n        isCurrentTaskCompleting: false\n      };\n\n    case CurrentTaskActionTypes.DELETE_CURRENT_TASK_START:\n      return { ...state,\n        isCurrentTaskDeleting: true,\n        currentTaskDeletionMessage: null\n      };\n\n    case CurrentTaskActionTypes.DELETE_CURRENT_TASK_SUCCESS:\n      return { ...state,\n        isCurrentTaskDeleting: false,\n        currentTaskDeletionMessage: action.payload\n      };\n\n    case CurrentTaskActionTypes.DELETE_CURRENT_TASK_FAILURE:\n      return { ...state,\n        isCurrentTaskDeleting: false,\n        currentTaskDeletionMessage: action.payload\n      };\n\n    case CurrentTaskActionTypes.DELETE_STEP:\n      let updatedSteps = state.currentTaskSteps.filter(step => step._id != action.payload);\n      return { ...state,\n        currentTaskSteps: updatedSteps\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTaskReducer;","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/current-task/current-task.reducer.js"],"names":["CurrentTaskActionTypes","INITIAL_STATE","isCurrentTaskFetching","currentTaskId","currentTaskName","currentTaskPurchaseOrders","currentTaskSteps","currentTaskTotalSteps","currentTaskCompletedSteps","currentTaskCompletionPercentage","currentTaskIsDone","currentTaskStartDate","currentTaskEndDate","currentTaskOwner","currentTaskMessage","errorMessage","currentTaskCompletionMessage","isCurrentTaskCompleting","isCurrentTaskDeleting","currentTaskDeletingMessage","currentTaskReducer","state","action","type","FETCH_CURRENT_TASK_START","FETCH_CURRENT_TASK_SUCCESS","taskName","taskStartDate","taskEndDate","taskOwner","purchaseOrders","_id","steps","completionPercentage","completedSteps","totalSteps","isTaskDone","payload","FETCH_CURRENT_TASK_FAILURE","COMPLETE_CURRENT_TASK_START","COMPLETE_CURRENT_TASK_SUCCESS","COMPLETE_CURRENT_TASK_FAILURE","DELETE_CURRENT_TASK_START","currentTaskDeletionMessage","DELETE_CURRENT_TASK_SUCCESS","DELETE_CURRENT_TASK_FAILURE","DELETE_STEP","updatedSteps","filter","step"],"mappings":"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","sourcesContent":["import { CurrentTaskActionTypes } from \"./current-task.types\";\r\n\r\nconst INITIAL_STATE = {\r\n  isCurrentTaskFetching: false,\r\n  currentTaskId: null,\r\n  currentTaskName: null,\r\n  currentTaskPurchaseOrders: null,\r\n  currentTaskSteps: null,\r\n  currentTaskTotalSteps: null,\r\n  currentTaskCompletedSteps: null,\r\n  currentTaskCompletionPercentage: null,\r\n  currentTaskIsDone: null,\r\n  currentTaskStartDate: null,\r\n  currentTaskEndDate: null,\r\n  currentTaskOwner: null,\r\n  currentTaskMessage: null,\r\n  errorMessage: null,\r\n  currentTaskCompletionMessage: null,\r\n  isCurrentTaskCompleting: null,\r\n  isCurrentTaskDeleting:false, \r\n  currentTaskDeletingMessage: null\r\n};\r\n\r\nconst currentTaskReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case CurrentTaskActionTypes.FETCH_CURRENT_TASK_START:\r\n      return {\r\n        ...state,\r\n        isCurrentTaskFetching: true,\r\n        currentTaskCompletionMessage: null\r\n      };\r\n    case CurrentTaskActionTypes.FETCH_CURRENT_TASK_SUCCESS:\r\n      const {taskName, taskStartDate, taskEndDate, taskOwner, purchaseOrders, _id, steps, completionPercentage, completedSteps, totalSteps, isTaskDone} = action.payload\r\n      return {\r\n        ...state,\r\n        isCurrentTaskFetching: false,\r\n        currentTaskId: _id,\r\n        currentTaskName: taskName,\r\n        currentTaskStartDate: taskStartDate,\r\n        currentTaskEndDate: taskEndDate,\r\n        currentTaskOwner: taskOwner,\r\n        currentTaskPurchaseOrders: purchaseOrders,\r\n        currentTaskSteps: steps,\r\n        currentTaskCompletedSteps: completedSteps,\r\n        currentTaskCompletionPercentage: completionPercentage,\r\n        currentTaskTotalSteps: totalSteps,\r\n        currentTaskIsDone: isTaskDone\r\n      };\r\n   \r\n    case CurrentTaskActionTypes.FETCH_CURRENT_TASK_FAILURE:\r\n      return {\r\n        ...state,\r\n       isCurrentTaskFetching: false,\r\n       errorMessage: action.payload\r\n      };\r\n    case CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_START:\r\n      return{\r\n        ...state,\r\n        isCurrentTaskCompleting: true,\r\n        currentTaskCompletionMessage: null\r\n      }\r\n    case CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_SUCCESS:\r\n      return{\r\n        ...state,\r\n        isCurrentTaskCompleting: false,\r\n        currentTaskCompletionMessage: action.payload\r\n      }\r\n    case CurrentTaskActionTypes.COMPLETE_CURRENT_TASK_FAILURE:\r\n      return{\r\n        ...state,\r\n        isCurrentTaskCompleting: false,\r\n        currentTaskCompletionMessage: action.payload,\r\n        isCurrentTaskCompleting: false\r\n      }\r\n      case CurrentTaskActionTypes.DELETE_CURRENT_TASK_START:\r\n        return{\r\n          ...state,\r\n          isCurrentTaskDeleting: true,\r\n          currentTaskDeletionMessage: null\r\n        }\r\n      case CurrentTaskActionTypes.DELETE_CURRENT_TASK_SUCCESS:\r\n        return{\r\n          ...state,\r\n          isCurrentTaskDeleting: false,\r\n          currentTaskDeletionMessage: action.payload\r\n        }\r\n      case CurrentTaskActionTypes.DELETE_CURRENT_TASK_FAILURE:\r\n        return{\r\n          ...state,\r\n          isCurrentTaskDeleting: false,\r\n          currentTaskDeletionMessage: action.payload,\r\n        }\r\n      case CurrentTaskActionTypes.DELETE_STEP:\r\n        let updatedSteps = state.currentTaskSteps.filter(step => step._id != action.payload)\r\n        return{\r\n          ...state,\r\n          currentTaskSteps: updatedSteps\r\n        }\r\n    default:\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default currentTaskReducer;\r\n"]},"metadata":{},"sourceType":"module"}