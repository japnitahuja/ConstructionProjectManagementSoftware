{"ast":null,"code":"import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\nimport { UpdatePublishedInProjectFailure, UpdatePublishedInProjectSuccess, deleteCurrentProjectFailure, deleteCurrentProjectSuccess, fetchCurrentProjectFailure, fetchCurrentProjectStart, fetchCurrentProjectSuccess, inviteUserFailure, inviteUserSuccess, UpdateUserInProjectFailure, UpdateUserInProjectSuccess } from \"./current-project.actions\";\nimport { CurrentProjectActionTypes } from \"./current-project.types\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { deleteProject } from \"../all-projects/all-projects.actions\";\nimport { selectCurrentProjectId } from \"./current-project.selectors\";\nimport currentProjectReducer from \"./current-project.reducer\";\nimport { setUserPermission } from \"../user/user.actions\";\nexport function* fetchCurrentProject({\n  payload\n}) {\n  try {\n    const projectId = payload;\n    const userId = yield select(selectUserId);\n    const token = localStorage.getItem('token');\n    let currentProject = yield fetch(`http://127.0.0.1:5000/project/${projectId}`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"role\": 'ADMIN',\n        \"authorization\": `Bearer ${token}`\n      }\n    });\n    currentProject = yield currentProject.json();\n    console.log(\"saga\", currentProject);\n    currentProject.done ? yield put(fetchCurrentProjectSuccess(currentProject.project)) : yield put(fetchCurrentProjectFailure('CURRENT PROJECCT FETTCHING FAILED'));\n  } catch (error) {\n    fetchCurrentProjectFailure(error);\n  }\n}\nexport function* deleteCurrentProject({\n  payload\n}) {\n  try {\n    const projectId = payload;\n    console.log(projectId);\n    yield put(deleteProject(projectId));\n    let userId = yield select(selectUserId);\n    userId = {\n      userId: userId\n    };\n    console.log(userId);\n    let projectDeletion = yield fetch(`http://127.0.0.1:5000/project/${projectId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(userId)\n    });\n    projectDeletion = yield projectDeletion.json();\n    projectDeletion.done ? yield put(deleteCurrentProjectSuccess(projectDeletion.message)) : yield put(deleteCurrentProjectFailure(projectDeletion.error));\n  } catch (error) {\n    console.log(error);\n    deleteCurrentProjectFailure(error);\n    console.log(error);\n  }\n}\nexport function* inviteUser({\n  payload\n}) {\n  try {\n    let data = payload;\n    let projectId = yield select(selectCurrentProjectId);\n    data['projectId'] = projectId;\n    let resp = yield fetch(\"http://127.0.0.1:5000/inviteUser\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(inviteUserSuccess(resp.message));\n      yield put(fetchCurrentProjectStart(projectId));\n    } else {\n      yield put(inviteUserFailure(resp.message));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(inviteUserFailure(error));\n  }\n}\nexport function* updateUserInProject({\n  payload\n}) {\n  try {\n    let data = payload;\n    let projectId = yield select(selectCurrentProjectId);\n    console.log(data, 'saga data');\n    console.log(projectId);\n    let resp = yield fetch(`http://127.0.0.1:5000/updatePermissions/${projectId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(UpdateUserInProjectSuccess(resp.message));\n    } else {\n      yield put(UpdateUserInProjectFailure(resp.message));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* updatePublishedInProject() {\n  try {\n    console.log(\"Inside update published saga\");\n    let projectId = yield select(selectCurrentProjectId);\n    let resp = yield fetch(`http://127.0.0.1:5000/publish/${projectId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(UpdatePublishedInProjectSuccess(resp.message));\n      yield delay(500);\n      yield put(fetchCurrentProjectStart(projectId));\n    } else {\n      yield put(UpdatePublishedInProjectFailure(resp.message));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onCurrentProjectFetchStart() {\n  yield takeLatest(CurrentProjectActionTypes.FETCH_CURRENT_PROJECT_START, fetchCurrentProject);\n}\nexport function* onCurrentProjectDeleteStart() {\n  yield takeLatest(CurrentProjectActionTypes.DELETE_CURRENT_PROJECT_START, deleteCurrentProject);\n}\nexport function* onInviteUserStart() {\n  yield takeLatest(CurrentProjectActionTypes.INVITE_USER_START, inviteUser);\n}\nexport function* onUpdateUserStart() {\n  yield takeLatest(CurrentProjectActionTypes.UPDATE_USER_IN_PROJECT_START, updateUserInProject);\n}\nexport function* onUpdatePublishedStart() {\n  yield takeLatest(CurrentProjectActionTypes.UPDATE_PUBLISHED_IN_PROJECT_START, updatePublishedInProject);\n}\nexport function* currentProjectSagas() {\n  yield all([call(onCurrentProjectFetchStart), call(onCurrentProjectDeleteStart), call(onInviteUserStart), call(onUpdateUserStart), call(onUpdatePublishedStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/current-project/current-project.sagas.js"],"names":["all","call","put","takeLatest","select","delay","UpdatePublishedInProjectFailure","UpdatePublishedInProjectSuccess","deleteCurrentProjectFailure","deleteCurrentProjectSuccess","fetchCurrentProjectFailure","fetchCurrentProjectStart","fetchCurrentProjectSuccess","inviteUserFailure","inviteUserSuccess","UpdateUserInProjectFailure","UpdateUserInProjectSuccess","CurrentProjectActionTypes","selectUserId","deleteProject","selectCurrentProjectId","currentProjectReducer","setUserPermission","fetchCurrentProject","payload","projectId","userId","token","localStorage","getItem","currentProject","fetch","method","headers","json","console","log","done","project","error","deleteCurrentProject","projectDeletion","body","JSON","stringify","message","inviteUser","data","resp","updateUserInProject","updatePublishedInProject","onCurrentProjectFetchStart","FETCH_CURRENT_PROJECT_START","onCurrentProjectDeleteStart","DELETE_CURRENT_PROJECT_START","onInviteUserStart","INVITE_USER_START","onUpdateUserStart","UPDATE_USER_IN_PROJECT_START","onUpdatePublishedStart","UPDATE_PUBLISHED_IN_PROJECT_START","currentProjectSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select, delay} from \"redux-saga/effects\";\r\nimport { UpdatePublishedInProjectFailure,UpdatePublishedInProjectSuccess, deleteCurrentProjectFailure, deleteCurrentProjectSuccess, fetchCurrentProjectFailure, fetchCurrentProjectStart, fetchCurrentProjectSuccess, inviteUserFailure, inviteUserSuccess, UpdateUserInProjectFailure, UpdateUserInProjectSuccess } from \"./current-project.actions\";\r\nimport { CurrentProjectActionTypes } from \"./current-project.types\";\r\nimport { selectUserId } from \"../user/user.selectors\"\r\nimport { deleteProject } from \"../all-projects/all-projects.actions\";\r\nimport { selectCurrentProjectId } from \"./current-project.selectors\";\r\nimport currentProjectReducer from \"./current-project.reducer\";\r\nimport { setUserPermission } from \"../user/user.actions\";\r\n\r\nexport function* fetchCurrentProject({payload}){\r\n  try {\r\n      const projectId = payload\r\n      const userId = yield select(selectUserId)\r\n      const token = localStorage.getItem('token')\r\n    let currentProject = yield fetch(`http://127.0.0.1:5000/project/${projectId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"role\": 'ADMIN',\r\n        \"authorization\": `Bearer ${token}`\r\n      }\r\n    })\r\n    currentProject = yield currentProject.json()\r\n    console.log(\"saga\", currentProject)\r\n    currentProject.done\r\n    ? yield put(fetchCurrentProjectSuccess(currentProject.project))\r\n    : yield put(fetchCurrentProjectFailure('CURRENT PROJECCT FETTCHING FAILED'))\r\n  } catch (error) {\r\n    fetchCurrentProjectFailure(error)\r\n  }\r\n}\r\n\r\nexport function* deleteCurrentProject({payload}){\r\n  try {\r\n    const projectId = payload\r\n    console.log(projectId)\r\n    yield put(deleteProject(projectId))\r\n    let userId = yield select(selectUserId)\r\n    userId = {userId: userId}\r\n    console.log(userId)\r\n    let projectDeletion = yield fetch(`http://127.0.0.1:5000/project/${projectId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(userId),\r\n\r\n    })\r\n    projectDeletion = yield projectDeletion.json()\r\n    projectDeletion.done?\r\n    yield put(deleteCurrentProjectSuccess(projectDeletion.message)):\r\n    yield put(deleteCurrentProjectFailure(projectDeletion.error))\r\n  } catch (error) {\r\n    console.log(error)\r\n    deleteCurrentProjectFailure(error)\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* inviteUser({payload}){\r\n  try {\r\n    let data = payload;\r\n    let projectId = yield select(selectCurrentProjectId)\r\n    data['projectId'] = projectId\r\n    let resp = yield fetch(\"http://127.0.0.1:5000/inviteUser\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      yield put(inviteUserSuccess(resp.message))\r\n      yield put(fetchCurrentProjectStart(projectId))\r\n    }else{\r\n      yield put(inviteUserFailure(resp.message))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n    yield put(inviteUserFailure(error))\r\n  }\r\n}\r\n\r\nexport function* updateUserInProject({payload}){\r\ntry {\r\n  let data = payload\r\n  let projectId = yield select(selectCurrentProjectId)\r\n  console.log(data, 'saga data')\r\n  console.log(projectId)\r\n    let resp = yield fetch(`http://127.0.0.1:5000/updatePermissions/${projectId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      yield put(UpdateUserInProjectSuccess(resp.message))\r\n\r\n    }else{\r\n      yield put(UpdateUserInProjectFailure(resp.message))\r\n    }\r\n} catch (error) {\r\n  console.log(error)\r\n}\r\n}\r\n\r\nexport function* updatePublishedInProject(){\r\n  try {\r\n    console.log(\"Inside update published saga\")\r\n    let projectId = yield select(selectCurrentProjectId)\r\n    let resp = yield fetch(`http://127.0.0.1:5000/publish/${projectId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      yield put( UpdatePublishedInProjectSuccess(resp.message))\r\n      yield delay(500)\r\n      yield put(fetchCurrentProjectStart(projectId))\r\n    }else{\r\n      yield put(UpdatePublishedInProjectFailure(resp.message))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n  }\r\n\r\nexport function* onCurrentProjectFetchStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.FETCH_CURRENT_PROJECT_START , fetchCurrentProject)\r\n}\r\n\r\nexport function* onCurrentProjectDeleteStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.DELETE_CURRENT_PROJECT_START, deleteCurrentProject)\r\n}\r\n\r\nexport function* onInviteUserStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.INVITE_USER_START, inviteUser)\r\n}\r\n\r\nexport function* onUpdateUserStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.UPDATE_USER_IN_PROJECT_START, updateUserInProject)\r\n}\r\n\r\nexport function* onUpdatePublishedStart(){\r\n  yield takeLatest(CurrentProjectActionTypes.UPDATE_PUBLISHED_IN_PROJECT_START, updatePublishedInProject)\r\n}\r\n\r\nexport function* currentProjectSagas() {\r\n  yield all([\r\n    call(onCurrentProjectFetchStart),\r\n    call(onCurrentProjectDeleteStart),\r\n    call(onInviteUserStart),\r\n    call(onUpdateUserStart),\r\n    call(onUpdatePublishedStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}