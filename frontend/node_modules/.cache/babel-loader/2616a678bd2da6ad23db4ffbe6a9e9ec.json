{"ast":null,"code":"import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\nimport { selectCurrentTaskId } from \"../current-task/current-task.selectors\";\nimport { completeStepQuestionSuccess, fetchCurrentStepFailure, fetchCurrentStepSuccess, completeStepQuestionFailure, completeStepSuccess, completeStepFailure, deleteCurrentStepSuccess, deleteCurrentStepFailure, fetchCurrentStepStart } from \"./current-step.actions\";\nimport { selectCurrentStepId } from \"./current-step.selectors\";\nimport { CurrentStepActionTypes } from \"./current-step.types\";\nimport { deleteStepFromReducer } from '../current-task/current-task.actions';\nexport function* fetchCurrentStep({\n  payload\n}) {\n  try {\n    const stepId = payload;\n    console.log(stepId);\n    let currentStep = yield fetch(`http://127.0.0.1:5000/step/${stepId}`);\n    currentStep = yield currentStep.json();\n    console.log(currentStep.step);\n    currentStep.done ? yield put(fetchCurrentStepSuccess(currentStep.step)) : yield put(fetchCurrentStepFailure('CURRENT PROJECCT FETTCHING FAILED'));\n  } catch (error) {\n    fetchCurrentStepFailure(error);\n  }\n}\nexport function* completeStepQuestion({\n  payload\n}) {\n  const stepId = payload;\n\n  try {\n    let stepQuestionCompletion = yield fetch(`http://127.0.0.1:5000/complete-step-question/${stepId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    stepQuestionCompletion = yield stepQuestionCompletion.json();\n    stepQuestionCompletion.done ? yield put(completeStepQuestionSuccess(stepQuestionCompletion.message)) : yield put(completeStepQuestionFailure(stepQuestionCompletion.error));\n    yield delay(500);\n    yield put(fetchCurrentStepStart(stepId));\n  } catch (error) {\n    yield put(completeStepQuestionFailure(error));\n    console.log(error);\n  }\n}\nexport function* completeStep({\n  payload\n}) {\n  let data = payload;\n  const stepId = data.stepId;\n\n  try {\n    let stepCompletion = yield fetch(`http://127.0.0.1:5000/complete-step/${stepId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    stepCompletion = yield stepCompletion.json();\n    stepCompletion.done ? yield put(completeStepSuccess(stepCompletion.message)) : yield put(completeStepFailure(stepCompletion.error));\n  } catch (error) {\n    yield put(completeStepFailure(error));\n    console.log(error);\n  }\n}\nexport function* deleteStep({\n  payload\n}) {\n  try {\n    let stepId = payload;\n    let taskId = yield select(selectCurrentTaskId);\n    yield put(deleteStepFromReducer(stepId));\n    taskId = {\n      taskId: taskId\n    };\n    console.log(taskId);\n    let stepDeleteion = yield fetch(`http://127.0.0.1:5000/step/${stepId}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(taskId)\n    });\n    stepDeleteion = yield stepDeleteion.json();\n\n    if (stepDeleteion.done) {\n      yield put(deleteCurrentStepSuccess(stepDeleteion.message));\n    } else {\n      yield put(deleteCurrentStepFailure(stepDeleteion.error));\n    }\n  } catch (error) {\n    console.log(error);\n    yield put(deleteCurrentStepFailure(error));\n  }\n}\nexport function* onStepQuestionCompletionStart() {\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_QUESTION_START, completeStepQuestion);\n}\nexport function* onStepCompletionStart() {\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_START, completeStep);\n}\nexport function* onCurrentStepFetchStart() {\n  yield takeLatest(CurrentStepActionTypes.FETCH_CURRENT_STEP_START, fetchCurrentStep);\n}\nexport function* deleteCurrentStep() {\n  yield takeLatest(CurrentStepActionTypes.DELETE_CURRENT_STEP_START, deleteStep);\n}\nexport function* currentStepSagas() {\n  yield all([call(onCurrentStepFetchStart), call(onStepQuestionCompletionStart), call(onStepCompletionStart), call(deleteCurrentStep)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/current-step/current-step.sagas.js"],"names":["all","call","put","takeLatest","select","delay","selectCurrentTaskId","completeStepQuestionSuccess","fetchCurrentStepFailure","fetchCurrentStepSuccess","completeStepQuestionFailure","completeStepSuccess","completeStepFailure","deleteCurrentStepSuccess","deleteCurrentStepFailure","fetchCurrentStepStart","selectCurrentStepId","CurrentStepActionTypes","deleteStepFromReducer","fetchCurrentStep","payload","stepId","console","log","currentStep","fetch","json","step","done","error","completeStepQuestion","stepQuestionCompletion","method","headers","message","completeStep","data","stepCompletion","body","JSON","stringify","deleteStep","taskId","stepDeleteion","onStepQuestionCompletionStart","COMPLETE_STEP_QUESTION_START","onStepCompletionStart","COMPLETE_STEP_START","onCurrentStepFetchStart","FETCH_CURRENT_STEP_START","deleteCurrentStep","DELETE_CURRENT_STEP_START","currentStepSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select, delay} from \"redux-saga/effects\";\r\nimport { selectCurrentTaskId } from \"../current-task/current-task.selectors\";\r\nimport {completeStepQuestionSuccess, fetchCurrentStepFailure, fetchCurrentStepSuccess, completeStepQuestionFailure, completeStepSuccess, completeStepFailure, deleteCurrentStepSuccess, deleteCurrentStepFailure, fetchCurrentStepStart } from \"./current-step.actions\";\r\nimport { selectCurrentStepId } from \"./current-step.selectors\";\r\nimport { CurrentStepActionTypes } from \"./current-step.types\";\r\nimport {deleteStepFromReducer} from '../current-task/current-task.actions'\r\n\r\nexport function* fetchCurrentStep({payload}){\r\n  try {\r\n      const stepId = payload\r\n      console.log(stepId)\r\n    let currentStep = yield fetch(`http://127.0.0.1:5000/step/${stepId}`)\r\n    currentStep = yield currentStep.json()\r\n    console.log(currentStep.step)\r\n    currentStep.done\r\n    ? yield put(fetchCurrentStepSuccess(currentStep.step))\r\n    : yield put(fetchCurrentStepFailure('CURRENT PROJECCT FETTCHING FAILED'))\r\n  } catch (error) {\r\n    fetchCurrentStepFailure(error)\r\n  }\r\n}\r\n\r\nexport function* completeStepQuestion({payload}){\r\n  const stepId = payload\r\n  try {\r\n    let stepQuestionCompletion = yield fetch(`http://127.0.0.1:5000/complete-step-question/${stepId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    stepQuestionCompletion = yield stepQuestionCompletion.json()\r\n    stepQuestionCompletion.done ? \r\n    yield put(completeStepQuestionSuccess(stepQuestionCompletion.message)):\r\n    yield put(completeStepQuestionFailure(stepQuestionCompletion.error))\r\n    yield delay(500)\r\n    yield put(fetchCurrentStepStart(stepId))\r\n  } catch (error) {\r\n    yield put(completeStepQuestionFailure(error))\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* completeStep({payload}){\r\n  let data = payload\r\n  const stepId = data.stepId\r\n  try {\r\n    let stepCompletion = yield fetch(`http://127.0.0.1:5000/complete-step/${stepId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    stepCompletion = yield stepCompletion.json()\r\n    stepCompletion.done ? \r\n    yield put(completeStepSuccess(stepCompletion.message)):\r\n    yield put(completeStepFailure(stepCompletion.error))\r\n  } catch (error) {\r\n    yield put(completeStepFailure(error))\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* deleteStep({ payload }) {\r\n  try {\r\n    let stepId = payload;\r\n    let taskId = yield select(selectCurrentTaskId)\r\n    yield put(deleteStepFromReducer(stepId))\r\n    taskId = { taskId: taskId };\r\n    console.log(taskId);\r\n    let stepDeleteion = yield fetch(`http://127.0.0.1:5000/step/${stepId}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(taskId),\r\n    });\r\n    stepDeleteion = yield stepDeleteion.json();\r\n    if (stepDeleteion.done) {\r\n      yield put(deleteCurrentStepSuccess(stepDeleteion.message));\r\n    } else {\r\n      yield put(deleteCurrentStepFailure(stepDeleteion.error));\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    yield put(deleteCurrentStepFailure(error));\r\n  }\r\n}\r\n\r\nexport function* onStepQuestionCompletionStart(){\r\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_QUESTION_START, completeStepQuestion)\r\n}\r\n\r\nexport function* onStepCompletionStart(){\r\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_START, completeStep)\r\n}\r\n\r\nexport function* onCurrentStepFetchStart(){\r\n  yield takeLatest(CurrentStepActionTypes.FETCH_CURRENT_STEP_START , fetchCurrentStep)\r\n}\r\n\r\nexport function* deleteCurrentStep(){\r\n  yield takeLatest(CurrentStepActionTypes.DELETE_CURRENT_STEP_START , deleteStep)\r\n}\r\n\r\nexport function* currentStepSagas() {\r\n  yield all([\r\n    call(onCurrentStepFetchStart),\r\n    call(onStepQuestionCompletionStart),\r\n    call(onStepCompletionStart),\r\n    call(deleteCurrentStep)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}