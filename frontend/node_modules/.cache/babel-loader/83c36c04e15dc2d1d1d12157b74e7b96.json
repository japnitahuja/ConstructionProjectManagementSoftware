{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project\\\\project.page.js\";\nimport React, { Component } from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CreateTaskForm from \"../../components/create-task-form/create-task-form.component\";\nimport { fetchCurrentProjectStart } from \"../../redux/current-project/current-project.actions\";\nimport { selectCurrentProjectName, selectCurrentProjectStatus, selectCurrentProjectTasks } from \"../../redux/current-project/current-project.selectors\";\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\nimport LowerNavBar from \"../../components/lower-nav-bar/lower-nav-bar.component\";\nimport TaskListContainer from \"../../components/tasks-list/tasks-list.container\";\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\nimport AdminPanelTaskPage from \"../../components/admin-panel-task-page/admin-panel-task-page.component\";\nimport ToggleButton from \"../../components/toggle-button/toggle-button.component\";\nimport { Overlay } from \"../../components/admin-panel-task-page/admin-panel-task-page.styles\";\nimport NoResult from \"../../components/no-result/no-result.component\";\nimport TasksFilter from \"../../components/tasks-filter/tasks-filter.component\";\nimport { selectfetchTasksSuccess } from \"../../redux/all-tasks/all-tasks.selectors\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Project extends Component {\n  constructor() {\n    super();\n\n    this.adminToggle = () => {\n      this.setState(prevState => ({\n        adminSwitch: !prevState.adminSwitch\n      }));\n    };\n\n    this.search = searchedText => {\n      let temp = this.props.tasks;\n\n      if (searchedText) {\n        temp = temp.filter(({\n          taskName\n        }) => {\n          return taskName.toLowerCase().includes(searchedText.toLowerCase());\n        });\n      }\n\n      this.setState({\n        tasksList: temp\n      });\n    };\n\n    this.toggleSearchBar = () => {\n      this.setState(prevState => ({\n        showSearch: !prevState.showSearch\n      }));\n    };\n\n    this.toggleFilter = () => {\n      this.setState(prevState => ({\n        showFilter: !prevState.showFilter\n      }));\n    };\n\n    this.setTaskState = () => {\n      this.setState({\n        tasksList: this.props.projects,\n        setTasks: 1\n      });\n    };\n\n    this.state = {\n      adminSwitch: false,\n      tasksList: [],\n      showSearch: false,\n      showFilter: false,\n      setTasks: 0\n    };\n  }\n\n  componentDidMount() {\n    const projectId = this.props.match.params.projectId;\n    console.log(this.props.match.params.projectId);\n    this.props.fetchProjects(projectId);\n    this.setState({\n      tasksList: this.props.tasks\n    });\n  }\n\n  render() {\n    const {\n      projectName\n    } = this.props;\n    const {\n      tasksList\n    } = this.state;\n    console.log(\"project page\");\n    console.log(tasksList);\n    let {\n      projectsFetched\n    } = this.props;\n\n    if (!projectsFetched) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \" Loading... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 14\n      }, this);\n    } else if (projectsFetched && this.state.setProjects == 0) {\n      this.setProjectState();\n    }\n\n    if (!projectsList) {\n      projectsList = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"5em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName,\n        toggleSearch: this.toggleSearchBar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), this.state.showSearch ? /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search Tasks...\",\n        search: this.search,\n        toggleFilter: this.toggleFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"1em\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n          borderBottom: \"1px solid #BCC5D3\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          onToggleFunction: this.adminToggle,\n          checked: this.state.adminSwitch,\n          color: \"#6C5FCF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"1em\",\n            color: \"#666666\",\n            margin: \"0\",\n            paddingLeft: \"0.5em\"\n          },\n          children: \"Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 121,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this), this.state.adminSwitch ? /*#__PURE__*/_jsxDEV(AdminPanelTaskPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 35\n      }, this) : null, tasksList.length === 0 ? /*#__PURE__*/_jsxDEV(NoResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TaskListContainer, {\n        tasks: tasksList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {\n        projectId: this.props.match.params.projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 9\n      }, this), this.state.showFilter ? /*#__PURE__*/_jsxDEV(Overlay, {\n        backgroundcolor: \"rgba(0,0,0,0.3)\",\n        style: {\n          bottom: \"0\",\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(TasksFilter, {\n          exit: this.toggleFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  projectName: selectCurrentProjectName,\n  projectStatus: selectCurrentProjectStatus,\n  tasks: selectCurrentProjectTasks,\n  fetchTasksSuccess: selectfetchTasksSuccess\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProjects: projectId => dispatch(fetchCurrentProjectStart(projectId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project/project.page.js"],"names":["React","Component","createStructuredSelector","connect","CreateTaskForm","fetchCurrentProjectStart","selectCurrentProjectName","selectCurrentProjectStatus","selectCurrentProjectTasks","TaskNav","LowerNavBar","TaskListContainer","SearchBar","AdminPanelTaskPage","ToggleButton","Overlay","NoResult","TasksFilter","selectfetchTasksSuccess","Project","constructor","adminToggle","setState","prevState","adminSwitch","search","searchedText","temp","props","tasks","filter","taskName","toLowerCase","includes","tasksList","toggleSearchBar","showSearch","toggleFilter","showFilter","setTaskState","projects","setTasks","state","componentDidMount","projectId","match","params","console","log","fetchProjects","render","projectName","projectsFetched","setProjects","setProjectState","projectsList","marginBottom","padding","display","flexDirection","justifyContent","alignItems","borderBottom","fontSize","color","margin","paddingLeft","length","bottom","height","mapStateToProps","projectStatus","fetchTasksSuccess","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport CreateTaskForm from \"../../components/create-task-form/create-task-form.component\";\r\nimport { fetchCurrentProjectStart } from \"../../redux/current-project/current-project.actions\";\r\nimport {\r\n  selectCurrentProjectName,\r\n  selectCurrentProjectStatus,\r\n  selectCurrentProjectTasks,\r\n} from \"../../redux/current-project/current-project.selectors\";\r\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\r\nimport LowerNavBar from \"../../components/lower-nav-bar/lower-nav-bar.component\";\r\nimport TaskListContainer from \"../../components/tasks-list/tasks-list.container\";\r\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\r\nimport AdminPanelTaskPage from \"../../components/admin-panel-task-page/admin-panel-task-page.component\";\r\nimport ToggleButton from \"../../components/toggle-button/toggle-button.component\";\r\nimport { Overlay } from \"../../components/admin-panel-task-page/admin-panel-task-page.styles\";\r\nimport NoResult from \"../../components/no-result/no-result.component\";\r\nimport TasksFilter from \"../../components/tasks-filter/tasks-filter.component\";\r\nimport { selectfetchTasksSuccess } from \"../../redux/all-tasks/all-tasks.selectors\";\r\n\r\nclass Project extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      adminSwitch: false,\r\n      tasksList: [],\r\n      showSearch: false,\r\n      showFilter: false,\r\n      setTasks: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const projectId = this.props.match.params.projectId;\r\n    console.log(this.props.match.params.projectId);\r\n    this.props.fetchProjects(projectId);\r\n    this.setState({ tasksList: this.props.tasks });\r\n  }\r\n\r\n  adminToggle = () => {\r\n    this.setState((prevState) => ({\r\n      adminSwitch: !prevState.adminSwitch,\r\n    }));\r\n  };\r\n\r\n  search = (searchedText) => {\r\n    let temp = this.props.tasks;\r\n\r\n    if (searchedText) {\r\n      temp = temp.filter(({ taskName }) => {\r\n        return taskName.toLowerCase().includes(searchedText.toLowerCase());\r\n      });\r\n    }\r\n\r\n    this.setState({ tasksList: temp });\r\n  };\r\n\r\n  toggleSearchBar = () => {\r\n    this.setState((prevState) => ({\r\n      showSearch: !prevState.showSearch,\r\n    }));\r\n  };\r\n\r\n  toggleFilter = () => {\r\n    this.setState((prevState) => ({\r\n      showFilter: !prevState.showFilter,\r\n    }));\r\n  };\r\n\r\n  setTaskState = () => {\r\n    this.setState({\r\n      tasksList: this.props.projects,\r\n      setTasks: 1,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { projectName } = this.props;\r\n    const { tasksList } = this.state;\r\n    console.log(\"project page\");\r\n    console.log(tasksList);\r\n\r\n    let { projectsFetched } = this.props;\r\n\r\n    if (!projectsFetched) {\r\n      return <div> Loading... </div>;\r\n    } else if (projectsFetched && this.state.setProjects == 0) {\r\n      this.setProjectState();\r\n    }\r\n\r\n    if (!projectsList) {\r\n      projectsList = [];\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginBottom: \"5em\" }}>\r\n        <TaskNav title={projectName} toggleSearch={this.toggleSearchBar} />\r\n        {this.state.showSearch ? (\r\n          <SearchBar\r\n            placeholder=\"Search Tasks...\"\r\n            search={this.search}\r\n            toggleFilter={this.toggleFilter}\r\n          />\r\n        ) : null}\r\n        <div\r\n          style={{\r\n            padding: \"1em\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-end\",\r\n            alignItems: \"center\",\r\n            borderBottom: \"1px solid #BCC5D3\",\r\n          }}\r\n        >\r\n          <ToggleButton\r\n            onToggleFunction={this.adminToggle}\r\n            checked={this.state.adminSwitch}\r\n            color=\"#6C5FCF\"\r\n          />\r\n          <p\r\n            style={{\r\n              fontSize: \"1em\",\r\n              color: \"#666666\",\r\n              margin: \"0\",\r\n              paddingLeft: \"0.5em\",\r\n            }}\r\n          >\r\n            Admin\r\n          </p>\r\n        </div>\r\n\r\n        {this.state.adminSwitch ? <AdminPanelTaskPage /> : null}\r\n        {tasksList.length === 0 ? (\r\n          <NoResult />\r\n        ) : (\r\n          <TaskListContainer tasks={tasksList} />\r\n        )}\r\n        {/* <CreateTaskForm projectId = {this.props.match.params.projectId}/> */}\r\n        <LowerNavBar projectId={this.props.match.params.projectId} />\r\n\r\n        {this.state.showFilter ? (\r\n          <Overlay\r\n            backgroundcolor=\"rgba(0,0,0,0.3)\"\r\n            style={{\r\n              bottom: \"0\",\r\n              height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <TasksFilter exit={this.toggleFilter} />\r\n          </Overlay>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  projectName: selectCurrentProjectName,\r\n  projectStatus: selectCurrentProjectStatus,\r\n  tasks: selectCurrentProjectTasks,\r\n  fetchTasksSuccess: selectfetchTasksSuccess,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchProjects: (projectId) => dispatch(fetchCurrentProjectStart(projectId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);\r\n"]},"metadata":{},"sourceType":"module"}