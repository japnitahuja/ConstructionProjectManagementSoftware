{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project-schedule\\\\project-schedule.jsx\";\nimport React, { Component } from 'react';\nimport { selectCurrentProjectName, selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport { TaskNav } from '../../components/task-nav/task-nav.component';\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\nimport GanttChart from '../../components/gantt-chart/gantt-chart.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass ProjectSchedule extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      currentZoom: 'Days',\n      messages: []\n    };\n\n    this.logDataUpdate = (entityType, action, itemData, id) => {\n      let text = itemData && itemData.text ? ` (${itemData.text})` : '';\n      let message = `${entityType} ${action}: ${id} ${text}`;\n\n      if (entityType === 'link' && action !== 'delete') {\n        message += ` ( source: ${itemData.source}, target: ${itemData.target} )`;\n      }\n\n      this.addMessage(message);\n    };\n  }\n\n  addMessage(message) {\n    const maxLogLength = 5;\n    const newMessate = {\n      message\n    };\n    const messages = [newMessate, ...this.state.messages];\n\n    if (messages.length > maxLogLength) {\n      messages.length = maxLogLength;\n    }\n\n    this.setState({\n      messages\n    });\n  }\n\n  render() {\n    const {\n      tasks,\n      projectName\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GanttChart, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.state.messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  tasks: selectCurrentProjectTasks,\n  projectName: selectCurrentProjectName\n});\n\nconst mapDispatchToProps = dispatch => ({});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProjectSchedule);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project-schedule/project-schedule.jsx"],"names":["React","Component","selectCurrentProjectName","selectCurrentProjectTasks","createStructuredSelector","connect","TaskNav","LowerNavBar","GanttChart","ProjectSchedule","state","currentZoom","messages","logDataUpdate","entityType","action","itemData","id","text","message","source","target","addMessage","maxLogLength","newMessate","length","setState","render","tasks","projectName","props","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,wBAAT,EAAmCC,yBAAnC,QAAoE,uDAApE;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,8CAAxB;AACA,OAAOC,WAAP,MAAwB,wDAAxB;AACA,OAAOC,UAAP,MAAuB,oDAAvB;;;AAEA,MAAMC,eAAN,SAA8BR,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEpCS,KAFoC,GAE5B;AACJC,MAAAA,WAAW,EAAE,MADT;AAEJC,MAAAA,QAAQ,EAAE;AAFN,KAF4B;;AAAA,SAoBpCC,aApBoC,GAoBpB,CAACC,UAAD,EAAaC,MAAb,EAAqBC,QAArB,EAA+BC,EAA/B,KAAsC;AAClD,UAAIC,IAAI,GAAGF,QAAQ,IAAIA,QAAQ,CAACE,IAArB,GAA6B,KAAIF,QAAQ,CAACE,IAAK,GAA/C,GAAmD,EAA9D;AACA,UAAIC,OAAO,GAAI,GAAEL,UAAW,IAAGC,MAAO,KAAIE,EAAG,IAAGC,IAAK,EAArD;;AACA,UAAIJ,UAAU,KAAK,MAAf,IAAyBC,MAAM,KAAK,QAAxC,EAAmD;AAC/CI,QAAAA,OAAO,IAAK,cAAaH,QAAQ,CAACI,MAAO,aAAYJ,QAAQ,CAACK,MAAO,IAArE;AACH;;AACD,WAAKC,UAAL,CAAgBH,OAAhB;AACH,KA3BmC;AAAA;;AAMpCG,EAAAA,UAAU,CAACH,OAAD,EAAU;AAChB,UAAMI,YAAY,GAAG,CAArB;AACA,UAAMC,UAAU,GAAG;AAAEL,MAAAA;AAAF,KAAnB;AACA,UAAMP,QAAQ,GAAG,CACbY,UADa,EAEb,GAAG,KAAKd,KAAL,CAAWE,QAFD,CAAjB;;AAKA,QAAIA,QAAQ,CAACa,MAAT,GAAkBF,YAAtB,EAAoC;AAChCX,MAAAA,QAAQ,CAACa,MAAT,GAAkBF,YAAlB;AACH;;AACD,SAAKG,QAAL,CAAc;AAAEd,MAAAA;AAAF,KAAd;AACH;;AAWDe,EAAAA,MAAM,GAAG;AACL,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKC,KAAlC;AAEA,wBACK;AAAA,8BACG,QAAC,OAAD;AAAS,QAAA,KAAK,EAAID;AAAlB;AAAA;AAAA;AAAA;AAAA,cADH,eAEG,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA,cAFH,eAGG,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA,cAHH,eAIG;AAAA,kBAAM,KAAKnB,KAAL,CAAWE;AAAjB;AAAA;AAAA;AAAA;AAAA,cAJH;AAAA;AAAA;AAAA;AAAA;AAAA,YADL;AAQH;;AAxCmC;;AA2CxC,MAAMmB,eAAe,GAAG3B,wBAAwB,CAAC;AAC7CwB,EAAAA,KAAK,EAAEzB,yBADsC;AAE7C0B,EAAAA,WAAW,EAAE3B;AAFgC,CAAD,CAAhD;;AAKE,MAAM8B,kBAAkB,GAAIC,QAAD,KAAe,EAAf,CAA3B;;AAKA,eAAe5B,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CvB,eAA7C,CAAf","sourcesContent":["import React, { Component } from 'react'\r\nimport { selectCurrentProjectName, selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport { TaskNav } from '../../components/task-nav/task-nav.component';\r\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\r\nimport GanttChart from '../../components/gantt-chart/gantt-chart.component';\r\n\r\nclass ProjectSchedule extends Component {\r\n\r\n    state = {\r\n        currentZoom: 'Days',\r\n        messages: [],\r\n    };\r\n    addMessage(message) {\r\n        const maxLogLength = 5;\r\n        const newMessate = { message };\r\n        const messages = [\r\n            newMessate,\r\n            ...this.state.messages\r\n        ];\r\n\r\n        if (messages.length > maxLogLength) {\r\n            messages.length = maxLogLength;\r\n        }\r\n        this.setState({ messages });\r\n    }\r\n\r\n    logDataUpdate = (entityType, action, itemData, id) => {\r\n        let text = itemData && itemData.text ? ` (${itemData.text})`: '';\r\n        let message = `${entityType} ${action}: ${id} ${text}`;\r\n        if (entityType === 'link' && action !== 'delete' ) {\r\n            message += ` ( source: ${itemData.source}, target: ${itemData.target} )`;\r\n        }\r\n        this.addMessage(message);\r\n    }\r\n\r\n    render() {\r\n        const {tasks, projectName} = this.props;\r\n\r\n        return (\r\n             <div>\r\n                <TaskNav title = {projectName}/>\r\n                <GanttChart/>\r\n                <LowerNavBar/>\r\n                <div>{this.state.messages}</div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    tasks: selectCurrentProjectTasks,\r\n    projectName: selectCurrentProjectName\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n      \r\n    \r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(ProjectSchedule);"]},"metadata":{},"sourceType":"module"}