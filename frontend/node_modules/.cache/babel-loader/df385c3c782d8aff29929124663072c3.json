{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\task-item\\\\task-item.component.jsx\";\nimport React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Image, DropDownContent, DropDownOption, SmallCircle, TaskDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, ProgressBar, Progress, ProgressDiv } from \"./task-item.styles\";\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { deleteCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\nimport { CheckBox } from \"../checkbox/checkbox.component\";\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\nimport removeImage from \"../../assets/remove.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TaskItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleClickOutside = event => {\n      if (this.dropdownContainer.current && !this.dropdownContainer.current.contains(event.target)) {\n        this.setState({\n          removeDropdownSwitch: false\n        });\n      }\n    };\n\n    this.toggleRemoveDropdown = () => {\n      this.setState(prevState => ({\n        removeDropdownSwitch: !prevState.removeDropdownSwitch\n      }));\n    };\n\n    this.deleteTask = e => {\n      e.preventDefault();\n      this.props.deleteTask(e.target.dataset.id);\n      window.location.reload();\n    };\n\n    this.dropdownContainer = /*#__PURE__*/React.createRef();\n    this.state = {\n      taskDetails: this.props.taskDetails,\n      removeDropdownSwitch: false\n    };\n  }\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  render() {\n    const {\n      _id,\n      index,\n      taskName,\n      completionPercentage,\n      completedSteps,\n      totalSteps,\n      isTaskDone\n    } = this.state.taskDetails;\n    console.log(this.state.taskDetails);\n    return /*#__PURE__*/_jsxDEV(TaskDiv, {\n      children: [/*#__PURE__*/_jsxDEV(LeftDiv, {\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/task/${_id}`,\n          style: {\n            textDecoration: 'none'\n          },\n          children: [/*#__PURE__*/_jsxDEV(SmallText, {\n            children: [\"TASK - \", index + 1]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(BigText, {\n            children: taskName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(ProgressDiv, {\n            children: [/*#__PURE__*/_jsxDEV(ProgressBar, {\n              children: /*#__PURE__*/_jsxDEV(Progress, {\n                style: {\n                  width: `${completionPercentage}%`\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n              style: {\n                color: \"#666666\"\n              },\n              children: [completedSteps, \"/\", totalSteps, \"  \\xA0 (\", isNaN(completedSteps / totalSteps * 100) ? 0 : completedSteps / totalSteps * 100, \"%)\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(RightDiv, {\n        children: isTaskDone ? /*#__PURE__*/_jsxDEV(CheckBox, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 37\n        }, this) : /*#__PURE__*/_jsxDEV(Circle, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 50\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = dispatch => ({\n  deleteTask: taskId => dispatch(deleteCurrentTaskStart(taskId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskItem);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/task-item/task-item.component.jsx"],"names":["React","Component","Link","Image","DropDownContent","DropDownOption","SmallCircle","TaskDiv","LeftDiv","RightDiv","BigText","SmallText","Circle","ProgressBar","Progress","ProgressDiv","connect","createStructuredSelector","deleteCurrentTaskStart","CheckBox","DeleteButton","removeImage","TaskItem","constructor","props","handleClickOutside","event","dropdownContainer","current","contains","target","setState","removeDropdownSwitch","toggleRemoveDropdown","prevState","deleteTask","e","preventDefault","dataset","id","window","location","reload","createRef","state","taskDetails","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","render","_id","index","taskName","completionPercentage","completedSteps","totalSteps","isTaskDone","console","log","textDecoration","width","color","isNaN","mapStateToProps","mapDispatchToProps","dispatch","taskId"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport { Image, DropDownContent, DropDownOption , SmallCircle, TaskDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, ProgressBar, Progress, ProgressDiv} from \"./task-item.styles\";\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { deleteCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\r\nimport { CheckBox } from \"../checkbox/checkbox.component\";\r\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\r\nimport removeImage from \"../../assets/remove.png\"\r\n\r\n\r\nclass TaskItem extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.dropdownContainer = React.createRef();\r\n        this.state = {\r\n            taskDetails: this.props.taskDetails, \r\n            removeDropdownSwitch: false\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        document.addEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n      document.removeEventListener(\"mousedown\", this.handleClickOutside);\r\n    }\r\n\r\n    handleClickOutside = (event) => {\r\n        if (\r\n          this.dropdownContainer.current &&\r\n          !this.dropdownContainer.current.contains(event.target)\r\n        ) {\r\n          this.setState({\r\n            removeDropdownSwitch: false,\r\n          });\r\n        }\r\n      };\r\n\r\n    toggleRemoveDropdown = () => {\r\n        this.setState((prevState)=>({\r\n            removeDropdownSwitch: !prevState.removeDropdownSwitch\r\n        }))\r\n    }\r\n\r\n    deleteTask = (e) => {\r\n        e.preventDefault()\r\n        \r\n        this.props.deleteTask(e.target.dataset.id);\r\n\r\n        window.location.reload()\r\n    }\r\n    \r\n    render (){\r\n        const {_id, index, taskName, completionPercentage, completedSteps, totalSteps, isTaskDone} = this.state.taskDetails;\r\n        console.log(this.state.taskDetails)\r\n        return (\r\n            <TaskDiv>\r\n                <LeftDiv>\r\n                <Link to={`/task/${_id}`} style={{textDecoration:'none'}}> \r\n                    <SmallText>TASK - {index + 1}</SmallText>\r\n                    <BigText>{taskName}</BigText>\r\n                    <ProgressDiv>\r\n                        <ProgressBar>\r\n                            <Progress style={{width:`${completionPercentage}%`}}/>\r\n                        </ProgressBar>\r\n                        <SmallText style={{color:\"#666666\"}}> \r\n                        {completedSteps}/{totalSteps}  &nbsp;\r\n                        ({isNaN(completedSteps/totalSteps*100)?0:completedSteps/totalSteps*100}%)\r\n                        </SmallText>\r\n                    </ProgressDiv>\r\n                    </Link>\r\n                </LeftDiv>\r\n                \r\n                <RightDiv>\r\n                    {\r\n                        isTaskDone? <CheckBox/>: <Circle/>\r\n                    }\r\n  \r\n                </RightDiv>\r\n            </TaskDiv>\r\n        \r\n    )}\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    deleteTask : (taskId) => dispatch(deleteCurrentTaskStart(taskId))\r\n  });\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(TaskItem);\r\n"]},"metadata":{},"sourceType":"module"}