{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\step\\\\step.page.jsx\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { BrowserRouter, Link } from 'react-router-dom';\nimport { withRouter } from 'react-router-dom';\nimport { createStructuredSelector } from 'reselect';\nimport StepNavBar from '../../components/step-navbar/step-navbar.component';\nimport StepPageTaskNav from '../../components/step-page-task-nav/step-page-task-nav.component';\nimport { selectCurrentProjectId } from '../../redux/current-project/current-project.selectors';\nimport { completeStepQuestionStart, completeStepStart } from '../../redux/current-step/current-step.actions';\nimport { fetchCurrentStepStart } from '../../redux/current-step/current-step.actions';\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors';\nimport { selectCurrentTaskId } from '../../redux/current-task/current-task.selectors';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Step extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.submitQuestion = () => {\n      const {\n        stepId,\n        completeStepQuestion\n      } = this.props;\n      completeStepQuestion(stepId);\n      this.props.fetchCurrentStep(stepId);\n      window.location.reload();\n    };\n\n    this.completeStep = async () => {\n      const {\n        stepId,\n        completeStep,\n        taskId,\n        history\n      } = this.props;\n      const data = {\n        stepId,\n        taskId\n      };\n      console.log(data);\n      await completeStep(data);\n      history.push(`/task/${taskId}`);\n    };\n  }\n\n  componentDidMount() {\n    const stepId = this.props.match.params.stepId;\n    this.props.fetchCurrentStep(stepId);\n    console.log(stepId);\n  }\n\n  render() {\n    const {\n      projectId,\n      taskId,\n      stepName,\n      stepQuestion,\n      isStepQuestionAnswered,\n      stepCompletionMessage,\n      isStepDone\n    } = this.props;\n    console.log(stepCompletionMessage);\n\n    if (stepCompletionMessage) {\n      console.log(stepCompletionMessage);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        padding: \"10px\",\n        border: \"1px solid black\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(StepPageTaskNav, {\n        projectId: projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StepNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"Step: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: stepName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), stepQuestion ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Question: \", stepQuestion, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 49\n        }, this), isStepQuestionAnswered ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: \"Question has been answered\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 53\n        }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.submitQuestion,\n          children: \"COMPLETE STEP QUESTION\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 93\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 21\n      }, this) : null, isStepDone ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"STEP COMPLETED\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.completeStep,\n        children: \"COMPLETE STEP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 62\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: stepCompletionMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  stepId: selectCurrentStepId,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone,\n  taskId: selectCurrentTaskId,\n  projectId: selectCurrentProjectId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: data => dispatch(completeStepStart(data))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Step));","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/step/step.page.jsx"],"names":["React","Component","connect","BrowserRouter","Link","withRouter","createStructuredSelector","StepNavBar","StepPageTaskNav","selectCurrentProjectId","completeStepQuestionStart","completeStepStart","fetchCurrentStepStart","selectCurrentStepCompletionMessage","selectCurrentStepId","selectCurrentStepIsDone","selectCurrentStepName","selectCurrentStepQuestion","selectCurrentStepQuestionAnswerConfirmation","selectCurrentStepQuestionAnswered","selectCurrentTaskId","Step","submitQuestion","stepId","completeStepQuestion","props","fetchCurrentStep","window","location","reload","completeStep","taskId","history","data","console","log","push","componentDidMount","match","params","render","projectId","stepName","stepQuestion","isStepQuestionAnswered","stepCompletionMessage","isStepDone","padding","border","mapStateToProps","questionCompletion","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { BrowserRouter, Link } from 'react-router-dom'\r\nimport { withRouter } from 'react-router-dom';\r\nimport { createStructuredSelector } from 'reselect'\r\nimport StepNavBar from '../../components/step-navbar/step-navbar.component';\r\nimport StepPageTaskNav from '../../components/step-page-task-nav/step-page-task-nav.component';\r\nimport { selectCurrentProjectId } from '../../redux/current-project/current-project.selectors';\r\nimport { completeStepQuestionStart, completeStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { fetchCurrentStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors'\r\nimport { selectCurrentTaskId } from '../../redux/current-task/current-task.selectors';\r\n\r\n class Step extends Component {\r\n    componentDidMount(){\r\n        const stepId = this.props.match.params.stepId\r\n       this.props.fetchCurrentStep(stepId)\r\n       console.log(stepId)\r\n    }\r\n\r\n    submitQuestion = () => {\r\n        const {stepId, completeStepQuestion} = this.props\r\n        completeStepQuestion(stepId)\r\n        this.props.fetchCurrentStep(stepId)\r\n        window.location.reload()\r\n    }\r\n\r\n    completeStep = async() => {\r\n        const {stepId, completeStep, taskId, history} = this.props\r\n        const data = {stepId, taskId}\r\n        console.log(data)\r\n        await completeStep(data)\r\n        history.push(`/task/${taskId}`)\r\n        \r\n    }\r\n    render() {\r\n        const {projectId, taskId, stepName, stepQuestion, isStepQuestionAnswered, stepCompletionMessage, isStepDone} = this.props\r\n\r\n        console.log(stepCompletionMessage)\r\n        if(stepCompletionMessage){\r\n            console.log(stepCompletionMessage)\r\n        }\r\n        return (\r\n            <div style={{ padding: \"10px\", border: \"1px solid black\" }}>\r\n                <StepPageTaskNav projectId={projectId}/>\r\n                <StepNavBar />\r\n                <div>Step: </div>\r\n                <h2>{stepName}</h2>\r\n                \r\n                {\r\n                    stepQuestion?\r\n                    <div>\r\n                        Question: {stepQuestion}<br/>\r\n                        {\r\n                            isStepQuestionAnswered? <div>Question has been answered</div> : <button onClick={this.submitQuestion}>COMPLETE STEP QUESTION</button>\r\n                        }\r\n                        \r\n                    </div> \r\n                    : null\r\n                }\r\n                {\r\n                    isStepDone ? <div>STEP COMPLETED</div> : <button onClick={this.completeStep}>COMPLETE STEP</button>\r\n                }\r\n                <h3>{stepCompletionMessage}</h3>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    stepName: selectCurrentStepName,\r\n    stepQuestion: selectCurrentStepQuestion,\r\n    isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n    stepId: selectCurrentStepId,\r\n    questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n    stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n    isStepDone: selectCurrentStepIsDone,\r\n    taskId: selectCurrentTaskId,\r\n    projectId: selectCurrentProjectId\r\n\r\n});\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchCurrentStep : (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n    completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n    completeStep: (data) => dispatch(completeStepStart(data))\r\n  });\r\n  \r\n  export default connect(mapStateToProps, mapDispatchToProps)(withRouter(Step));\r\n"]},"metadata":{},"sourceType":"module"}