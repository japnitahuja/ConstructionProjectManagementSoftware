{"ast":null,"code":"import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\nimport { createProjectSucessful, createProjectFail, fetchProjectsStart, fetchProjectsFailure, fetchProjectsSuccess, createProjectTemplateSuccess, createProjectTemplateFailure } from \"./all-projects.actions\";\nimport { ProjectActionTypes } from \"./all-projects.types\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { selectCurrentOrganisationId } from \"../organisation/organisation.selectors\";\nexport function* createProject({\n  payload\n}) {\n  try {\n    let data = payload;\n    const orgId = yield select(selectCurrentOrganisationId);\n    data[\"organisationId\"] = orgId;\n    let userId = yield select(selectUserId);\n    console.log(userId);\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/create-project/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createProjectSucessful(resp.message));\n    } else {\n      yield put(createProjectFail(resp.error));\n    }\n\n    yield delay(500);\n    yield put(fetchProjectsStart());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchProjects({\n  payload\n}) {\n  try {\n    // const token = yield JSON.parse(localStorage.getItem('token'))\n    // console.log(token)\n    const token = localStorage.getItem(\"token\");\n    console.log(token);\n    let orgId = payload;\n    console.log(orgId, \"saga org id\");\n    let userId = yield select(selectUserId);\n    let projects = yield fetch(`http://127.0.0.1:5000/all-projects/${userId}/${orgId}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // \"Authorization\" : `Bearer ${token}`,\n        UserPermission: \"ADMIN\"\n      }\n    });\n    projects = yield projects.json();\n    console.log(projects, \"saga projects\");\n    projects.done ? yield put(fetchProjectsSuccess(projects.projects)) : yield put(fetchProjectsFailure(projects.error));\n  } catch (error) {\n    fetchProjectsFailure(error);\n  }\n}\nexport function* createProjectTemplate({\n  payload\n}) {\n  try {\n    let data = payload;\n    let userId = yield select(selectUserId);\n    console.log(userId);\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/test-template/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createProjectTemplateSuccess(resp.message));\n    } else {\n      yield put(createProjectTemplateFailure(resp.error));\n    }\n\n    yield delay(500);\n    yield put(fetchProjectsStart());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onProjectCreateStart() {\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_START, createProject);\n}\nexport function* onProjectFetchStart() {\n  yield takeLatest(ProjectActionTypes.FETCH_PROJECTS_START, fetchProjects);\n}\nexport function* OnProjectTemplateCreateStart() {\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_TEMPLATE_START, createProjectTemplate);\n}\n_c = OnProjectTemplateCreateStart;\nexport function* projectSagas() {\n  yield all([call(onProjectCreateStart), call(onProjectFetchStart), call(OnProjectTemplateCreateStart)]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"OnProjectTemplateCreateStart\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/all-projects/all-projects.sagas.js"],"names":["all","call","put","takeLatest","select","delay","createProjectSucessful","createProjectFail","fetchProjectsStart","fetchProjectsFailure","fetchProjectsSuccess","createProjectTemplateSuccess","createProjectTemplateFailure","ProjectActionTypes","selectUserId","selectCurrentOrganisationId","createProject","payload","data","orgId","userId","console","log","resp","fetch","method","headers","body","JSON","stringify","json","done","message","error","fetchProjects","token","localStorage","getItem","projects","UserPermission","createProjectTemplate","onProjectCreateStart","CREATE_PROJECT_START","onProjectFetchStart","FETCH_PROJECTS_START","OnProjectTemplateCreateStart","CREATE_PROJECT_TEMPLATE_START","projectSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\r\nimport {\r\n  createProjectSucessful,\r\n  createProjectFail,\r\n  fetchProjectsStart,\r\n  fetchProjectsFailure,\r\n  fetchProjectsSuccess,\r\n  createProjectTemplateSuccess,\r\n  createProjectTemplateFailure,\r\n} from \"./all-projects.actions\";\r\nimport { ProjectActionTypes } from \"./all-projects.types\";\r\nimport { selectUserId } from \"../user/user.selectors\";\r\nimport { selectCurrentOrganisationId } from \"../organisation/organisation.selectors\";\r\n\r\nexport function* createProject({ payload }) {\r\n  try {\r\n    let data = payload;\r\n    const orgId = yield select(selectCurrentOrganisationId);\r\n    data[\"organisationId\"] = orgId;\r\n    let userId = yield select(selectUserId);\r\n    console.log(userId);\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-project/${userId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json();\r\n    if (resp.done) {\r\n      yield put(createProjectSucessful(resp.message));\r\n    } else {\r\n      yield put(createProjectFail(resp.error));\r\n    }\r\n    yield delay(500);\r\n    yield put(fetchProjectsStart());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* fetchProjects({ payload }) {\r\n  try {\r\n    // const token = yield JSON.parse(localStorage.getItem('token'))\r\n    // console.log(token)\r\n    const token = localStorage.getItem(\"token\");\r\n    console.log(token);\r\n    let orgId = payload;\r\n    console.log(orgId, \"saga org id\");\r\n    let userId = yield select(selectUserId);\r\n    let projects = yield fetch(\r\n      `http://127.0.0.1:5000/all-projects/${userId}/${orgId}`,\r\n      {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          // \"Authorization\" : `Bearer ${token}`,\r\n          UserPermission: \"ADMIN\",\r\n        },\r\n      }\r\n    );\r\n    projects = yield projects.json();\r\n    console.log(projects, \"saga projects\");\r\n    projects.done\r\n      ? yield put(fetchProjectsSuccess(projects.projects))\r\n      : yield put(fetchProjectsFailure(projects.error));\r\n  } catch (error) {\r\n    fetchProjectsFailure(error);\r\n  }\r\n}\r\n\r\nexport function* createProjectTemplate({ payload }) {\r\n  try {\r\n    let data = payload;\r\n    let userId = yield select(selectUserId);\r\n    console.log(userId);\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/test-template/${userId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json();\r\n    if (resp.done) {\r\n      yield put(createProjectTemplateSuccess(resp.message));\r\n    } else {\r\n      yield put(createProjectTemplateFailure(resp.error));\r\n    }\r\n    yield delay(500);\r\n    yield put(fetchProjectsStart());\r\n  } catch (error) {\r\n    console.log(error);\r\n  }\r\n}\r\n\r\nexport function* onProjectCreateStart() {\r\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_START, createProject);\r\n}\r\n\r\nexport function* onProjectFetchStart() {\r\n  yield takeLatest(ProjectActionTypes.FETCH_PROJECTS_START, fetchProjects);\r\n}\r\n\r\nexport function* OnProjectTemplateCreateStart() {\r\n  yield takeLatest(\r\n    ProjectActionTypes.CREATE_PROJECT_TEMPLATE_START,\r\n    createProjectTemplate\r\n  );\r\n}\r\n\r\nexport function* projectSagas() {\r\n  yield all([\r\n    call(onProjectCreateStart),\r\n    call(onProjectFetchStart),\r\n    call(OnProjectTemplateCreateStart),\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}