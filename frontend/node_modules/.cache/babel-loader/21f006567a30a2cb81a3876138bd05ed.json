{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\task\\\\task.page.js\";\nimport React, { Component } from 'react';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CreateStepForm from '../../components/create-step-form/create-step-form.component';\nimport { completeCurrentTaskStart, fetchCurrentTaskStart } from '../../redux/current-task/current-task.actions';\nimport { selectCurrentTaskCompletionMessage, selectCurrentTaskCompletionPercentage, selectCurrentTaskEndDate, selectCurrentTaskIsDone, selectCurrentTaskName, selectCurrentTaskOwner, selectCurrentTaskStartDate, selectCurrentTaskSteps } from '../../redux/current-task/current-task.selectors';\nimport { Link, withRouter } from 'react-router-dom';\nimport { selectCurrentProjectId } from \"../../redux/current-project/current-project.selectors\";\nimport { completeStepQuestionStart, completeStepStart } from '../../redux/current-step/current-step.actions';\nimport { fetchCurrentStepStart } from '../../redux/current-step/current-step.actions';\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors';\nimport { selectCurrentTaskId } from '../../redux/current-task/current-task.selectors';\nimport { LongButton } from '../../components/long-button/long-button.styles';\nimport StepNav from '../../components/step-nav/step-nav.component';\nimport StepLowerNav from '../../components/step-lower-nav/step-lower-nav.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Task extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.completeTask = () => {\n      const taskId = this.props.match.params.taskId;\n      this.props.completeTask(taskId);\n\n      if (this.props.completionPercentage == 100) {\n        console.log(\"back\");\n        this.props.history.goBack();\n      }\n    };\n  }\n\n  componentDidMount() {\n    const taskId = this.props.match.params.taskId;\n    this.props.fetchSteps(taskId);\n    console.log(taskId);\n  }\n\n  render() {\n    const {\n      steps,\n      projectId,\n      taskName,\n      isTaskDone,\n      taskCompletionMessage,\n      taskOwner,\n      taskEndDate,\n      taskStartDate\n    } = this.props;\n    console.log('task page');\n    console.log(steps);\n    const taskId = this.props.match.params.taskId;\n    console.log(taskId);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StepNav, {\n        projectId: projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(StepLowerNav, {\n        steps: steps\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"center\", {\n        children: isTaskDone ? null : /*#__PURE__*/_jsxDEV(LongButton, {\n          style: {\n            backgroundColor: \"#205284\"\n          },\n          onClick: this.completeTask,\n          children: \"COMPLETE TASK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateStepForm, {\n        taskId: this.props.match.params.taskId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/purchaseOrders/${taskId}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"PURCHASE ORDERS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 56\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/changeOrders/${taskId}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"CHANGE ORDERS\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 54\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  steps: selectCurrentTaskSteps,\n  taskName: selectCurrentTaskName,\n  isTaskDone: selectCurrentTaskIsDone,\n  taskCompletionMessage: selectCurrentTaskCompletionMessage,\n  projectId: selectCurrentProjectId,\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  stepId: selectCurrentStepId,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone,\n  taskId: selectCurrentTaskId,\n  completionPercentage: selectCurrentTaskCompletionPercentage,\n  taskOwner: selectCurrentTaskOwner,\n  taskStartDate: selectCurrentTaskStartDate,\n  taskEndDate: selectCurrentTaskEndDate\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSteps: taskId => dispatch(fetchCurrentTaskStart(taskId)),\n  completeTask: taskId => dispatch(completeCurrentTaskStart(taskId)),\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: data => dispatch(completeStepStart(data))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Task));","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/task/task.page.js"],"names":["React","Component","createStructuredSelector","connect","CreateStepForm","completeCurrentTaskStart","fetchCurrentTaskStart","selectCurrentTaskCompletionMessage","selectCurrentTaskCompletionPercentage","selectCurrentTaskEndDate","selectCurrentTaskIsDone","selectCurrentTaskName","selectCurrentTaskOwner","selectCurrentTaskStartDate","selectCurrentTaskSteps","Link","withRouter","selectCurrentProjectId","completeStepQuestionStart","completeStepStart","fetchCurrentStepStart","selectCurrentStepCompletionMessage","selectCurrentStepId","selectCurrentStepIsDone","selectCurrentStepName","selectCurrentStepQuestion","selectCurrentStepQuestionAnswerConfirmation","selectCurrentStepQuestionAnswered","selectCurrentTaskId","LongButton","StepNav","StepLowerNav","Task","completeTask","taskId","props","match","params","completionPercentage","console","log","history","goBack","componentDidMount","fetchSteps","render","steps","projectId","taskName","isTaskDone","taskCompletionMessage","taskOwner","taskEndDate","taskStartDate","backgroundColor","mapStateToProps","stepName","stepQuestion","isStepQuestionAnswered","stepId","questionCompletion","stepCompletionMessage","isStepDone","mapDispatchToProps","dispatch","fetchCurrentStep","completeStepQuestion","completeStep","data"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport CreateStepForm from '../../components/create-step-form/create-step-form.component';\r\nimport { completeCurrentTaskStart, fetchCurrentTaskStart } from '../../redux/current-task/current-task.actions';\r\nimport { selectCurrentTaskCompletionMessage, selectCurrentTaskCompletionPercentage, selectCurrentTaskEndDate, selectCurrentTaskIsDone, selectCurrentTaskName, selectCurrentTaskOwner, selectCurrentTaskStartDate, selectCurrentTaskSteps } from '../../redux/current-task/current-task.selectors';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport {selectCurrentProjectId} from \"../../redux/current-project/current-project.selectors\";\r\nimport { completeStepQuestionStart, completeStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { fetchCurrentStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors'\r\nimport { selectCurrentTaskId } from '../../redux/current-task/current-task.selectors';\r\nimport { LongButton } from '../../components/long-button/long-button.styles';\r\nimport StepNav from '../../components/step-nav/step-nav.component'\r\nimport StepLowerNav from '../../components/step-lower-nav/step-lower-nav.component';\r\n\r\nclass Task extends Component {\r\n    componentDidMount(){\r\n        const taskId = this.props.match.params.taskId\r\n       this.props.fetchSteps(taskId)\r\n       console.log(taskId)\r\n    }\r\n    \r\n    completeTask = () => {\r\n        const taskId = this.props.match.params.taskId\r\n        this.props.completeTask(taskId)\r\n        if(this.props.completionPercentage == 100){\r\n            console.log(\"back\")\r\n            this.props.history.goBack()\r\n        }\r\n        \r\n    }\r\n\r\n    \r\n\r\n    render() {\r\n        const {steps,projectId, taskName, isTaskDone, taskCompletionMessage, taskOwner, taskEndDate, taskStartDate} = this.props;\r\n        console.log('task page')\r\n        console.log(steps)\r\n        const taskId = this.props.match.params.taskId\r\n        console.log(taskId)\r\n        return (\r\n            <div>\r\n                <StepNav projectId = {projectId}/>\r\n                <StepLowerNav steps={steps}/>\r\n                {/* <TaskList tasks = {tasks}/> */}\r\n                {/* <StepListContainer steps = {steps} /> */}\r\n                <br></br>\r\n                <center>\r\n                {\r\n                     isTaskDone ? \r\n                     null : \r\n                     <LongButton style={{backgroundColor: \"#205284\"}} onClick={this.completeTask}>COMPLETE TASK</LongButton> \r\n                 }\r\n\r\n                </center>\r\n                \r\n                {/* <h3>{taskCompletionMessage}</h3> */}\r\n                <CreateStepForm taskId = {this.props.match.params.taskId} />\r\n                <Link to={`/purchaseOrders/${taskId}`}><button>PURCHASE ORDERS</button></Link>\r\n                <Link to={`/changeOrders/${taskId}`}><button>CHANGE ORDERS</button></Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    steps: selectCurrentTaskSteps,\r\n    taskName: selectCurrentTaskName,\r\n    isTaskDone: selectCurrentTaskIsDone,\r\n    taskCompletionMessage: selectCurrentTaskCompletionMessage,\r\n    projectId: selectCurrentProjectId,\r\n    stepName: selectCurrentStepName,\r\n    stepQuestion: selectCurrentStepQuestion,\r\n    isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n    stepId: selectCurrentStepId,\r\n    questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n    stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n    isStepDone: selectCurrentStepIsDone,\r\n    taskId: selectCurrentTaskId,\r\n    completionPercentage: selectCurrentTaskCompletionPercentage,\r\n    \r\n    taskOwner: selectCurrentTaskOwner,\r\n    taskStartDate: selectCurrentTaskStartDate,\r\n    taskEndDate: selectCurrentTaskEndDate\r\n\r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchSteps : (taskId) => dispatch(fetchCurrentTaskStart(taskId)),\r\n    completeTask: (taskId) => dispatch(completeCurrentTaskStart(taskId)),\r\n    fetchCurrentStep : (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n    completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n    completeStep: (data) => dispatch(completeStepStart(data))\r\n  });\r\n  \r\n  export default withRouter(connect(mapStateToProps, mapDispatchToProps)(Task));"]},"metadata":{},"sourceType":"module"}