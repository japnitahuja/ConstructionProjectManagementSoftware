{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project\\\\project.page.js\";\nimport React, { Component } from 'react';\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CreateTaskForm from '../../components/create-task-form/create-task-form.component';\nimport { fetchCurrentProjectStart } from '../../redux/current-project/current-project.actions';\nimport { selectCurrentProjectName, selectCurrentProjectStatus, selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\nimport TaskListContainer from '../../components/tasks-list/tasks-list.container';\nimport SearchBar from '../../components/search-bar/search-bar.component';\nimport AdminPanelTaskPage from '../../components/admin-panel-task-page/admin-panel-task-page.component';\nimport ManageTeam from '../../components/manage-team/manage-team.component';\nimport ToggleButton from '../../components/toggle-button/toggle-button.component';\nimport DropDown from '../../components/access-dropdown/access-dropdown.component';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Project extends Component {\n  constructor() {\n    super();\n\n    this.adminToggle = () => {\n      this.setState(prevState => ({\n        adminSwitch: !prevState.adminSwitch\n      }));\n    };\n\n    this.state = {\n      adminSwitch: false\n    };\n  }\n\n  componentDidMount() {\n    const projectId = this.props.match.params.projectId;\n    console.log(\"mount\");\n    this.props.fetchProjects(projectId);\n  }\n\n  render() {\n    const {\n      tasks,\n      projectName\n    } = this.props;\n    console.log('project page');\n    console.log(tasks);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"5em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '1em',\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'flex-end',\n          alignItems: 'center',\n          borderBottom: '1px solid #BCC5D3'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          onToggleFunction: this.adminToggle,\n          checked: this.state.adminSwitch,\n          color: \"#6C5FCF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: '1em',\n            color: '#666666',\n            margin: '0',\n            paddingLeft: '0.5em'\n          },\n          children: \"Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 17\n      }, this), this.state.adminSwitch ? /*#__PURE__*/_jsxDEV(AdminPanelTaskPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 42\n      }, this) : null, /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search Tasks...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TaskListContainer, {\n        tasks: tasks\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(CreateTaskForm, {\n        projectId: this.props.match.params.projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: \"1em\"\n        },\n        children: /*#__PURE__*/_jsxDEV(DropDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 14\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  projectName: selectCurrentProjectName,\n  projectStatus: selectCurrentProjectStatus,\n  tasks: selectCurrentProjectTasks\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProjects: projectId => dispatch(fetchCurrentProjectStart(projectId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project/project.page.js"],"names":["React","Component","createStructuredSelector","connect","CreateTaskForm","fetchCurrentProjectStart","selectCurrentProjectName","selectCurrentProjectStatus","selectCurrentProjectTasks","TaskNav","LowerNavBar","TaskListContainer","SearchBar","AdminPanelTaskPage","ManageTeam","ToggleButton","DropDown","Project","constructor","adminToggle","setState","prevState","adminSwitch","state","componentDidMount","projectId","props","match","params","console","log","fetchProjects","render","tasks","projectName","marginBottom","padding","display","flexDirection","justifyContent","alignItems","borderBottom","fontSize","color","margin","paddingLeft","mapStateToProps","projectStatus","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport CreateTaskForm from '../../components/create-task-form/create-task-form.component';\r\nimport { fetchCurrentProjectStart } from '../../redux/current-project/current-project.actions';\r\nimport { selectCurrentProjectName, selectCurrentProjectStatus, selectCurrentProjectTasks } from '../../redux/current-project/current-project.selectors';\r\nimport {TaskNav} from \"../../components/task-nav/task-nav.component\"\r\nimport LowerNavBar from '../../components/lower-nav-bar/lower-nav-bar.component';\r\nimport TaskListContainer from '../../components/tasks-list/tasks-list.container';\r\nimport SearchBar from '../../components/search-bar/search-bar.component';\r\nimport AdminPanelTaskPage from '../../components/admin-panel-task-page/admin-panel-task-page.component';\r\nimport ManageTeam from '../../components/manage-team/manage-team.component';\r\nimport ToggleButton from '../../components/toggle-button/toggle-button.component'\r\nimport DropDown from '../../components/access-dropdown/access-dropdown.component';\r\n\r\nclass Project extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n          adminSwitch: false\r\n        };\r\n      }\r\n\r\n    componentDidMount(){\r\n        const projectId = this.props.match.params.projectId;\r\n        console.log(\"mount\")\r\n        this.props.fetchProjects(projectId);\r\n    }\r\n\r\n    adminToggle = () => {\r\n        this.setState((prevState) => ({\r\n            adminSwitch: !prevState.adminSwitch\r\n        }));\r\n    }\r\n    \r\n    render() {\r\n        const {tasks, projectName} = this.props;\r\n        console.log('project page')\r\n        console.log(tasks)\r\n        \r\n        return (\r\n             <div style={{marginBottom:\"5em\"}}>\r\n                <TaskNav title = {projectName}/>\r\n                <div style={{\r\n                    padding: '1em',\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'flex-end',\r\n                    alignItems: 'center',\r\n                    borderBottom: '1px solid #BCC5D3'}}>\r\n                    <ToggleButton \r\n                        onToggleFunction = {this.adminToggle} \r\n                        checked = {this.state.adminSwitch} \r\n                        color=\"#6C5FCF\"/>\r\n                    <p style={{\r\n                            fontSize: '1em',\r\n                            color:'#666666', \r\n                            margin:'0', \r\n                            paddingLeft:'0.5em'}}>\r\n                    Admin\r\n                    </p>\r\n                </div>\r\n            \r\n                {this.state.adminSwitch? <AdminPanelTaskPage/> : null}\r\n                <SearchBar placeholder='Search Tasks...' />\r\n                <TaskListContainer tasks = {tasks}/>\r\n                <CreateTaskForm projectId = {this.props.match.params.projectId}/>\r\n                <div style ={{margin:\"1em\"}}>\r\n                <DropDown></DropDown>\r\n                </div>\r\n                \r\n                <LowerNavBar  />\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    projectName: selectCurrentProjectName,\r\n    projectStatus: selectCurrentProjectStatus,\r\n    tasks: selectCurrentProjectTasks\r\n});\r\n  \r\nconst mapDispatchToProps = (dispatch) => ({\r\n    fetchProjects : (projectId) => dispatch(fetchCurrentProjectStart(projectId))\r\n});\r\n  \r\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);"]},"metadata":{},"sourceType":"module"}