{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\step-item\\\\step-item.component.jsx\";\nimport React, { Component } from \"react\";\nimport { CompleteStepButtons, CompleteStepButton, SmallBoldText, ArrowDown, ArrowUp, StepDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, RowContainer, ArrowDiv, PartitionDiv } from \"./step-item.styles\";\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { completeStepQuestionStart, completeStepStart, deleteCurrentStepStart, fetchCurrentStepStart } from '../../redux/current-step/current-step.actions';\nimport { selectCurrentProjectId } from '../../redux/current-project/current-project.selectors';\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors';\nimport { selectCurrentTaskId } from '../../redux/current-task/current-task.selectors';\nimport { CheckBox } from \"../checkbox/checkbox.component\";\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\nimport { LongButton } from \"../long-button/long-button.styles\";\nimport checkCircle from '../../assets/check-circle.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass StepItem extends Component {\n  constructor(props) {\n    super(props);\n\n    this.submitQuestion = () => {\n      const {\n        _id\n      } = this.state.stepDetails;\n      console.log(\"Step Item\");\n      console.log(this.state.stepDetails);\n      this.props.completeStepQuestion(_id);\n      this.props.fetchCurrentStep(_id);\n      window.location.reload();\n    };\n\n    this.completeStep = async () => {\n      const {\n        completeStep,\n        taskId\n      } = this.props;\n      const stepId = this.state.stepDetails._id;\n      const data = {\n        stepId,\n        taskId\n      };\n      console.log(data);\n      await completeStep(data);\n      this.props.fetchCurrentStep(stepId);\n      window.location.reload();\n    };\n\n    this.deleteStep = e => {\n      const stepId = this.state.stepDetails._id;\n      const {\n        deleteStep\n      } = this.props;\n      deleteStep(stepId);\n      window.location.reload();\n    };\n\n    this.stepDetailsDiv = ({\n      isStepDone,\n      questionStatement,\n      isQuestionAnswered,\n      stepCompletionMessage\n    }) => {\n      return /*#__PURE__*/_jsxDEV(\"center\", {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"0px 25px\"\n          },\n          children: [questionStatement ? /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(SmallBoldText, {\n              children: questionStatement\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 21\n            }, this), isQuestionAnswered ? /*#__PURE__*/_jsxDEV(SmallBoldText, {\n              children: \"Step Question has been answered.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 45\n            }, this) : /*#__PURE__*/_jsxDEV(CompleteStepButtons, {\n              children: [/*#__PURE__*/_jsxDEV(CompleteStepButton, {\n                border: false,\n                color: \"white\",\n                bgcolor: \"#6C7B8A\",\n                onClick: this.submitQuestion,\n                children: \" YES \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 62,\n                columnNumber: 29\n              }, this), /*#__PURE__*/_jsxDEV(CompleteStepButton, {\n                border: true,\n                color: \"black\",\n                bgcolor: \"white\",\n                onClick: () => {\n                  this.setState(prevState => ({\n                    isOpen: !prevState.isOpen\n                  }));\n                },\n                children: \" NO \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 29\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 17\n          }, this) : null, isStepDone ? /*#__PURE__*/_jsxDEV(SmallBoldText, {\n            children: \"Step Completed.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 34\n          }, this) : /*#__PURE__*/_jsxDEV(\"center\", {\n            children: /*#__PURE__*/_jsxDEV(LongButton, {\n              style: {\n                backgroundColor: \"#5887F9\",\n                borderRadius: \"5px\"\n              },\n              onClick: this.completeStep,\n              children: \"COMPLETE STEP\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 73,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            children: stepCompletionMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this);\n    };\n\n    this.state = {\n      stepDetails: this.props.stepDetails,\n      isOpen: false\n    };\n  }\n\n  render() {\n    const {\n      stepName,\n      questionStatement,\n      _id,\n      isStepDone,\n      isQuestionAnswered,\n      index\n    } = this.state.stepDetails;\n    return /*#__PURE__*/_jsxDEV(StepDiv, {\n      children: [/*#__PURE__*/_jsxDEV(PartitionDiv, {\n        children: [/*#__PURE__*/_jsxDEV(LeftDiv, {\n          children: [/*#__PURE__*/_jsxDEV(RowContainer, {\n            children: [isStepDone ? /*#__PURE__*/_jsxDEV(\"img\", {\n              src: checkCircle,\n              style: {\n                width: \"20px\",\n                height: \"20px\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 37\n            }, this) : /*#__PURE__*/_jsxDEV(Circle, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 83\n            }, this), /*#__PURE__*/_jsxDEV(SmallText, {\n              children: [\"Step - \", index + 1]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 98,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(BigText, {\n            children: stepName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(RightDiv, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 21\n        }, this)]\n      }, _id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), this.state.isOpen ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: this.stepDetailsDiv(this.state.stepDetails)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 39\n      }, this) : null, /*#__PURE__*/_jsxDEV(ArrowDiv, {\n        onClick: () => {\n          this.setState(prevState => ({\n            isOpen: !prevState.isOpen\n          }));\n        },\n        children: !this.state.isOpen ? /*#__PURE__*/_jsxDEV(ArrowDown, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 42\n        }, this) : /*#__PURE__*/_jsxDEV(ArrowUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 57\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone,\n  taskId: selectCurrentTaskId,\n  projectId: selectCurrentProjectId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: data => dispatch(completeStepStart(data)),\n  deleteStep: stepId => dispatch(deleteCurrentStepStart(stepId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepItem);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/step-item/step-item.component.jsx"],"names":["React","Component","CompleteStepButtons","CompleteStepButton","SmallBoldText","ArrowDown","ArrowUp","StepDiv","LeftDiv","RightDiv","BigText","SmallText","Circle","RowContainer","ArrowDiv","PartitionDiv","connect","createStructuredSelector","completeStepQuestionStart","completeStepStart","deleteCurrentStepStart","fetchCurrentStepStart","selectCurrentProjectId","selectCurrentStepCompletionMessage","selectCurrentStepId","selectCurrentStepIsDone","selectCurrentStepName","selectCurrentStepQuestion","selectCurrentStepQuestionAnswerConfirmation","selectCurrentStepQuestionAnswered","selectCurrentTaskId","CheckBox","DeleteButton","LongButton","checkCircle","StepItem","constructor","props","submitQuestion","_id","state","stepDetails","console","log","completeStepQuestion","fetchCurrentStep","window","location","reload","completeStep","taskId","stepId","data","deleteStep","e","stepDetailsDiv","isStepDone","questionStatement","isQuestionAnswered","stepCompletionMessage","padding","setState","prevState","isOpen","backgroundColor","borderRadius","render","stepName","index","width","height","mapStateToProps","stepQuestion","isStepQuestionAnswered","questionCompletion","projectId","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\r\nimport { CompleteStepButtons, CompleteStepButton, SmallBoldText, ArrowDown, ArrowUp, StepDiv, LeftDiv, RightDiv, BigText, SmallText, Circle, RowContainer, ArrowDiv, PartitionDiv} from \"./step-item.styles\";\r\nimport { connect } from 'react-redux';\r\nimport { createStructuredSelector } from 'reselect';\r\nimport { completeStepQuestionStart, completeStepStart, deleteCurrentStepStart, fetchCurrentStepStart } from '../../redux/current-step/current-step.actions'\r\nimport { selectCurrentProjectId } from '../../redux/current-project/current-project.selectors';\r\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from '../../redux/current-step/current-step.selectors'\r\nimport { selectCurrentTaskId } from '../../redux/current-task/current-task.selectors';\r\nimport { CheckBox } from \"../checkbox/checkbox.component\";\r\nimport { DeleteButton } from \"../delete-button/delete-button.styles\";\r\nimport { LongButton } from \"../long-button/long-button.styles\";\r\nimport checkCircle from '../../assets/check-circle.png';\r\n\r\nclass StepItem extends Component{\r\n    constructor(props){\r\n        super(props);\r\n      \r\n        this.state = {\r\n            stepDetails: this.props.stepDetails,\r\n            isOpen:false\r\n        };\r\n    }\r\n\r\n    submitQuestion = () => {\r\n        const {_id} = this.state.stepDetails\r\n        console.log(\"Step Item\")\r\n        console.log(this.state.stepDetails)\r\n        this.props.completeStepQuestion(_id)\r\n        this.props.fetchCurrentStep(_id)\r\n        window.location.reload()\r\n    }\r\n\r\n    completeStep = async() => {\r\n        const { completeStep, taskId} = this.props\r\n        const stepId = this.state.stepDetails._id\r\n        const data = {stepId, taskId}\r\n        console.log(data)\r\n        await completeStep(data)\r\n        this.props.fetchCurrentStep(stepId)\r\n        window.location.reload()\r\n        \r\n    }\r\n\r\n    deleteStep = (e) => {\r\n        const stepId = this.state.stepDetails._id\r\n        const {deleteStep} = this.props\r\n        deleteStep(stepId)\r\n        window.location.reload()\r\n    }\r\n\r\n    stepDetailsDiv = ({isStepDone,questionStatement,isQuestionAnswered, stepCompletionMessage}) => {\r\n        return(\r\n            <center>\r\n                <div style={{padding: \"0px 25px\"}}>\r\n                 {\r\n                questionStatement?\r\n                <div>\r\n                    <SmallBoldText>{questionStatement}</SmallBoldText>\r\n                    {\r\n                        isQuestionAnswered? <SmallBoldText>Step Question has been answered.</SmallBoldText> : \r\n                        <CompleteStepButtons>\r\n                            <CompleteStepButton border={false} color=\"white\" bgcolor=\"#6C7B8A\" onClick={this.submitQuestion}> YES </CompleteStepButton>\r\n                            <CompleteStepButton border={true} color=\"black\" bgcolor=\"white\"  onClick={()=>{this.setState((prevState) => ({isOpen: !prevState.isOpen }));}}> NO </CompleteStepButton>\r\n                        </CompleteStepButtons>\r\n                    }\r\n                    \r\n                </div> \r\n                : null\r\n                }\r\n                {\r\n                    isStepDone ? <SmallBoldText>Step Completed.</SmallBoldText> : \r\n                    <center>\r\n                        <LongButton style={{backgroundColor: \"#5887F9\", borderRadius: \"5px\"}} onClick={this.completeStep}>COMPLETE STEP</LongButton>\r\n                    </center>\r\n                }\r\n                <h3>{stepCompletionMessage}</h3>\r\n            </div>\r\n\r\n            </center>\r\n            \r\n        )\r\n        \r\n\r\n    };\r\n    \r\n    render (){\r\n        const {stepName,questionStatement,_id,isStepDone,isQuestionAnswered, index} = this.state.stepDetails;\r\n        return (\r\n            <StepDiv>\r\n                <PartitionDiv key={_id}>\r\n                    <LeftDiv>\r\n                            <RowContainer>\r\n                                {\r\n                                    isStepDone? \r\n                                    <img src={checkCircle} \r\n                                        style={{width:\"20px\", height:\"20px\"}}/> : <Circle/>\r\n                                }\r\n                            <SmallText>Step - {index+1}</SmallText>\r\n                            </RowContainer>\r\n                            \r\n                            <BigText>{stepName}</BigText>\r\n                    </LeftDiv>\r\n                    <RightDiv>\r\n                        {/* <DeleteButton id={_id} onClick={this.deleteStep}>Delete</DeleteButton> */}\r\n                       \r\n                    </RightDiv>\r\n                </PartitionDiv>\r\n                {\r\n\r\n                    this.state.isOpen?<div>{this.stepDetailsDiv(this.state.stepDetails)}</div>:null\r\n                }\r\n                <ArrowDiv onClick={()=>\r\n                {\r\n                    this.setState((prevState) => ({isOpen: !prevState.isOpen }));\r\n                    \r\n                }}>\r\n                    {!this.state.isOpen? <ArrowDown/> : <ArrowUp/>}\r\n\r\n                </ArrowDiv>\r\n\r\n                \r\n            \r\n            </StepDiv>\r\n            \r\n                \r\n            \r\n        \r\n    )}\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    stepName: selectCurrentStepName,\r\n    stepQuestion: selectCurrentStepQuestion,\r\n    isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n    questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n    stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n    isStepDone: selectCurrentStepIsDone,\r\n    taskId: selectCurrentTaskId,\r\n    projectId: selectCurrentProjectId\r\n    \r\n  });\r\n  \r\n  const mapDispatchToProps = (dispatch) => ({\r\n    fetchCurrentStep : (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n    completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n    completeStep: (data) => dispatch(completeStepStart(data)),\r\n    deleteStep: (stepId) => dispatch(deleteCurrentStepStart(stepId))\r\n  });\r\n  \r\n  export default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n  )(StepItem);\r\n"]},"metadata":{},"sourceType":"module"}