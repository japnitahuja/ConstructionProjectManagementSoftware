{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { createProjectSucessful, createProjectFail, fetchProjectsStart, fetchProjectsFailure, fetchProjectsSuccess } from \"./all-projects.actions\";\nimport { ProjectActionTypes } from \"./all-projects.types\";\nimport { selectUserId } from \"../user/user.selectors\";\nexport function* createProject({\n  payload\n}) {\n  try {\n    let data = payload;\n    let userId = yield select(selectUserId);\n    console.log(userId);\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/create-project/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createProjectSucessful(resp.message));\n      yield put(fetchProjectsStart());\n    } else {\n      yield put(createProjectFail(resp.error));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchProjects() {\n  try {\n    let userId = yield select(selectUserId);\n    let projects = yield fetch(`http://127.0.0.1:5000/all-projects/${userId}`);\n    projects = yield projects.json();\n    projects.done ? yield put(fetchProjectsSuccess(projects.projects.projects)) : yield put(fetchProjectsFailure(projects.error));\n  } catch (error) {\n    fetchProjectsFailure(error);\n  }\n}\nexport function* onProjectCreateStart() {\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_START, createProject);\n}\nexport function* onProjectFetchStart() {\n  yield takeLatest(ProjectActionTypes.FETCH_PROJECTS_START, fetchProjects);\n}\nexport function* projectSagas() {\n  yield all([call(onProjectCreateStart), call(onProjectFetchStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/all-projects/all-projects.sagas.js"],"names":["all","call","put","takeLatest","select","createProjectSucessful","createProjectFail","fetchProjectsStart","fetchProjectsFailure","fetchProjectsSuccess","ProjectActionTypes","selectUserId","createProject","payload","data","userId","console","log","resp","fetch","method","headers","body","JSON","stringify","json","done","message","error","fetchProjects","projects","onProjectCreateStart","CREATE_PROJECT_START","onProjectFetchStart","FETCH_PROJECTS_START","projectSagas"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,QAAkD,oBAAlD;AACA,SAASC,sBAAT,EAAiCC,iBAAjC,EAAoDC,kBAApD,EAAwEC,oBAAxE,EAA8FC,oBAA9F,QAA0H,wBAA1H;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,SAASC,YAAT,QAA6B,wBAA7B;AAEA,OAAO,UAAUC,aAAV,CAAwB;AAACC,EAAAA;AAAD,CAAxB,EAAkC;AACvC,MAAI;AACF,QAAIC,IAAI,GAAGD,OAAX;AACA,QAAIE,MAAM,GAAG,MAAMX,MAAM,CAACO,YAAD,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AACA,QAAII,IAAI,GAAG,MAAMC,KAAK,CAAE,wCAAuCJ,MAAO,EAAhD,EAAmD;AACvEK,MAAAA,MAAM,EAAE,MAD+D;AAEvEC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAF8D;AAKvEC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeV,IAAf;AALiE,KAAnD,CAAtB;AAQAI,IAAAA,IAAI,GAAG,MAAMA,IAAI,CAACO,IAAL,EAAb;;AACA,QAAGP,IAAI,CAACQ,IAAR,EAAa;AACT,YAAMxB,GAAG,CAACG,sBAAsB,CAACa,IAAI,CAACS,OAAN,CAAvB,CAAT;AACA,YAAMzB,GAAG,CAACK,kBAAkB,EAAnB,CAAT;AACH,KAHD,MAGK;AACH,YAAML,GAAG,CAACI,iBAAiB,CAACY,IAAI,CAACU,KAAN,CAAlB,CAAT;AACD;AACF,GApBD,CAoBE,OAAOA,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACD;AACF;AAED,OAAO,UAAUC,aAAV,GAAyB;AAC9B,MAAI;AACF,QAAId,MAAM,GAAG,MAAMX,MAAM,CAACO,YAAD,CAAzB;AACA,QAAImB,QAAQ,GAAG,MAAMX,KAAK,CAAE,sCAAqCJ,MAAO,EAA9C,CAA1B;AACAe,IAAAA,QAAQ,GAAG,MAAMA,QAAQ,CAACL,IAAT,EAAjB;AACAK,IAAAA,QAAQ,CAACJ,IAAT,GACE,MAAMxB,GAAG,CAACO,oBAAoB,CAACqB,QAAQ,CAACA,QAAT,CAAkBA,QAAnB,CAArB,CADX,GAEE,MAAM5B,GAAG,CAACM,oBAAoB,CAACsB,QAAQ,CAACF,KAAV,CAArB,CAFX;AAGD,GAPD,CAOE,OAAOA,KAAP,EAAc;AACdpB,IAAAA,oBAAoB,CAACoB,KAAD,CAApB;AACD;AACF;AAGD,OAAO,UAAUG,oBAAV,GAAgC;AACrC,QAAM5B,UAAU,CAACO,kBAAkB,CAACsB,oBAApB,EAA0CpB,aAA1C,CAAhB;AACD;AAED,OAAO,UAAUqB,mBAAV,GAA+B;AACpC,QAAM9B,UAAU,CAACO,kBAAkB,CAACwB,oBAApB,EAA0CL,aAA1C,CAAhB;AACD;AAED,OAAO,UAAUM,YAAV,GAAyB;AAC9B,QAAMnC,GAAG,CAAC,CACRC,IAAI,CAAC8B,oBAAD,CADI,EAER9B,IAAI,CAACgC,mBAAD,CAFI,CAAD,CAAT;AAID","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { createProjectSucessful, createProjectFail, fetchProjectsStart, fetchProjectsFailure, fetchProjectsSuccess } from \"./all-projects.actions\";\r\nimport { ProjectActionTypes } from \"./all-projects.types\";\r\nimport { selectUserId } from \"../user/user.selectors\"\r\n\r\nexport function* createProject({payload}){\r\n  try {\r\n    let data = payload;\r\n    let userId = yield select(selectUserId);\r\n    console.log(userId);\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-project/${userId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n        yield put(createProjectSucessful(resp.message));\r\n        yield put(fetchProjectsStart());\r\n    }else{\r\n      yield put(createProjectFail(resp.error))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* fetchProjects(){\r\n  try {\r\n    let userId = yield select(selectUserId);\r\n    let projects = yield fetch(`http://127.0.0.1:5000/all-projects/${userId}`)\r\n    projects = yield projects.json()\r\n    projects.done\r\n    ? yield put(fetchProjectsSuccess(projects.projects.projects))\r\n    : yield put(fetchProjectsFailure(projects.error))\r\n  } catch (error) {\r\n    fetchProjectsFailure(error)\r\n  }\r\n}\r\n\r\n\r\nexport function* onProjectCreateStart(){\r\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_START, createProject)\r\n}\r\n\r\nexport function* onProjectFetchStart(){\r\n  yield takeLatest(ProjectActionTypes.FETCH_PROJECTS_START, fetchProjects)\r\n}\r\n\r\nexport function* projectSagas() {\r\n  yield all([\r\n    call(onProjectCreateStart),\r\n    call(onProjectFetchStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}