{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\task\\\\task.page.js\";\nimport React, { Component } from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CreateStepForm from \"../../components/create-step-form/create-step-form.component\";\nimport { completeCurrentTaskStart, fetchCurrentTaskStart } from \"../../redux/current-task/current-task.actions\";\nimport { selectCurrentTaskCompletionMessage, selectCurrentTaskCompletionPercentage, selectCurrentTaskEndDate, selectCurrentTaskIsDone, selectCurrentTaskName, selectCurrentTaskOwner, selectCurrentTaskStartDate, selectCurrentTaskSteps } from \"../../redux/current-task/current-task.selectors\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { selectCurrentProjectId } from \"../../redux/current-project/current-project.selectors\";\nimport { completeStepQuestionStart, completeStepStart } from \"../../redux/current-step/current-step.actions\";\nimport { fetchCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\nimport { selectCurrentStepCompletionMessage, selectCurrentStepId, selectCurrentStepIsDone, selectCurrentStepName, selectCurrentStepQuestion, selectCurrentStepQuestionAnswerConfirmation, selectCurrentStepQuestionAnswered } from \"../../redux/current-step/current-step.selectors\";\nimport { selectCurrentTaskId } from \"../../redux/current-task/current-task.selectors\";\nimport { LongButton } from \"../../components/long-button/long-button.styles\";\nimport StepNav from \"../../components/step-nav/step-nav.component\";\nimport StepLowerNav from \"../../components/step-lower-nav/step-lower-nav.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Task extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.completeTask = () => {\n      const taskId = this.props.match.params.taskId;\n      this.props.completeTask(taskId);\n\n      if (this.props.completionPercentage == 100) {\n        console.log(\"back\");\n        this.props.history.goBack();\n      }\n    };\n  }\n\n  componentDidMount() {\n    const taskId = this.props.match.params.taskId;\n    this.props.fetchSteps(taskId);\n    console.log(taskId);\n  }\n\n  render() {\n    const {\n      steps,\n      projectId,\n      taskName,\n      isTaskDone,\n      taskCompletionMessage,\n      taskOwner,\n      taskEndDate,\n      taskStartDate\n    } = this.props;\n    console.log(\"task page\");\n    console.log(steps);\n    const taskId = this.props.match.params.taskId;\n    console.log(taskId);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(StepNav, {\n        projectId: projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(StepLowerNav, {\n        steps: steps,\n        taskOwner: taskOwner,\n        taskStartDate: taskStartDate,\n        taskEndDate: taskEndDate,\n        completeTask: this.completeTask\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  steps: selectCurrentTaskSteps,\n  taskName: selectCurrentTaskName,\n  isTaskDone: selectCurrentTaskIsDone,\n  taskCompletionMessage: selectCurrentTaskCompletionMessage,\n  projectId: selectCurrentProjectId,\n  stepName: selectCurrentStepName,\n  stepQuestion: selectCurrentStepQuestion,\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\n  stepId: selectCurrentStepId,\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\n  isStepDone: selectCurrentStepIsDone,\n  taskId: selectCurrentTaskId,\n  completionPercentage: selectCurrentTaskCompletionPercentage,\n  taskOwner: selectCurrentTaskOwner,\n  taskStartDate: selectCurrentTaskStartDate,\n  taskEndDate: selectCurrentTaskEndDate\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSteps: taskId => dispatch(fetchCurrentTaskStart(taskId)),\n  completeTask: taskId => dispatch(completeCurrentTaskStart(taskId)),\n  fetchCurrentStep: stepId => dispatch(fetchCurrentStepStart(stepId)),\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId)),\n  completeStep: data => dispatch(completeStepStart(data))\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Task));","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/task/task.page.js"],"names":["React","Component","createStructuredSelector","connect","CreateStepForm","completeCurrentTaskStart","fetchCurrentTaskStart","selectCurrentTaskCompletionMessage","selectCurrentTaskCompletionPercentage","selectCurrentTaskEndDate","selectCurrentTaskIsDone","selectCurrentTaskName","selectCurrentTaskOwner","selectCurrentTaskStartDate","selectCurrentTaskSteps","Link","withRouter","selectCurrentProjectId","completeStepQuestionStart","completeStepStart","fetchCurrentStepStart","selectCurrentStepCompletionMessage","selectCurrentStepId","selectCurrentStepIsDone","selectCurrentStepName","selectCurrentStepQuestion","selectCurrentStepQuestionAnswerConfirmation","selectCurrentStepQuestionAnswered","selectCurrentTaskId","LongButton","StepNav","StepLowerNav","Task","completeTask","taskId","props","match","params","completionPercentage","console","log","history","goBack","componentDidMount","fetchSteps","render","steps","projectId","taskName","isTaskDone","taskCompletionMessage","taskOwner","taskEndDate","taskStartDate","mapStateToProps","stepName","stepQuestion","isStepQuestionAnswered","stepId","questionCompletion","stepCompletionMessage","isStepDone","mapDispatchToProps","dispatch","fetchCurrentStep","completeStepQuestion","completeStep","data"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport CreateStepForm from \"../../components/create-step-form/create-step-form.component\";\r\nimport {\r\n  completeCurrentTaskStart,\r\n  fetchCurrentTaskStart,\r\n} from \"../../redux/current-task/current-task.actions\";\r\nimport {\r\n  selectCurrentTaskCompletionMessage,\r\n  selectCurrentTaskCompletionPercentage,\r\n  selectCurrentTaskEndDate,\r\n  selectCurrentTaskIsDone,\r\n  selectCurrentTaskName,\r\n  selectCurrentTaskOwner,\r\n  selectCurrentTaskStartDate,\r\n  selectCurrentTaskSteps,\r\n} from \"../../redux/current-task/current-task.selectors\";\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport { selectCurrentProjectId } from \"../../redux/current-project/current-project.selectors\";\r\nimport {\r\n  completeStepQuestionStart,\r\n  completeStepStart,\r\n} from \"../../redux/current-step/current-step.actions\";\r\nimport { fetchCurrentStepStart } from \"../../redux/current-step/current-step.actions\";\r\nimport {\r\n  selectCurrentStepCompletionMessage,\r\n  selectCurrentStepId,\r\n  selectCurrentStepIsDone,\r\n  selectCurrentStepName,\r\n  selectCurrentStepQuestion,\r\n  selectCurrentStepQuestionAnswerConfirmation,\r\n  selectCurrentStepQuestionAnswered,\r\n} from \"../../redux/current-step/current-step.selectors\";\r\nimport { selectCurrentTaskId } from \"../../redux/current-task/current-task.selectors\";\r\nimport { LongButton } from \"../../components/long-button/long-button.styles\";\r\nimport StepNav from \"../../components/step-nav/step-nav.component\";\r\nimport StepLowerNav from \"../../components/step-lower-nav/step-lower-nav.component\";\r\n\r\nclass Task extends Component {\r\n  componentDidMount() {\r\n    const taskId = this.props.match.params.taskId;\r\n    this.props.fetchSteps(taskId);\r\n    console.log(taskId);\r\n  }\r\n\r\n  completeTask = () => {\r\n    const taskId = this.props.match.params.taskId;\r\n    this.props.completeTask(taskId);\r\n    if (this.props.completionPercentage == 100) {\r\n      console.log(\"back\");\r\n      this.props.history.goBack();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      steps,\r\n      projectId,\r\n      taskName,\r\n      isTaskDone,\r\n      taskCompletionMessage,\r\n      taskOwner,\r\n      taskEndDate,\r\n      taskStartDate,\r\n    } = this.props;\r\n    console.log(\"task page\");\r\n    console.log(steps);\r\n    const taskId = this.props.match.params.taskId;\r\n    console.log(taskId);\r\n    return (\r\n      <div>\r\n        <StepNav projectId={projectId} />\r\n        <StepLowerNav\r\n          steps={steps}\r\n          taskOwner={taskOwner}\r\n          taskStartDate={taskStartDate}\r\n          taskEndDate={taskEndDate}\r\n          completeTask={this.completeTask}\r\n        />\r\n\r\n        {/* <CreateStepForm taskId = {this.props.match.params.taskId} />\r\n                <Link to={`/purchaseOrders/${taskId}`}><button>PURCHASE ORDERS</button></Link>\r\n                <Link to={`/changeOrders/${taskId}`}><button>CHANGE ORDERS</button></Link> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  steps: selectCurrentTaskSteps,\r\n  taskName: selectCurrentTaskName,\r\n  isTaskDone: selectCurrentTaskIsDone,\r\n  taskCompletionMessage: selectCurrentTaskCompletionMessage,\r\n  projectId: selectCurrentProjectId,\r\n  stepName: selectCurrentStepName,\r\n  stepQuestion: selectCurrentStepQuestion,\r\n  isStepQuestionAnswered: selectCurrentStepQuestionAnswered,\r\n  stepId: selectCurrentStepId,\r\n  questionCompletion: selectCurrentStepQuestionAnswerConfirmation,\r\n  stepCompletionMessage: selectCurrentStepCompletionMessage,\r\n  isStepDone: selectCurrentStepIsDone,\r\n  taskId: selectCurrentTaskId,\r\n  completionPercentage: selectCurrentTaskCompletionPercentage,\r\n\r\n  taskOwner: selectCurrentTaskOwner,\r\n  taskStartDate: selectCurrentTaskStartDate,\r\n  taskEndDate: selectCurrentTaskEndDate,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchSteps: (taskId) => dispatch(fetchCurrentTaskStart(taskId)),\r\n  completeTask: (taskId) => dispatch(completeCurrentTaskStart(taskId)),\r\n  fetchCurrentStep: (stepId) => dispatch(fetchCurrentStepStart(stepId)),\r\n  completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n  completeStep: (data) => dispatch(completeStepStart(data)),\r\n});\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Task));\r\n"]},"metadata":{},"sourceType":"module"}