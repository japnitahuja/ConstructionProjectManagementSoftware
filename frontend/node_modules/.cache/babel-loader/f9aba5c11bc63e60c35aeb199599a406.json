{"ast":null,"code":"import { all, call, put, takeLatest, select } from \"redux-saga/effects\";\nimport { selectCurrentTaskId } from \"../current-task/current-task.selectors\";\nimport { completeStepQuestionSuccess, fetchCurrentStepFailure, fetchCurrentStepSuccess, completeStepQuestionFailure, completeStepSuccess, completeStepFailure } from \"./current-step.actions\";\nimport { selectCurrentStepId } from \"./current-step.selectors\";\nimport { CurrentStepActionTypes } from \"./current-step.types\";\nexport function* fetchCurrentStep({\n  payload\n}) {\n  try {\n    const stepId = payload;\n    console.log(stepId);\n    let currentStep = yield fetch(`http://127.0.0.1:5000/step/${stepId}`);\n    currentStep = yield currentStep.json();\n    console.log(currentStep.step);\n    currentStep.done ? yield put(fetchCurrentStepSuccess(currentStep.step)) : yield put(fetchCurrentStepFailure('CURRENT PROJECCT FETTCHING FAILED'));\n  } catch (error) {\n    fetchCurrentStepFailure(error);\n  }\n}\nexport function* completeStepQuestion({\n  payload\n}) {\n  const stepId = payload;\n\n  try {\n    let stepQuestionCompletion = yield fetch(`http://127.0.0.1:5000/complete-step-question/${stepId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    stepQuestionCompletion = yield stepQuestionCompletion.json();\n    stepQuestionCompletion.done ? yield put(completeStepQuestionSuccess(stepQuestionCompletion.message)) : yield put(completeStepQuestionFailure(stepQuestionCompletion.error));\n  } catch (error) {\n    yield put(completeStepQuestionFailure(error));\n    console.log(error);\n  }\n}\nexport function* completeStep({\n  payload\n}) {\n  let data = payload;\n  const stepId = data.stepId;\n\n  try {\n    let stepCompletion = yield fetch(`http://127.0.0.1:5000/complete-step/${stepId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    stepCompletion = yield stepCompletion.json();\n    stepCompletion.done ? yield put(completeStepSuccess(stepCompletion.message)) : yield put(completeStepFailure(stepCompletion.error));\n  } catch (error) {\n    yield put(completeStepFailure(error));\n    console.log(error);\n  }\n}\nexport function* onStepQuestionCompletionStart() {\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_QUESTION_START, completeStepQuestion);\n}\nexport function* onStepCompletionStart() {\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_START, completeStep);\n}\nexport function* onCurrentStepFetchStart() {\n  yield takeLatest(CurrentStepActionTypes.FETCH_CURRENT_STEP_START, fetchCurrentStep);\n}\nexport function* currentStepSagas() {\n  yield all([call(onCurrentStepFetchStart), call(onStepQuestionCompletionStart), call(onStepCompletionStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/current-step/current-step.sagas.js"],"names":["all","call","put","takeLatest","select","selectCurrentTaskId","completeStepQuestionSuccess","fetchCurrentStepFailure","fetchCurrentStepSuccess","completeStepQuestionFailure","completeStepSuccess","completeStepFailure","selectCurrentStepId","CurrentStepActionTypes","fetchCurrentStep","payload","stepId","console","log","currentStep","fetch","json","step","done","error","completeStepQuestion","stepQuestionCompletion","method","headers","message","completeStep","data","stepCompletion","body","JSON","stringify","onStepQuestionCompletionStart","COMPLETE_STEP_QUESTION_START","onStepCompletionStart","COMPLETE_STEP_START","onCurrentStepFetchStart","FETCH_CURRENT_STEP_START","currentStepSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select} from \"redux-saga/effects\";\r\nimport { selectCurrentTaskId } from \"../current-task/current-task.selectors\";\r\nimport {completeStepQuestionSuccess, fetchCurrentStepFailure, fetchCurrentStepSuccess, completeStepQuestionFailure, completeStepSuccess, completeStepFailure } from \"./current-step.actions\";\r\nimport { selectCurrentStepId } from \"./current-step.selectors\";\r\nimport { CurrentStepActionTypes } from \"./current-step.types\";\r\n\r\nexport function* fetchCurrentStep({payload}){\r\n  try {\r\n      const stepId = payload\r\n      console.log(stepId)\r\n    let currentStep = yield fetch(`http://127.0.0.1:5000/step/${stepId}`)\r\n    currentStep = yield currentStep.json()\r\n    console.log(currentStep.step)\r\n    currentStep.done\r\n    ? yield put(fetchCurrentStepSuccess(currentStep.step))\r\n    : yield put(fetchCurrentStepFailure('CURRENT PROJECCT FETTCHING FAILED'))\r\n  } catch (error) {\r\n    fetchCurrentStepFailure(error)\r\n  }\r\n}\r\n\r\nexport function* completeStepQuestion({payload}){\r\n  const stepId = payload\r\n  try {\r\n    let stepQuestionCompletion = yield fetch(`http://127.0.0.1:5000/complete-step-question/${stepId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    })\r\n    stepQuestionCompletion = yield stepQuestionCompletion.json()\r\n    stepQuestionCompletion.done ? \r\n    yield put(completeStepQuestionSuccess(stepQuestionCompletion.message)):\r\n    yield put(completeStepQuestionFailure(stepQuestionCompletion.error))\r\n  } catch (error) {\r\n    yield put(completeStepQuestionFailure(error))\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* completeStep({payload}){\r\n  let data = payload\r\n  const stepId = data.stepId\r\n  try {\r\n    let stepCompletion = yield fetch(`http://127.0.0.1:5000/complete-step/${stepId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data)\r\n    })\r\n    stepCompletion = yield stepCompletion.json()\r\n    stepCompletion.done ? \r\n    yield put(completeStepSuccess(stepCompletion.message)):\r\n    yield put(completeStepFailure(stepCompletion.error))\r\n  } catch (error) {\r\n    yield put(completeStepFailure(error))\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* onStepQuestionCompletionStart(){\r\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_QUESTION_START, completeStepQuestion)\r\n}\r\n\r\nexport function* onStepCompletionStart(){\r\n  yield takeLatest(CurrentStepActionTypes.COMPLETE_STEP_START, completeStep)\r\n}\r\n\r\nexport function* onCurrentStepFetchStart(){\r\n  yield takeLatest(CurrentStepActionTypes.FETCH_CURRENT_STEP_START , fetchCurrentStep)\r\n}\r\n\r\nexport function* currentStepSagas() {\r\n  yield all([\r\n    call(onCurrentStepFetchStart),\r\n    call(onStepQuestionCompletionStart),\r\n    call(onStepCompletionStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}