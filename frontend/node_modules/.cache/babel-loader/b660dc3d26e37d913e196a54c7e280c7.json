{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\components\\\\steps-list\\\\steps-list.component.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { completeStepQuestionStart } from \"../../redux/current-step/current-step.actions\";\nimport { selectStepQuestionAnsweredConfirmationMessage } from \"../../redux/all-steps/all-steps.selector\";\nimport ConformationMesage from \"../conformation-message/comformation-message.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass StepList extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.completeStepQuestion = e => {\n      const {\n        completeStepQuestion\n      } = this.props;\n      const stepId = e.target.id;\n      console.log(stepId);\n      completeStepQuestion(stepId);\n    };\n  }\n\n  render() {\n    let steps = this.props.steps;\n    console.log(steps);\n\n    if (!steps) {\n      steps = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: steps.map(({\n        stepName,\n        questionStatement,\n        _id,\n        isStepDone,\n        isQuestionAnswered\n      }) => {\n        console.log(_id);\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            padding: \"10px\",\n            border: \"1px solid black\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/step/${_id}`,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: [\"Step Name: \", stepName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 17\n          }, this), questionStatement ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: [\"Step question: \", questionStatement]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 21\n            }, this), isQuestionAnswered ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Question has been answered\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 44\n            }, this) : null, isStepDone ? /*#__PURE__*/_jsxDEV(\"div\", {\n              children: \"Step Completed!\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 45,\n              columnNumber: 36\n            }, this) : null]\n          }, void 0, true) : null]\n        }, _id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({});\n\nconst mapDispatchToProps = dispatch => ({\n  completeStepQuestion: stepId => dispatch(completeStepQuestionStart(stepId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(StepList);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/components/steps-list/steps-list.component.jsx"],"names":["React","connect","Link","createStructuredSelector","completeStepQuestionStart","selectStepQuestionAnsweredConfirmationMessage","ConformationMesage","StepList","Component","completeStepQuestion","e","props","stepId","target","id","console","log","render","steps","map","stepName","questionStatement","_id","isStepDone","isQuestionAnswered","padding","border","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SAASC,yBAAT,QAA0C,+CAA1C;AACA,SAASC,6CAAT,QAA8D,0CAA9D;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;;;;AAEA,MAAMC,QAAN,SAAuBP,KAAK,CAACQ,SAA7B,CAAuC;AAAA;AAAA;;AAAA,SACnCC,oBADmC,GACXC,CAAD,IAAO;AAC1B,YAAM;AAACD,QAAAA;AAAD,UAAyB,KAAKE,KAApC;AACA,YAAMC,MAAM,GAAGF,CAAC,CAACG,MAAF,CAASC,EAAxB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACAH,MAAAA,oBAAoB,CAACG,MAAD,CAApB;AACH,KANkC;AAAA;;AAOrCK,EAAAA,MAAM,GAAG;AACP,QAAIC,KAAK,GAAG,KAAKP,KAAL,CAAWO,KAAvB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYE,KAAZ;;AACA,QAAI,CAACA,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG,EAAR;AACD;;AACD,wBACE;AAAA,gBACGA,KAAK,CAACC,GAAN,CACC,CAAC;AAAEC,QAAAA,QAAF;AAAYC,QAAAA,iBAAZ;AAA+BC,QAAAA,GAA/B;AAAoCC,QAAAA,UAApC;AAAgDC,QAAAA;AAAhD,OAAD,KAA0E;AACtET,QAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACF,4BACE;AAEE,UAAA,KAAK,EAAE;AAAEG,YAAAA,OAAO,EAAE,MAAX;AAAmBC,YAAAA,MAAM,EAAE;AAA3B,WAFT;AAAA,kCAKE,QAAC,IAAD;AAAM,YAAA,EAAE,EAAG,SAAQJ,GAAI,EAAvB;AAAA,mCACE;AAAA,wCAAgBF,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBALF,EASGC,iBAAiB,gBAChB;AAAA,oCACE;AAAA,4CAAoBA,iBAApB;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA;AAAA;AAAA;AAAA,oBAFF,EAIIG,kBAAkB,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,GAA2C,IAJjE,EAOID,UAAU,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAH,GAAgC,IAP9C;AAAA,0BADgB,GAYd,IArBN;AAAA,WACOD,GADP;AAAA;AAAA;AAAA;AAAA,gBADF;AA0BD,OA7BF;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAmCD;;AAhDoC;;AAmDvC,MAAMK,eAAe,GAAGxB,wBAAwB,CAAC,EAAD,CAAhD;;AAGA,MAAMyB,kBAAkB,GAAIC,QAAD,KAAe;AACxCpB,EAAAA,oBAAoB,EAAGG,MAAD,IAAYiB,QAAQ,CAACzB,yBAAyB,CAACQ,MAAD,CAA1B;AADF,CAAf,CAA3B;;AAIA,eAAeX,OAAO,CAAC0B,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CrB,QAA7C,CAAf","sourcesContent":["import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { completeStepQuestionStart } from \"../../redux/current-step/current-step.actions\";\r\nimport { selectStepQuestionAnsweredConfirmationMessage } from \"../../redux/all-steps/all-steps.selector\";\r\nimport ConformationMesage from \"../conformation-message/comformation-message.component\";\r\n\r\nclass StepList extends React.Component {\r\n    completeStepQuestion = (e) => {\r\n        const {completeStepQuestion} = this.props\r\n        const stepId = e.target.id\r\n        console.log(stepId)\r\n        completeStepQuestion(stepId)\r\n    }\r\n  render() {\r\n    let steps = this.props.steps;\r\n    console.log(steps);\r\n    if (!steps) {\r\n      steps = [];\r\n    }\r\n    return (\r\n      <div>\r\n        {steps.map(\r\n          ({ stepName, questionStatement, _id, isStepDone, isQuestionAnswered }) => {\r\n              console.log(_id)\r\n            return (\r\n              <div\r\n                key={_id}\r\n                style={{ padding: \"10px\", border: \"1px solid black\" }}\r\n              >\r\n                \r\n                <Link to={`/step/${_id}`}>\r\n                  <h3>Step Name: {stepName}</h3>\r\n                </Link>\r\n                \r\n                {questionStatement ? (\r\n                  <>\r\n                    <h4>Step question: {questionStatement}</h4>\r\n                    <br />\r\n                    {\r\n                      isQuestionAnswered ? <div>Question has been answered</div> : null\r\n                    }\r\n                    {\r\n                      isStepDone ? <div>Step Completed!</div> : null\r\n                    }\r\n\r\n                  </>\r\n                ) : null}\r\n               \r\n              </div>\r\n            );\r\n          }\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  completeStepQuestion: (stepId) => dispatch(completeStepQuestionStart(stepId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(StepList);\r\n"]},"metadata":{},"sourceType":"module"}