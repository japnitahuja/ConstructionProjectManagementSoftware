{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\organisation\\\\organisation.page.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStructuredSelector } from \"reselect\";\nimport { createOrganisationStart, fetchAllOrganisationsStart } from \"../../redux/organisation/organisation.actions\";\nimport { selectAllOrganisations, selectFetchAllOrganisationsSuccess } from \"../../redux/organisation/organisation.selectors\";\nimport ProjectsNav from \"../../components/projects-nav/projects-nav.component\";\nimport { CostbookCostCode } from \"../../components/costbook-costcode/costbook-costcode.component\";\nimport Spinner from \"../../components/spinner/spinner.component\";\nimport OrganisationCreateButton from \"../../components/organisation-createbutton/organisation-createbutton.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass Organisation extends Component {\n  constructor() {\n    super();\n    this.state = {\n      organisationDetails: {\n        organisationName: null,\n        organisationEmail: null,\n        organisationNumber: null,\n        organisationAddress: null\n      }\n    };\n  }\n\n  componentDidMount() {\n    this.props.fetchOrganisations();\n  }\n\n  render() {\n    console.log(this.props.organisations);\n    let {\n      organisationsFetched\n    } = this.props;\n\n    if (!organisationsFetched) {\n      return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ProjectsNav, {\n        title: \"Organisations\",\n        toggleSearchBar: this.toggleSearchBar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), this.props.organisations.map(org => {\n        console.log(org.organisation._id);\n        return /*#__PURE__*/_jsxDEV(Link, {\n          to: `/all-projects/${org.organisation._id}`,\n          style: {\n            textDecoration: \"none\",\n            color: \"rgba(0,0,0,0.8)\"\n          },\n          children: [\" \", /*#__PURE__*/_jsxDEV(CostbookCostCode, {\n            title: org.organisation.organisationName\n          }, org.organisation._id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this)]\n        }, org.organisation._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(OrganisationCreateButton, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  organisationsFetched: selectFetchAllOrganisationsSuccess,\n  organisations: selectAllOrganisations\n});\n\nconst mapDispatchToProps = dispatch => ({\n  // signOut: () => dispatch(signOut()),\n  // createProject: (projectDetails) =>\n  //   dispatch(createProjectStart(projectDetails)),\n  // fetchProjects: () => dispatch(fetchProjectsStart()),\n  createOrganisation: orgDetails => dispatch(createOrganisationStart(orgDetails)),\n  fetchOrganisations: userId => dispatch(fetchAllOrganisationsStart(userId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Organisation);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/organisation/organisation.page.js"],"names":["React","Component","connect","Link","createStructuredSelector","createOrganisationStart","fetchAllOrganisationsStart","selectAllOrganisations","selectFetchAllOrganisationsSuccess","ProjectsNav","CostbookCostCode","Spinner","OrganisationCreateButton","Organisation","constructor","state","organisationDetails","organisationName","organisationEmail","organisationNumber","organisationAddress","componentDidMount","props","fetchOrganisations","render","console","log","organisations","organisationsFetched","toggleSearchBar","map","org","organisation","_id","textDecoration","color","mapStateToProps","mapDispatchToProps","dispatch","createOrganisation","orgDetails","userId"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,SAASC,wBAAT,QAAyC,UAAzC;AACA,SACEC,uBADF,EAEEC,0BAFF,QAGO,+CAHP;AAIA,SACEC,sBADF,EAEEC,kCAFF,QAGO,iDAHP;AAIA,OAAOC,WAAP,MAAwB,sDAAxB;AACA,SAASC,gBAAT,QAAiC,gEAAjC;AACA,OAAOC,OAAP,MAAoB,4CAApB;AACA,OAAOC,wBAAP,MAAqC,gFAArC;;;;AAEA,MAAMC,YAAN,SAA2BZ,SAA3B,CAAqC;AACnCa,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,mBAAmB,EAAE;AACnBC,QAAAA,gBAAgB,EAAE,IADC;AAEnBC,QAAAA,iBAAiB,EAAE,IAFA;AAGnBC,QAAAA,kBAAkB,EAAE,IAHD;AAInBC,QAAAA,mBAAmB,EAAE;AAJF;AADV,KAAb;AAQD;;AAEDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,KAAL,CAAWC,kBAAX;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACPC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKJ,KAAL,CAAWK,aAAvB;AACA,QAAI;AAAEC,MAAAA;AAAF,QAA2B,KAAKN,KAApC;;AAEA,QAAI,CAACM,oBAAL,EAA2B;AACzB,0BAAO,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,cAAP;AACD;;AAED,wBACE;AAAA,8BACE,QAAC,WAAD;AACE,QAAA,KAAK,EAAC,eADR;AAEE,QAAA,eAAe,EAAE,KAAKC;AAFxB;AAAA;AAAA;AAAA;AAAA,cADF,EAKG,KAAKP,KAAL,CAAWK,aAAX,CAAyBG,GAAzB,CAA8BC,GAAD,IAAS;AACrCN,QAAAA,OAAO,CAACC,GAAR,CAAYK,GAAG,CAACC,YAAJ,CAAiBC,GAA7B;AACA,4BACE,QAAC,IAAD;AAEE,UAAA,EAAE,EAAG,iBAAgBF,GAAG,CAACC,YAAJ,CAAiBC,GAAI,EAF5C;AAGE,UAAA,KAAK,EAAE;AAAEC,YAAAA,cAAc,EAAE,MAAlB;AAA0BC,YAAAA,KAAK,EAAE;AAAjC,WAHT;AAAA,qBAKG,GALH,eAME,QAAC,gBAAD;AAEE,YAAA,KAAK,EAAEJ,GAAG,CAACC,YAAJ,CAAiBf;AAF1B,aACOc,GAAG,CAACC,YAAJ,CAAiBC,GADxB;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA,WACOF,GAAG,CAACC,YAAJ,CAAiBC,GADxB;AAAA;AAAA;AAAA;AAAA,gBADF;AAaD,OAfA,CALH,eAsBE,QAAC,wBAAD;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA,oBADF;AA0BD;;AAnDkC;;AAsDrC,MAAMG,eAAe,GAAGhC,wBAAwB,CAAC;AAC/CwB,EAAAA,oBAAoB,EAAEpB,kCADyB;AAE/CmB,EAAAA,aAAa,EAAEpB;AAFgC,CAAD,CAAhD;;AAKA,MAAM8B,kBAAkB,GAAIC,QAAD,KAAe;AACxC;AACA;AACA;AACA;AACAC,EAAAA,kBAAkB,EAAGC,UAAD,IAClBF,QAAQ,CAACjC,uBAAuB,CAACmC,UAAD,CAAxB,CAN8B;AAOxCjB,EAAAA,kBAAkB,EAAGkB,MAAD,IAAYH,QAAQ,CAAChC,0BAA0B,CAACmC,MAAD,CAA3B;AAPA,CAAf,CAA3B;;AAUA,eAAevC,OAAO,CAACkC,eAAD,EAAkBC,kBAAlB,CAAP,CAA6CxB,YAA7C,CAAf","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport {\r\n  createOrganisationStart,\r\n  fetchAllOrganisationsStart,\r\n} from \"../../redux/organisation/organisation.actions\";\r\nimport {\r\n  selectAllOrganisations,\r\n  selectFetchAllOrganisationsSuccess,\r\n} from \"../../redux/organisation/organisation.selectors\";\r\nimport ProjectsNav from \"../../components/projects-nav/projects-nav.component\";\r\nimport { CostbookCostCode } from \"../../components/costbook-costcode/costbook-costcode.component\";\r\nimport Spinner from \"../../components/spinner/spinner.component\";\r\nimport OrganisationCreateButton from \"../../components/organisation-createbutton/organisation-createbutton.component\";\r\n\r\nclass Organisation extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      organisationDetails: {\r\n        organisationName: null,\r\n        organisationEmail: null,\r\n        organisationNumber: null,\r\n        organisationAddress: null,\r\n      },\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchOrganisations();\r\n  }\r\n\r\n  render() {\r\n    console.log(this.props.organisations);\r\n    let { organisationsFetched } = this.props;\r\n\r\n    if (!organisationsFetched) {\r\n      return <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <ProjectsNav\r\n          title=\"Organisations\"\r\n          toggleSearchBar={this.toggleSearchBar}\r\n        />\r\n        {this.props.organisations.map((org) => {\r\n          console.log(org.organisation._id);\r\n          return (\r\n            <Link\r\n              key={org.organisation._id}\r\n              to={`/all-projects/${org.organisation._id}`}\r\n              style={{ textDecoration: \"none\", color: \"rgba(0,0,0,0.8)\" }}\r\n            >\r\n              {\" \"}\r\n              <CostbookCostCode\r\n                key={org.organisation._id}\r\n                title={org.organisation.organisationName}\r\n              />\r\n            </Link>\r\n          );\r\n        })}\r\n\r\n        <OrganisationCreateButton />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  organisationsFetched: selectFetchAllOrganisationsSuccess,\r\n  organisations: selectAllOrganisations,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  // signOut: () => dispatch(signOut()),\r\n  // createProject: (projectDetails) =>\r\n  //   dispatch(createProjectStart(projectDetails)),\r\n  // fetchProjects: () => dispatch(fetchProjectsStart()),\r\n  createOrganisation: (orgDetails) =>\r\n    dispatch(createOrganisationStart(orgDetails)),\r\n  fetchOrganisations: (userId) => dispatch(fetchAllOrganisationsStart(userId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Organisation);\r\n"]},"metadata":{},"sourceType":"module"}