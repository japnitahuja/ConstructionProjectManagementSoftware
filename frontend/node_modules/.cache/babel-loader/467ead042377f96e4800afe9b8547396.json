{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lenovo\\\\Desktop\\\\GitHub\\\\myles-website\\\\frontend\\\\src\\\\pages\\\\project\\\\project.page.js\";\nimport React, { Component } from \"react\";\nimport { createStructuredSelector } from \"reselect\";\nimport { connect } from \"react-redux\";\nimport CreateTaskForm from \"../../components/create-task-form/create-task-form.component\";\nimport { fetchCurrentProjectStart } from \"../../redux/current-project/current-project.actions\";\nimport { selectCurrentProjectFetchSuccess, selectCurrentProjectId, selectCurrentProjectName, selectCurrentProjectStatus, selectCurrentProjectTasks } from \"../../redux/current-project/current-project.selectors\";\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\nimport LowerNavBar from \"../../components/lower-nav-bar/lower-nav-bar.component\";\nimport TaskListContainer from \"../../components/tasks-list/tasks-list.container\";\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\nimport AdminPanelTaskPage from \"../../components/admin-panel-task-page/admin-panel-task-page.component\";\nimport ToggleButton from \"../../components/toggle-button/toggle-button.component\";\nimport { Overlay } from \"../../components/admin-panel-task-page/admin-panel-task-page.styles\";\nimport NoResult from \"../../components/no-result/no-result.component\";\nimport TasksFilter from \"../../components/tasks-filter/tasks-filter.component\";\nimport Spinner from \"../../components/spinner/spinner.component\";\nimport adduserFormComponent from \"../../components/adduser-form/adduser-form.component\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Project extends Component {\n  constructor() {\n    super();\n\n    this.adminToggle = () => {\n      this.setState(prevState => ({\n        adminSwitch: !prevState.adminSwitch\n      }));\n    };\n\n    this.search = searchedText => {\n      let temp = this.props.tasks;\n\n      if (searchedText) {\n        temp = temp.filter(({\n          taskName\n        }) => {\n          return taskName.toLowerCase().includes(searchedText.toLowerCase());\n        });\n      }\n\n      this.setState({\n        tasksList: temp\n      });\n    };\n\n    this.toggleSearchBar = () => {\n      this.setState(prevState => ({\n        showSearch: !prevState.showSearch\n      }));\n    };\n\n    this.toggleFilter = () => {\n      this.setState(prevState => ({\n        showFilter: !prevState.showFilter\n      }));\n    };\n\n    this.setTaskState = () => {\n      console.log(\"settask\", this.props.tasks);\n      this.setState({\n        tasksList: this.props.tasks,\n        setTasks: 1\n      });\n    };\n\n    this.state = {\n      adminSwitch: false,\n      tasksList: [],\n      showSearch: false,\n      showFilter: false,\n      setTasks: 0\n    };\n  }\n\n  componentDidMount() {\n    const projectId = this.props.match.params.projectId;\n    console.log(this.props.match.params.projectId);\n    this.props.fetchProjects(projectId);\n    this.setState({\n      tasksList: this.props.tasks\n    });\n  }\n\n  componentDidUpdate() {\n    console.log(\"component updated.\");\n  }\n\n  render() {\n    const {\n      projectName,\n      projectId\n    } = this.props;\n    let {\n      tasksList\n    } = this.state;\n    console.log(\"project page rendered.\");\n    console.log(tasksList);\n    let {\n      fetchTasksSuccess\n    } = this.props;\n    console.log(\"success\", fetchTasksSuccess);\n\n    if (!fetchTasksSuccess) {\n      return /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 14\n      }, this);\n    } else if (fetchTasksSuccess && projectId == this.props.match.params.projectId && this.state.setTasks == 0) {\n      this.setTaskState();\n    }\n\n    if (!tasksList) {\n      tasksList = [];\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: \"5em\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(TaskNav, {\n        title: projectName,\n        toggleSearch: this.toggleSearchBar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this), this.state.showSearch ? /*#__PURE__*/_jsxDEV(SearchBar, {\n        placeholder: \"Search Tasks...\",\n        search: this.search,\n        toggleFilter: this.toggleFilter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: \"1em\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"flex-end\",\n          alignItems: \"center\",\n          borderBottom: \"1px solid #BCC5D3\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(ToggleButton, {\n          onToggleFunction: this.adminToggle,\n          checked: this.state.adminSwitch,\n          color: \"#6C5FCF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            fontSize: \"1em\",\n            color: \"#666666\",\n            margin: \"0\",\n            paddingLeft: \"0.5em\"\n          },\n          children: \"Admin\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this), this.state.adminSwitch ? /*#__PURE__*/_jsxDEV(AdminPanelTaskPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 35\n      }, this) : null, tasksList.length === 0 ? /*#__PURE__*/_jsxDEV(NoResult, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(TaskListContainer, {\n        tasks: tasksList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(LowerNavBar, {\n        projectId: this.props.match.params.projectId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), this.state.showFilter ? /*#__PURE__*/_jsxDEV(Overlay, {\n        backgroundcolor: \"rgba(0,0,0,0.3)\",\n        style: {\n          bottom: \"0\",\n          height: \"100%\",\n          display: \"flex\",\n          flexDirection: \"row\",\n          justifyContent: \"center\",\n          alignItems: \"center\"\n        },\n        children: /*#__PURE__*/_jsxDEV(TasksFilter, {\n          exit: this.toggleFilter\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 11\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nconst mapStateToProps = createStructuredSelector({\n  projectName: selectCurrentProjectName,\n  projectStatus: selectCurrentProjectStatus,\n  tasks: selectCurrentProjectTasks,\n  fetchTasksSuccess: selectCurrentProjectFetchSuccess,\n  projectId: selectCurrentProjectId\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchProjects: projectId => dispatch(fetchCurrentProjectStart(projectId))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/pages/project/project.page.js"],"names":["React","Component","createStructuredSelector","connect","CreateTaskForm","fetchCurrentProjectStart","selectCurrentProjectFetchSuccess","selectCurrentProjectId","selectCurrentProjectName","selectCurrentProjectStatus","selectCurrentProjectTasks","TaskNav","LowerNavBar","TaskListContainer","SearchBar","AdminPanelTaskPage","ToggleButton","Overlay","NoResult","TasksFilter","Spinner","adduserFormComponent","Project","constructor","adminToggle","setState","prevState","adminSwitch","search","searchedText","temp","props","tasks","filter","taskName","toLowerCase","includes","tasksList","toggleSearchBar","showSearch","toggleFilter","showFilter","setTaskState","console","log","setTasks","state","componentDidMount","projectId","match","params","fetchProjects","componentDidUpdate","render","projectName","fetchTasksSuccess","marginBottom","padding","display","flexDirection","justifyContent","alignItems","borderBottom","fontSize","color","margin","paddingLeft","length","bottom","height","mapStateToProps","projectStatus","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\nimport CreateTaskForm from \"../../components/create-task-form/create-task-form.component\";\r\nimport { fetchCurrentProjectStart } from \"../../redux/current-project/current-project.actions\";\r\nimport {\r\n  selectCurrentProjectFetchSuccess,\r\n  selectCurrentProjectId,\r\n  selectCurrentProjectName,\r\n  selectCurrentProjectStatus,\r\n  selectCurrentProjectTasks,\r\n} from \"../../redux/current-project/current-project.selectors\";\r\nimport { TaskNav } from \"../../components/task-nav/task-nav.component\";\r\nimport LowerNavBar from \"../../components/lower-nav-bar/lower-nav-bar.component\";\r\nimport TaskListContainer from \"../../components/tasks-list/tasks-list.container\";\r\nimport SearchBar from \"../../components/search-bar/search-bar.component\";\r\nimport AdminPanelTaskPage from \"../../components/admin-panel-task-page/admin-panel-task-page.component\";\r\nimport ToggleButton from \"../../components/toggle-button/toggle-button.component\";\r\nimport { Overlay } from \"../../components/admin-panel-task-page/admin-panel-task-page.styles\";\r\nimport NoResult from \"../../components/no-result/no-result.component\";\r\nimport TasksFilter from \"../../components/tasks-filter/tasks-filter.component\";\r\nimport Spinner from \"../../components/spinner/spinner.component\";\r\nimport adduserFormComponent from \"../../components/adduser-form/adduser-form.component\";\r\n\r\nclass Project extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      adminSwitch: false,\r\n      tasksList: [],\r\n      showSearch: false,\r\n      showFilter: false,\r\n      setTasks: 0,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const projectId = this.props.match.params.projectId;\r\n    console.log(this.props.match.params.projectId);\r\n    this.props.fetchProjects(projectId);\r\n    this.setState({ tasksList: this.props.tasks });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    console.log(\"component updated.\");\r\n  }\r\n\r\n  adminToggle = () => {\r\n    this.setState((prevState) => ({\r\n      adminSwitch: !prevState.adminSwitch,\r\n    }));\r\n  };\r\n\r\n  search = (searchedText) => {\r\n    let temp = this.props.tasks;\r\n\r\n    if (searchedText) {\r\n      temp = temp.filter(({ taskName }) => {\r\n        return taskName.toLowerCase().includes(searchedText.toLowerCase());\r\n      });\r\n    }\r\n\r\n    this.setState({ tasksList: temp });\r\n  };\r\n\r\n  toggleSearchBar = () => {\r\n    this.setState((prevState) => ({\r\n      showSearch: !prevState.showSearch,\r\n    }));\r\n  };\r\n\r\n  toggleFilter = () => {\r\n    this.setState((prevState) => ({\r\n      showFilter: !prevState.showFilter,\r\n    }));\r\n  };\r\n\r\n  setTaskState = () => {\r\n    console.log(\"settask\", this.props.tasks);\r\n    this.setState({\r\n      tasksList: this.props.tasks,\r\n      setTasks: 1,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { projectName, projectId } = this.props;\r\n    let { tasksList } = this.state;\r\n    console.log(\"project page rendered.\");\r\n    console.log(tasksList);\r\n\r\n    let { fetchTasksSuccess } = this.props;\r\n    console.log(\"success\", fetchTasksSuccess);\r\n    if (!fetchTasksSuccess) {\r\n      return <Spinner />;\r\n    } else if (\r\n      fetchTasksSuccess &&\r\n      projectId == this.props.match.params.projectId &&\r\n      this.state.setTasks == 0\r\n    ) {\r\n      this.setTaskState();\r\n    }\r\n\r\n    if (!tasksList) {\r\n      tasksList = [];\r\n    }\r\n\r\n    return (\r\n      <div style={{ marginBottom: \"5em\" }}>\r\n        <TaskNav title={projectName} toggleSearch={this.toggleSearchBar} />\r\n        {this.state.showSearch ? (\r\n          <SearchBar\r\n            placeholder=\"Search Tasks...\"\r\n            search={this.search}\r\n            toggleFilter={this.toggleFilter}\r\n          />\r\n        ) : null}\r\n        <div\r\n          style={{\r\n            padding: \"1em\",\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            justifyContent: \"flex-end\",\r\n            alignItems: \"center\",\r\n            borderBottom: \"1px solid #BCC5D3\",\r\n          }}\r\n        >\r\n          <ToggleButton\r\n            onToggleFunction={this.adminToggle}\r\n            checked={this.state.adminSwitch}\r\n            color=\"#6C5FCF\"\r\n          />\r\n          <p\r\n            style={{\r\n              fontSize: \"1em\",\r\n              color: \"#666666\",\r\n              margin: \"0\",\r\n              paddingLeft: \"0.5em\",\r\n            }}\r\n          >\r\n            Admin\r\n          </p>\r\n        </div>\r\n\r\n        {this.state.adminSwitch ? <AdminPanelTaskPage /> : null}\r\n        {tasksList.length === 0 ? (\r\n          <NoResult />\r\n        ) : (\r\n          <TaskListContainer tasks={tasksList} />\r\n        )}\r\n        {/* <CreateTaskForm projectId = {this.props.match.params.projectId}/> */}\r\n        <LowerNavBar projectId={this.props.match.params.projectId} />\r\n\r\n        {this.state.showFilter ? (\r\n          <Overlay\r\n            backgroundcolor=\"rgba(0,0,0,0.3)\"\r\n            style={{\r\n              bottom: \"0\",\r\n              height: \"100%\",\r\n              display: \"flex\",\r\n              flexDirection: \"row\",\r\n              justifyContent: \"center\",\r\n              alignItems: \"center\",\r\n            }}\r\n          >\r\n            <TasksFilter exit={this.toggleFilter} />\r\n          </Overlay>\r\n        ) : null}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  projectName: selectCurrentProjectName,\r\n  projectStatus: selectCurrentProjectStatus,\r\n  tasks: selectCurrentProjectTasks,\r\n  fetchTasksSuccess: selectCurrentProjectFetchSuccess,\r\n  projectId: selectCurrentProjectId,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchProjects: (projectId) => dispatch(fetchCurrentProjectStart(projectId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Project);\r\n"]},"metadata":{},"sourceType":"module"}