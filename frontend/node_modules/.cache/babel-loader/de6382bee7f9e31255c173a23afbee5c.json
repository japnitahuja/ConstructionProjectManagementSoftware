{"ast":null,"code":"import { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { signInFailure, signInSuccessful, signUpFail, signUpSuccesful, taskOwnerAndTradePartnerSignUpSuccessful } from \"./user.actions\";\nimport { UserActionTypes } from \"./user.types\";\nexport function* signUp({\n  payload\n}) {\n  console.log(\"Sign Up has started.\");\n  console.log(payload);\n\n  try {\n    let data = payload;\n    console.log(JSON.stringify(data));\n    let resp = yield fetch(\"http://127.0.0.1:5000/signup\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    console.log(resp);\n    resp = yield resp.json();\n\n    if (resp.done) {\n      if (resp.user) {\n        const user = yield resp.user;\n        const token = yield resp.token;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        yield put(signUpSuccesful(user));\n      } else {\n        yield put(taskOwnerAndTradePartnerSignUpSuccessful(resp.message));\n      }\n    } else {\n      yield put(signUpFail(\"Failed to sign up.\"));\n    }\n  } catch (error) {\n    yield put(signUpFail(error));\n  }\n}\nexport function* signIn({\n  payload\n}) {\n  try {\n    let data = payload;\n    let resp = yield fetch(\"http://127.0.0.1:5000/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      if (resp.user) {\n        const user = yield resp.user;\n        const token = yield resp.token;\n        localStorage.setItem(\"token\", token);\n        localStorage.setItem(\"user\", JSON.stringify(user));\n        yield put(signInSuccessful(user));\n      } else {\n        yield put(signInFailure(resp.message));\n      }\n    } else {\n      yield put(signInFailure(resp.error));\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signIn);\n}\nexport function* userSagas() {\n  yield all([call(onSignUpStart), call(onSignInStart)]);\n}","map":{"version":3,"sources":["C:/Users/lenovo/desktop/github/myles-website/frontend/src/redux/user/user.sagas.js"],"names":["all","call","put","takeLatest","signInFailure","signInSuccessful","signUpFail","signUpSuccesful","taskOwnerAndTradePartnerSignUpSuccessful","UserActionTypes","signUp","payload","console","log","data","JSON","stringify","resp","fetch","method","headers","body","json","done","user","token","localStorage","setItem","message","error","signIn","onSignUpStart","SIGN_UP_START","onSignInStart","EMAIL_SIGN_IN_START","userSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { signInFailure, signInSuccessful, signUpFail, signUpSuccesful, taskOwnerAndTradePartnerSignUpSuccessful } from \"./user.actions\";\r\nimport { UserActionTypes } from \"./user.types\";\r\n\r\nexport function* signUp({ payload }) {\r\n  console.log(\"Sign Up has started.\");\r\n  console.log(payload);\r\n\r\n  try {\r\n    let data = payload;\r\n    console.log(JSON.stringify(data));\r\n    let resp = yield fetch(\"http://127.0.0.1:5000/signup\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n    console.log(resp);\r\n    resp = yield resp.json();\r\n    if (resp.done) {\r\n      if (resp.user) {\r\n        const user = yield resp.user;\r\n        const token = yield resp.token;\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n        yield put(signUpSuccesful(user));\r\n      } else {\r\n        yield put(taskOwnerAndTradePartnerSignUpSuccessful(resp.message));\r\n      }\r\n    } else {\r\n      yield put(signUpFail(\"Failed to sign up.\"));\r\n    }\r\n  } catch (error) {\r\n    yield put(signUpFail(error));\r\n  }\r\n}\r\n\r\nexport function* signIn({payload}){\r\n  try {\r\n    let data = payload;\r\n    let resp = yield fetch(\"http://127.0.0.1:5000/login\", {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      if(resp.user){\r\n        const user = yield resp.user;\r\n        const token = yield resp.token;\r\n        localStorage.setItem(\"token\", token);\r\n        localStorage.setItem(\"user\", JSON.stringify(user));\r\n        yield put(signInSuccessful(user));\r\n      }else{\r\n        yield put(signInFailure(resp.message))\r\n      }\r\n    }else{\r\n      yield put(signInFailure(resp.error))\r\n    }\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* onSignUpStart() {\r\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\r\n}\r\n\r\nexport function* onSignInStart(){\r\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signIn)\r\n}\r\n\r\nexport function* userSagas() {\r\n  yield all([\r\n    call(onSignUpStart),\r\n    call(onSignInStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}