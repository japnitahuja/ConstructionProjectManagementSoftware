{"ast":null,"code":"import { all, call, put, takeLatest, select, delay } from \"redux-saga/effects\";\nimport { createProjectSucessful, createProjectFail, fetchProjectsStart, fetchProjectsFailure, fetchProjectsSuccess, createProjectTemplateSuccess, createProjectTemplateFailure } from \"./all-projects.actions\";\nimport { ProjectActionTypes } from \"./all-projects.types\";\nimport { selectUserId } from \"../user/user.selectors\";\nimport { selectCurrentOrganisationId } from \"../orgnaisation/organisation.selectors\";\nexport function* createProject({\n  payload\n}) {\n  try {\n    let data = payload;\n    const orgId = yield select(selectCurrentOrganisationId);\n    data['organisationId'] = orgId;\n    let userId = yield select(selectUserId);\n    console.log(userId);\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/create-project/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createProjectSucessful(resp.message));\n    } else {\n      yield put(createProjectFail(resp.error));\n    }\n\n    yield delay(500);\n    yield put(fetchProjectsStart());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* fetchProjects({\n  payload\n}) {\n  try {\n    // const token = yield JSON.parse(localStorage.getItem('token'))\n    // console.log(token)\n    const token = localStorage.getItem('token');\n    console.log(token);\n    let orgId = payload;\n    console.log(orgId, 'saga org id');\n    let userId = yield select(selectUserId);\n    let projects = yield fetch(`http://127.0.0.1:5000/all-projects/${userId}/${orgId}`, {\n      method: 'GET',\n      headers: {\n        \"Content-Type\": \"application/json\",\n        // \"Authorization\" : `Bearer ${token}`,\n        \"UserPermission\": 'ADMIN'\n      }\n    });\n    projects = yield projects.json();\n    console.log(projects, 'saga projects');\n    projects.done ? yield put(fetchProjectsSuccess(projects.projects)) : yield put(fetchProjectsFailure(projects.error));\n  } catch (error) {\n    fetchProjectsFailure(error);\n  }\n}\nexport function* createProjectTemplate({\n  payload\n}) {\n  try {\n    let data = payload;\n    let userId = yield select(selectUserId);\n    console.log(userId);\n    console.log(data);\n    let resp = yield fetch(`http://127.0.0.1:5000/test-template/${userId}`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(data)\n    });\n    resp = yield resp.json();\n\n    if (resp.done) {\n      yield put(createProjectTemplateSuccess(resp.message));\n    } else {\n      yield put(createProjectTemplateFailure(resp.error));\n    }\n\n    yield delay(500);\n    yield put(fetchProjectsStart());\n  } catch (error) {\n    console.log(error);\n  }\n}\nexport function* onProjectCreateStart() {\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_START, createProject);\n}\nexport function* onProjectFetchStart() {\n  yield takeLatest(ProjectActionTypes.FETCH_PROJECTS_START, fetchProjects);\n}\nexport function* OnProjectTemplateCreateStart() {\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_TEMPLATE_START, createProjectTemplate);\n}\n_c = OnProjectTemplateCreateStart;\nexport function* projectSagas() {\n  yield all([call(onProjectCreateStart), call(onProjectFetchStart), call(OnProjectTemplateCreateStart)]);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"OnProjectTemplateCreateStart\");","map":{"version":3,"sources":["C:/Users/lenovo/Desktop/GitHub/myles-website/frontend/src/redux/all-projects/all-projects.sagas.js"],"names":["all","call","put","takeLatest","select","delay","createProjectSucessful","createProjectFail","fetchProjectsStart","fetchProjectsFailure","fetchProjectsSuccess","createProjectTemplateSuccess","createProjectTemplateFailure","ProjectActionTypes","selectUserId","selectCurrentOrganisationId","createProject","payload","data","orgId","userId","console","log","resp","fetch","method","headers","body","JSON","stringify","json","done","message","error","fetchProjects","token","localStorage","getItem","projects","createProjectTemplate","onProjectCreateStart","CREATE_PROJECT_START","onProjectFetchStart","FETCH_PROJECTS_START","OnProjectTemplateCreateStart","CREATE_PROJECT_TEMPLATE_START","projectSagas"],"mappings":"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","sourcesContent":["import { all, call, put, takeLatest, select, delay} from \"redux-saga/effects\";\r\nimport { createProjectSucessful, createProjectFail, fetchProjectsStart, fetchProjectsFailure, fetchProjectsSuccess, createProjectTemplateSuccess, createProjectTemplateFailure } from \"./all-projects.actions\";\r\nimport { ProjectActionTypes } from \"./all-projects.types\";\r\nimport { selectUserId } from \"../user/user.selectors\"\r\nimport { selectCurrentOrganisationId } from \"../orgnaisation/organisation.selectors\";\r\n\r\nexport function* createProject({payload}){\r\n  try {\r\n    let data = payload;\r\n    const orgId = yield select(selectCurrentOrganisationId)\r\n    data['organisationId'] = orgId\r\n    let userId = yield select(selectUserId);\r\n    console.log(userId);\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/create-project/${userId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      yield put(createProjectSucessful(resp.message));\r\n    }else{\r\n      yield put(createProjectFail(resp.error))\r\n    }\r\n    yield delay(500)\r\n    yield put(fetchProjectsStart());\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\nexport function* fetchProjects({payload}){\r\n  try {\r\n    // const token = yield JSON.parse(localStorage.getItem('token'))\r\n    // console.log(token)\r\n    const token =  localStorage.getItem('token')\r\n    console.log(token)\r\n    let orgId = payload\r\n    console.log(orgId, 'saga org id')\r\n    let userId = yield select(selectUserId);\r\n    let projects = yield fetch(`http://127.0.0.1:5000/all-projects/${userId}/${orgId}`, {\r\n      method: 'GET',\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        // \"Authorization\" : `Bearer ${token}`,\r\n        \"UserPermission\": 'ADMIN'\r\n      }\r\n    })\r\n    projects = yield projects.json()\r\n    console.log(projects, 'saga projects')\r\n    projects.done\r\n    ? yield put(fetchProjectsSuccess(projects.projects))\r\n    : yield put(fetchProjectsFailure(projects.error))\r\n  } catch (error) {\r\n    fetchProjectsFailure(error)\r\n  }\r\n}\r\n\r\nexport function* createProjectTemplate({payload}){\r\n  try {\r\n    let data = payload;\r\n    let userId = yield select(selectUserId);\r\n    console.log(userId);\r\n    console.log(data);\r\n    let resp = yield fetch(`http://127.0.0.1:5000/test-template/${userId}`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify(data),\r\n    });\r\n\r\n    resp = yield resp.json()\r\n    if(resp.done){\r\n      yield put(createProjectTemplateSuccess(resp.message));\r\n    }else{\r\n      yield put(createProjectTemplateFailure(resp.error))\r\n    }\r\n    yield delay(500)\r\n    yield put(fetchProjectsStart());\r\n  } catch (error) {\r\n    console.log(error)\r\n  }\r\n}\r\n\r\n\r\nexport function* onProjectCreateStart(){\r\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_START, createProject)\r\n}\r\n\r\nexport function* onProjectFetchStart(){\r\n  yield takeLatest(ProjectActionTypes.FETCH_PROJECTS_START, fetchProjects)\r\n}\r\n\r\nexport function* OnProjectTemplateCreateStart(){\r\n  yield takeLatest(ProjectActionTypes.CREATE_PROJECT_TEMPLATE_START, createProjectTemplate)\r\n}\r\n\r\nexport function* projectSagas() {\r\n  yield all([\r\n    call(onProjectCreateStart),\r\n    call(onProjectFetchStart),\r\n    call(OnProjectTemplateCreateStart)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}